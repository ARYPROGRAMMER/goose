[
    {
      "function": {
        "description": "Execute a command in the shell.\n\nThis will return the output and error concatenated into a single string, as\nyou would see from running on the command line. There will also be an indication\nof if the command succeeded or failed.\n\nAvoid commands that produce a large amount of output, and consider piping those outputs to files.\nIf you need to run a long lived command, background it - e.g. `uvicorn main:app &` so that\nthis tool does not run indefinitely.\n\n**Important**: Each shell command runs in its own process. Things like directory changes or\nsourcing files do not persist between tool calls. So you may need to repeat them each time by\nstringing together commands, e.g. `cd example && ls` or `source env/bin/activate && pip install numpy`\n\n**Important**: Use ripgrep - `rg` - when you need to locate a file or a code reference, other solutions\nmay show ignored or hidden files. For example *do not* use `find` or `ls -r`\n  - List files by name: `rg --files | rg <filename>`\n  - List files that contain a regex: `rg '<",
        "name": "developer__shell",
        "parameters": {
          "properties": {
            "command": {
              "type": "string"
            }
          },
          "required": [
            "command"
          ],
          "type": "object"
        }
      },
      "type": "function"
    },
    {
      "function": {
        "description": "Perform text editing operations on files.\n\nThe `command` parameter specifies the operation to perform. Allowed options are:\n- `view`: View the content of a file.\n- `write`: Create or overwrite a file with the given content\n- `str_replace`: Replace a string in a file with a new string.\n- `undo_edit`: Undo the last edit made to a file.\n\nTo use the write command, you must specify `file_text` which will become the new content of the file. Be careful with\nexisting files! This is a full overwrite, so you must include everything - not just sections you are modifying.\n\nTo use the str_replace command, you must specify both `old_str` and `new_str` - the `old_str` needs to exactly match one\nunique section of the original file, including any whitespace. Make sure to include enough context that the match is not\nambiguous. The entire original string will be replaced with `new_str`.\n",
        "name": "developer__text_editor",
        "parameters": {
          "properties": {
            "command": {
              "description": "Allowed options are: `view`, `write`, `str_replace`, undo_edit`.",
              "enum": [
                "view",
                "write",
                "str_replace",
                "undo_edit"
              ],
              "type": "string"
            },
            "file_text": {
              "type": "string"
            },
            "new_str": {
              "type": "string"
            },
            "old_str": {
              "type": "string"
            },
            "path": {
              "description": "Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.",
              "type": "string"
            }
          },
          "required": [
            "command",
            "path"
          ],
          "type": "object"
        }
      },
      "type": "function"
    },
    {
      "function": {
        "description": "List all available window titles that can be used with screen_capture.\nReturns a list of window titles that can be used with the window_title parameter\nof the screen_capture tool.\n",
        "name": "developer__list_windows",
        "parameters": {
          "properties": {},
          "required": [],
          "type": "object"
        }
      },
      "type": "function"
    },
    {
      "function": {
        "description": "Capture a screenshot of a specified display or window.\nYou can capture either:\n1. A full display (monitor) using the display parameter\n2. A specific window by its title using the window_title parameter\n\nOnly one of display or window_title should be specified.\n",
        "name": "developer__screen_capture",
        "parameters": {
          "properties": {
            "display": {
              "default": 0,
              "description": "The display number to capture (0 is main display)",
              "type": "integer"
            },
            "window_title": {
              "default": null,
              "description": "Optional: the exact title of the window to capture. use the list_windows tool to find the available windows.",
              "type": "string"
            }
          },
          "required": [],
          "type": "object"
        }
      },
      "type": "function"
    },
    {
      "function": {
        "description": "Process an image file from disk. The image will be:\n1. Resized if larger than max width while maintaining aspect ratio\n2. Converted to PNG format\n3. Returned as base64 encoded data\n\nThis allows processing image files for use in the conversation.\n",
        "name": "developer__image_processor",
        "parameters": {
          "properties": {
            "path": {
              "description": "Absolute path to the image file to process",
              "type": "string"
            }
          },
          "required": [
            "path"
          ],
          "type": "object"
        }
      },
      "type": "function"
    },
    {
      "function": {
        "description": "Searches for additional extensions available to help complete tasks.\n        Use this tool when you're unable to find a specific feature or functionality you need to complete your task, or when standard approaches aren't working.\n        These extensions might provide the exact tools needed to solve your problem.\n        If you find a relevant one, consider using your tools to enable it.",
        "name": "platform__search_available_extensions",
        "parameters": {
          "properties": {},
          "required": [],
          "type": "object"
        }
      },
      "type": "function"
    },
    {
      "function": {
        "description": "Enable extensions to help complete tasks.\n            Enable an extension by providing the extension name.\n            ",
        "name": "platform__enable_extension",
        "parameters": {
          "properties": {
            "extension_name": {
              "description": "The name of the extension to enable",
              "type": "string"
            }
          },
          "required": [
            "extension_name"
          ],
          "type": "object"
        }
      },
      "type": "function"
    }
  ]