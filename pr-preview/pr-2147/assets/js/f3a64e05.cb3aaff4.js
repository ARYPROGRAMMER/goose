"use strict";(self.webpackChunkgoose=self.webpackChunkgoose||[]).push([[4855],{1396:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>n,toc:()=>h});var n=s(315),o=s(4848),i=s(8453);const r={title:"A Visual Guide To MCPs",description:"MCP ecosystem explained through visuals",authors:["ebony"]},a="A Visual Guide to MCP (Model Context Protocol)",l={authorsImageUrls:[void 0]},h=[{value:"What Is MCP in plain English?",id:"what-is-mcp-in-plain-english",level:2},{value:"Who Are The Players?",id:"who-are-the-players",level:2},{value:"How Do They Communicate?",id:"how-do-they-communicate",level:2},{value:"I&#39;m Still Confused..",id:"im-still-confused",level:2}];function d(e){const t={blockquote:"blockquote",em:"em",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"You ever open a GitHub repo or blog post and instantly feel like you need a PhD just to understand the first sentence?"}),"\n",(0,o.jsx)(t.p,{children:"Yeah. Same."}),"\n",(0,o.jsx)(t.p,{children:"So let\u2019s break down Model Context Protocol (MCP) like we\u2019re explaining it to our semi technical friend, that doesn\u2019t want to read 30 whitepapers to get the gist."}),"\n",(0,o.jsx)(t.h2,{id:"what-is-mcp-in-plain-english",children:"What Is MCP in plain English?"}),"\n",(0,o.jsx)(t.p,{children:"MCP is like a universal translator between your AI agent, like Goose, and external tools, files, databases, APIs, you name it."}),"\n",(0,o.jsx)(t.p,{children:"It gives your agent a way to, ask questions, run tools, store/retrieve context, and keep track of everything it knows."}),"\n",(0,o.jsx)(t.p,{children:"Instead of cramming everything into one prompt like \u201chere\u2019s 10k tokens worth of context, good luck,\u201d MCP helps the model pull what it needs, when it needs it."}),"\n",(0,o.jsx)(t.h2,{id:"who-are-the-players",children:"Who Are The Players?"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"players",src:s(854).A+"",width:"2312",height:"768"})}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"User"})," \u2013 You, the person with the big ideas and messy problems"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Agent"})," \u2013 The AI agent, Goose, living in your CLI, IDE, or desktop application"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"LLM"})," \u2013 The model that does the reasoning (like Claude, GPT-4, etc.)"]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"MCP Servers (Extensions)"})," \u2013 Goose's toolbox: built-in and custom extensions that give goose the ability to execute task"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"how-do-they-communicate",children:"How Do They Communicate?"}),"\n",(0,o.jsx)(t.p,{children:"Lets take a look at how all the players work together:"}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.img,{alt:"Visual guide",src:s(5720).A+"",width:"1056",height:"1516"}),"\nIn this flow, the user kicks things off by giving Goose a prompt. Goose gets the prompt ready, along with its available tools and any relevant context, and hands it off to the LLM. The LLM figures out what it needs, Goose routes those requests to the right MCP servers, and they execute the tasks. Once everything's done, Goose brings the final answer back to you, the user."]}),"\n",(0,o.jsx)(t.h2,{id:"im-still-confused",children:"I'm Still Confused.."}),"\n",(0,o.jsx)(t.p,{children:"Okay. So you\u2019ve seen the flow, but if its still not making sense lets think of it in context of James Bond."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"james bond",src:s(2736).A+"",width:"1266",height:"844"})}),"\n",(0,o.jsx)(t.p,{children:"If you\u2019ve ever seen a James Bond movie, you know the scene,\nBond walks into Q\u2019s lab before the mission.\nQ opens up the suitcase of gadgets, exploding pens, invisible cars, grappling watches, you name it."}),"\n",(0,o.jsxs)(t.p,{children:["Goose is ",(0,o.jsx)(t.em,{children:"like"})," Q in this situation.\nThe suitcase is already packed with tools, built-in and custom extensions (MCP servers)."]}),"\n",(0,o.jsx)(t.p,{children:"Before the LLM (Bond) starts the mission, Goose gives it the full briefing:"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:'"Here\u2019s your target (the prompt). Here\u2019s your gadget suitcase (the extensions you can use). Good luck."'})}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"The MCP servers?"}),"\n",(0,o.jsx)(t.p,{children:"That\u2019s the hidden team in the back actually building the gadgets and handing them over when Bond needs them in the field."}),"\n",(0,o.jsx)(t.p,{children:"The LLM (Bond) picks the right gadgets for the mission, Goose routes the request to the right MCP server, MCP makes sure they work, and the whole operation runs smoothly."}),"\n",(0,o.jsx)(t.p,{children:"Without Goose handing over the gadget suitcase, the model would just show up in the field with nothing but a tuxedo and a smile, and we don't want to know how that ends."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("meta",{property:"og:title",content:"A Visual Guide To MCPs"}),(0,o.jsx)("meta",{property:"og:type",content:"article"}),(0,o.jsx)("meta",{property:"og:url",content:"https://block.github.io/goose/blog/2025/04/10/visual-guide-mcp"}),(0,o.jsx)("meta",{property:"og:description",content:"MCP ecosystem explained through visuals"}),(0,o.jsx)("meta",{property:"og:image",content:""}),(0,o.jsx)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,o.jsx)("meta",{property:"twitter:domain",content:"block.github.io/goose"}),(0,o.jsx)("meta",{name:"twitter:title",content:"A Visual Guide To MCPs"}),(0,o.jsx)("meta",{name:"twitter:description",content:"MCP ecosystem explained through visuals"}),(0,o.jsx)("meta",{name:"twitter:image",content:""})]})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},2736:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/james-89c46143c593bee36832667ded97233c.png"},854:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/players-156350c79a4d9d2b389d5243598199e5.png"},5720:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/visualguide-9b44af19be52631e84712cad31849bee.png"},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var n=s(6540);const o={},i=n.createContext(o);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},315:e=>{e.exports=JSON.parse('{"permalink":"/goose/pr-preview/pr-2147/blog/2025/04/10/visual-guide-mcp","source":"@site/blog/2025-04-10-visual-guide-mcp/index.md","title":"A Visual Guide To MCPs","description":"MCP ecosystem explained through visuals","date":"2025-04-10T00:00:00.000Z","tags":[],"readingTime":2.705,"hasTruncateMarker":true,"authors":[{"name":"Ebony Louis","title":"Developer Advocate","page":{"permalink":"/goose/pr-preview/pr-2147/blog/authors/ebony"},"socials":{"linkedin":"https://www.linkedin.com/in/ebonylouis/","x":"https://x.com/ebonyjlouis","github":"https://github.com/ebonylouis"},"imageURL":"https://avatars.githubusercontent.com/u/55366651?v=4","key":"ebony"}],"frontMatter":{"title":"A Visual Guide To MCPs","description":"MCP ecosystem explained through visuals","authors":["ebony"]},"unlisted":false,"prevItem":{"title":"Finetuning Toolshim Models for Tool Calling","permalink":"/goose/pr-preview/pr-2147/blog/2025/04/11/finetuning-toolshim"},"nextItem":{"title":"How to Vibe Code Responsibly (with Goose)","permalink":"/goose/pr-preview/pr-2147/blog/2025/04/08/vibe-code-responsibly"}}')}}]);