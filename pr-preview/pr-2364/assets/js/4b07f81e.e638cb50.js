"use strict";(self.webpackChunkgoose=self.webpackChunkgoose||[]).push([[1754],{52241:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guides/Session-Sharing/session-sharing-implementation","title":"Create a Session Sharing Service","description":"Goose session sharing enables real-time collaboration by allowing users to share their AI-assisted workflows, conversations, and project context with team members. When you implement session sharing, your users can:","source":"@site/docs/guides/Session-Sharing/session-sharing-implementation.md","sourceDirName":"guides/Session-Sharing","slug":"/guides/Session-Sharing/session-sharing-implementation","permalink":"/goose/pr-preview/pr-2364/docs/guides/Session-Sharing/session-sharing-implementation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"sidebar_position":20,"title":"Create a Session Sharing Service","sidebar_label":"Create a Sharing Service"},"sidebar":"tutorialSidebar","previous":{"title":"Session Sharing","permalink":"/goose/pr-preview/pr-2364/docs/category/session-sharing"},"next":{"title":"Goose API Reference","permalink":"/goose/pr-preview/pr-2364/docs/guides/Session-Sharing/SSE-api-reference"}}');var r=s(74848),o=s(28453);const t={sidebar_position:20,title:"Create a Session Sharing Service",sidebar_label:"Create a Sharing Service"},a=void 0,l={},c=[{value:"Set up a server to enable session sharing",id:"set-up-a-server-to-enable-session-sharing",level:2},{value:"API Requirements",id:"api-requirements",level:3},{value:"API Interface",id:"api-interface",level:3},{value:"Security Requirements",id:"security-requirements",level:3},{value:"How Session Sharing Works",id:"how-session-sharing-works",level:2},{value:"Example Server Implementation",id:"example-server-implementation",level:2},{value:"Example web UI implementation",id:"example-web-ui-implementation",level:2},{value:"Web page code example",id:"web-page-code-example",level:3},{value:"Additional Considerations",id:"additional-considerations",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Goose session sharing enables real-time collaboration by allowing users to share their AI-assisted workflows, conversations, and project context with team members. When you implement session sharing, your users can:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Collaborate on complex problem-solving with shared context and history"}),"\n",(0,r.jsx)(n.li,{children:"Share AI-guided debugging sessions with team members"}),"\n",(0,r.jsx)(n.li,{children:"Create persistent knowledge bases from successful problem-solving sessions"}),"\n",(0,r.jsx)(n.li,{children:"Onboard new team members by sharing exemplar workflows"}),"\n",(0,r.jsx)(n.li,{children:"Get help from colleagues who can join their session and see the full context"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Setting up session sharing for your organization requires implementing a service that manages these shared sessions using the ",(0,r.jsx)(n.a,{href:"/goose/pr-preview/pr-2364/docs/guides/Session-Sharing/SSE-api-reference",children:"Goose API"}),". This guide will walk you through creating a secure, scalable sharing service that lets your users collaborate effectively while maintaining control over your organization's data."]}),"\n",(0,r.jsx)(n.h2,{id:"set-up-a-server-to-enable-session-sharing",children:"Set up a server to enable session sharing"}),"\n",(0,r.jsx)(n.p,{children:"Your session sharing service implements two main endpoints and handles proper authentication and security:"}),"\n",(0,r.jsx)(n.h3,{id:"api-requirements",children:"API Requirements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"POST /sessions/share\nGET /sessions/share/:shareToken\n"})}),"\n",(0,r.jsx)(n.h3,{id:"api-interface",children:"API Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// POST /sessions/share Request Body\ninterface CreateSessionRequest {\n  working_dir: string;\n  messages: Message[];\n  description: string;\n  base_url: string;\n  total_tokens: number | null;\n}\n\n// POST /sessions/share Response\ninterface CreateSessionResponse {\n  share_token: string;\n}\n\n// GET /sessions/share/:shareToken Response\ninterface SharedSessionDetails {\n  share_token: string;\n  created_at: number;\n  base_url: string;\n  description: string;\n  working_dir: string;\n  messages: Message[];\n  message_count: number;\n  total_tokens: number | null;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"security-requirements",children:"Security Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The server must verify a secret key for authentication"}),"\n",(0,r.jsx)(n.li,{children:"The server should be configured with HTTPS"}),"\n",(0,r.jsx)(n.li,{children:"CORS must be properly configured to allow requests from Goose desktop clients"}),"\n",(0,r.jsx)(n.li,{children:"Consider implementing rate limiting for shared session creation"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"how-session-sharing-works",children:"How Session Sharing Works"}),"\n",(0,r.jsx)(n.p,{children:"When a user shares a session:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Their Goose Desktop client sends the session data to your sharing service"}),"\n",(0,r.jsx)(n.li,{children:"Your service generates a unique token and stores the session"}),"\n",(0,r.jsx)(n.li,{children:"The user gets a shareable link they can send to colleagues"}),"\n",(0,r.jsx)(n.li,{children:"Other users can open the link to join the session with full context"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'User A                     Server                      User B\n  |                          |                           |\n  |-- Create share ---------\x3e|                           |\n  |<-- Token & URL ----------|                           |\n  |                          |                           |\n  |-- Share URL with User B->|                           |\n  |                          |                           |\n  |                          |<-- Open URL in browser ---|\n  |                          |--- Serve HTML page ------\x3e|\n  |                          |                           |\n  |                          |   [Click "Open in Goose"] |\n  |                          |                           |\n  |                          |<-- Request session -------|\n  |                          |--- Return session -------\x3e|\n'})}),"\n",(0,r.jsx)(n.h2,{id:"example-server-implementation",children:"Example Server Implementation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const express = require('express');\nconst app = express();\nconst cors = require('cors');\nconst crypto = require('crypto');\n\n\napp.use(express.json());\napp.use(cors({\n  origin: true,\n  credentials: true\n}));\n\n// In-memory storage (replace with database in production)\nconst sessions = new Map();\n\n// Middleware to verify secret key\nconst verifySecretKey = (req, res, next) => {\n  const secretKey = req.headers['x-secret-key'];\n  if (!secretKey || secretKey !== process.env.SECRET_KEY) {\n    return res.status(401).json({ error: 'Unauthorized' });\n  }\n  next();\n};\n\n// Create shared session\napp.post('/sessions/share', verifySecretKey, (req, res) => {\n  const {\n    working_dir,\n    messages,\n    description,\n    base_url,\n    total_tokens\n  } = req.body;\n\n  const shareToken = crypto.randomUUID();\n  const session = {\n    share_token: shareToken,\n    created_at: Date.now(),\n    base_url,\n    description,\n    working_dir,\n    messages,\n    message_count: messages.length,\n    total_tokens\n  };\n\n  sessions.set(shareToken, session);\n  res.json({ share_token: shareToken });\n});\n\n// Get shared session\napp.get('/sessions/share/:shareToken', verifySecretKey, (req, res) => {\n  const session = sessions.get(req.params.shareToken);\n  if (!session) {\n    return res.status(404).json({ error: 'Session not found' });\n  }\n  res.json(session);\n});\n\napp.listen(3000, () => {\n  console.log('Goose sharing server running on port 3000');\n});\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-web-ui-implementation",children:"Example web UI implementation"}),"\n",(0,r.jsx)(n.p,{children:"The process involves creating a web interface that handles shared session links:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"URL Format"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://your-sharing-service.com/share/{share_token}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Web Route Implementation"})}),"\n",(0,r.jsx)(n.p,{children:"Create a web page that lets a user open Goose with the shared session."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"website goose built",src:s(4810).A+"",width:"1150",height:"363"})}),"\n",(0,r.jsx)(n.p,{children:'The page only attempts to auto-open if the user arrived directly at the URL (no referrer). This prevents repeated open attempts if they return to the page. It shows a clear "Opening..." message when attempting to open\nand falls back to manual button if auto-open fails.  Installation instructions are shown if the app doesn\'t open.'}),"\n",(0,r.jsx)(n.p,{children:"If user arrives directly at the URL:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatically attempt to open Goose Desktop"}),"\n",(0,r.jsx)(n.li,{children:'Show "Opening..." message'}),"\n",(0,r.jsx)(n.li,{children:"After 3 seconds, show manual instructions if still on the page"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"If user arrives from a referring page:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Shows the "Open in Goose Desktop" button'}),"\n",(0,r.jsx)(n.li,{children:"Waits for user to click"}),"\n",(0,r.jsx)(n.li,{children:"Then follows the same sequence as auto-open"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"In both cases:"}),"\n",(0,r.jsx)(n.p,{children:"If Goose Desktop opens successfully, the user leaves this page\nIf it fails to open, they see the installation instructions"}),"\n",(0,r.jsx)(n.h3,{id:"web-page-code-example",children:"Web page code example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'app.get(\'/share/:token\', (req, res) => {\n  const token = req.params.token;\n  const baseUrl = `${req.protocol}://${req.get(\'host\')}`;\n  const gooseUrl = `goose://share/${token}?base_url=${encodeURIComponent(baseUrl)}`;\n  \n  // Send HTML page\n  res.send(`\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>Goose Shared Session</title>\n      <meta name="viewport" content="width=device-width, initial-scale=1">\n      <style>\n        body {\n          font-family: system-ui, -apple-system, sans-serif;\n          max-width: 800px;\n          margin: 0 auto;\n          padding: 20px;\n          line-height: 1.6;\n        }\n        .button {\n          display: inline-block;\n          background: #4F46E5;\n          color: white;\n          padding: 12px 24px;\n          border-radius: 6px;\n          text-decoration: none;\n          margin: 10px 0;\n        }\n        .info {\n          background: #F3F4F6;\n          padding: 16px;\n          border-radius: 8px;\n          margin: 20px 0;\n        }\n        #openingApp {\n          display: none;\n        }\n        #openButton {\n          display: block;\n        }\n        #manualInstructions {\n          display: none;\n        }\n      </style>\n    </head>\n    <body>\n      <h1>Goose Shared Session</h1>\n      \n      <div class="info">\n        <p>Someone has shared a Goose session with you!</p>\n      </div>\n\n      <div id="openingApp" class="info">\n        <p>Opening Goose Desktop...</p>\n        <p>If nothing happens, click the button below:</p>\n      </div>\n\n      <div id="openButton">\n        <a href="${gooseUrl}" class="button" id="openGooseBtn">\n          Open in Goose Desktop\n        </a>\n      </div>\n\n      <div id="manualInstructions" class="info">\n        <h3>Don\'t have Goose Desktop?</h3>\n        <p>To view this shared session:</p>\n        <ol>\n          <li>Install Goose Desktop from <a href="https://block.github.io/goose/docs/getting-started/installation">Install Goose</a></li>\n          <li>Configure session sharing in Settings:</li>\n          <ul>\n            <li>Enable session sharing</li>\n            <li>Set the base URL to: <code>${baseUrl}</code></li>\n          </ul>\n          <li>Return to this page and click the "Open in Goose Desktop" button</li>\n        </ol>\n      </div>\n\n      <script>\n        let hasAttemptedOpen = false;\n        const openingMessage = document.getElementById(\'openingApp\');\n        const manualInstructions = document.getElementById(\'manualInstructions\');\n        const openButton = document.getElementById(\'openButton\');\n\n        // Function to attempt opening Goose\n        function openGooseDesktop() {\n          if (!hasAttemptedOpen) {\n            hasAttemptedOpen = true;\n            openingMessage.style.display = \'block\';\n            \n            // Try to open Goose Desktop\n            window.location.href = \'${gooseUrl}\';\n            \n            // After a delay, show manual instructions if we\'re still here\n            setTimeout(() => {\n              openingMessage.style.display = \'none\';\n              manualInstructions.style.display = \'block\';\n            }, 3000);\n          }\n        }\n\n        // Listen for button click\n        document.getElementById(\'openGooseBtn\').addEventListener(\'click\', (e) => {\n          e.preventDefault();\n          openGooseDesktop();\n        });\n\n        // Try to open automatically only if this looks like a direct navigation\n        if (!document.referrer) {\n          openGooseDesktop();\n        }\n      <\/script>\n    </body>\n    </html>\n  `);\n});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"additional-considerations",children:"Additional Considerations"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Security"})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use unguessable share tokens (UUIDs recommended)"}),"\n",(0,r.jsx)(n.li,{children:"Implement token expiration"}),"\n",(0,r.jsx)(n.li,{children:"Validate base URL matches between clients"}),"\n",(0,r.jsx)(n.li,{children:"Add rate limiting"}),"\n",(0,r.jsx)(n.li,{children:"Use HTTPS"}),"\n",(0,r.jsx)(n.li,{children:"Add appropriate security headers"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Error Handling"})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Invalid or expired tokens"}),"\n",(0,r.jsx)(n.li,{children:"Base URL mismatches"}),"\n",(0,r.jsx)(n.li,{children:"Sharing not enabled"}),"\n",(0,r.jsx)(n.li,{children:"Network errors"}),"\n"]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Client Configuration"})}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Both users need session sharing enabled"}),"\n",(0,r.jsx)(n.li,{children:"Both users must use the same base URL"}),"\n",(0,r.jsxs)(n.li,{children:["Base URL can be set via:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Environment variable (",(0,r.jsx)(n.code,{children:"GOOSE_BASE_URL_SHARE"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"User configuration in settings"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},4810:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/example-goose-share-session-page-7b099d488edf64c6256e43cf988260b8.png"},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(96540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);