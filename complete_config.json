{
  "summary": {
    "total_files_analyzed": 283,
    "total_config_items": 631,
    "categories": {
      "Other": 74,
      "Environment Variables": 390,
      "Config File Parameters": 99,
      "Secret Storage": 30,
      "CLI Flags": 38
    }
  },
  "results": [
    {
      "key": "GOOSE_CACHE_DIR",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/tests/pricing_integration_test.rs",
      "line_number": 9,
      "context": "// Use a unique cache directory for this test to avoid conflicts\n    let temp_dir = TempDir::new().unwrap();\n    std::env::set_var(\"GOOSE_CACHE_DIR\", temp_dir.path());\n\n    // Initialize the cache",
      "description": null
    },
    {
      "key": "GOOSE_CACHE_DIR",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/tests/pricing_integration_test.rs",
      "line_number": 101,
      "context": "// Clean up\n    std::env::remove_var(\"GOOSE_CACHE_DIR\");\n}",
      "description": null
    },
    {
      "key": "GOOSE_CACHE_DIR",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/pricing_integration_test.rs",
      "line_number": 9,
      "context": "// Use a unique cache directory for this test to avoid conflicts\n    let temp_dir = TempDir::new().unwrap();\n    std::env::set_var(\"GOOSE_CACHE_DIR\", temp_dir.path());\n\n    // Initialize the cache",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 38,
      "context": "match self {\n            ProviderType::Azure => &[\n                \"AZURE_OPENAI_API_KEY\",\n                \"AZURE_OPENAI_ENDPOINT\",\n                \"AZURE_OPENAI_DEPLOYMENT_NAME\",",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_ENDPOINT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 39,
      "context": "ProviderType::Azure => &[\n                \"AZURE_OPENAI_API_KEY\",\n                \"AZURE_OPENAI_ENDPOINT\",\n                \"AZURE_OPENAI_DEPLOYMENT_NAME\",\n            ],",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_DEPLOYMENT_NAME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 40,
      "context": "\"AZURE_OPENAI_API_KEY\",\n                \"AZURE_OPENAI_ENDPOINT\",\n                \"AZURE_OPENAI_DEPLOYMENT_NAME\",\n            ],\n            ProviderType::OpenAi => &[\"OPENAI_API_KEY\"],",
      "description": null
    },
    {
      "key": "OPENAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 42,
      "context": "\"AZURE_OPENAI_DEPLOYMENT_NAME\",\n            ],\n            ProviderType::OpenAi => &[\"OPENAI_API_KEY\"],\n            ProviderType::Anthropic => &[\"ANTHROPIC_API_KEY\"],\n            ProviderType::Bedrock => &[\"AWS_PROFILE\"],",
      "description": null
    },
    {
      "key": "ANTHROPIC_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 43,
      "context": "],\n            ProviderType::OpenAi => &[\"OPENAI_API_KEY\"],\n            ProviderType::Anthropic => &[\"ANTHROPIC_API_KEY\"],\n            ProviderType::Bedrock => &[\"AWS_PROFILE\"],\n            ProviderType::Databricks => &[\"DATABRICKS_HOST\"],",
      "description": null
    },
    {
      "key": "AWS_PROFILE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 44,
      "context": "ProviderType::OpenAi => &[\"OPENAI_API_KEY\"],\n            ProviderType::Anthropic => &[\"ANTHROPIC_API_KEY\"],\n            ProviderType::Bedrock => &[\"AWS_PROFILE\"],\n            ProviderType::Databricks => &[\"DATABRICKS_HOST\"],\n            ProviderType::Google => &[\"GOOGLE_API_KEY\"],",
      "description": null
    },
    {
      "key": "DATABRICKS_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 45,
      "context": "ProviderType::Anthropic => &[\"ANTHROPIC_API_KEY\"],\n            ProviderType::Bedrock => &[\"AWS_PROFILE\"],\n            ProviderType::Databricks => &[\"DATABRICKS_HOST\"],\n            ProviderType::Google => &[\"GOOGLE_API_KEY\"],\n            ProviderType::Groq => &[\"GROQ_API_KEY\"],",
      "description": null
    },
    {
      "key": "GOOGLE_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 46,
      "context": "ProviderType::Bedrock => &[\"AWS_PROFILE\"],\n            ProviderType::Databricks => &[\"DATABRICKS_HOST\"],\n            ProviderType::Google => &[\"GOOGLE_API_KEY\"],\n            ProviderType::Groq => &[\"GROQ_API_KEY\"],\n            ProviderType::Ollama => &[],",
      "description": null
    },
    {
      "key": "GROQ_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 47,
      "context": "ProviderType::Databricks => &[\"DATABRICKS_HOST\"],\n            ProviderType::Google => &[\"GOOGLE_API_KEY\"],\n            ProviderType::Groq => &[\"GROQ_API_KEY\"],\n            ProviderType::Ollama => &[],\n            ProviderType::OpenRouter => &[\"OPENROUTER_API_KEY\"],",
      "description": null
    },
    {
      "key": "OPENROUTER_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 49,
      "context": "ProviderType::Groq => &[\"GROQ_API_KEY\"],\n            ProviderType::Ollama => &[],\n            ProviderType::OpenRouter => &[\"OPENROUTER_API_KEY\"],\n            ProviderType::GcpVertexAI => &[\"GCP_PROJECT_ID\", \"GCP_LOCATION\"],\n            ProviderType::Xai => &[\"XAI_API_KEY\"],",
      "description": null
    },
    {
      "key": "GCP_PROJECT_ID",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 50,
      "context": "ProviderType::Ollama => &[],\n            ProviderType::OpenRouter => &[\"OPENROUTER_API_KEY\"],\n            ProviderType::GcpVertexAI => &[\"GCP_PROJECT_ID\", \"GCP_LOCATION\"],\n            ProviderType::Xai => &[\"XAI_API_KEY\"],\n        }",
      "description": null
    },
    {
      "key": "GCP_LOCATION",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 50,
      "context": "ProviderType::Ollama => &[],\n            ProviderType::OpenRouter => &[\"OPENROUTER_API_KEY\"],\n            ProviderType::GcpVertexAI => &[\"GCP_PROJECT_ID\", \"GCP_LOCATION\"],\n            ProviderType::Xai => &[\"XAI_API_KEY\"],\n        }",
      "description": null
    },
    {
      "key": "XAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/agent.rs",
      "line_number": 51,
      "context": "ProviderType::OpenRouter => &[\"OPENROUTER_API_KEY\"],\n            ProviderType::GcpVertexAI => &[\"GCP_PROJECT_ID\", \"GCP_LOCATION\"],\n            ProviderType::Xai => &[\"XAI_API_KEY\"],\n        }\n    }",
      "description": null
    },
    {
      "key": "LITELLM_HOST",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 602,
      "context": "#[tokio::test]\nasync fn test_litellm_provider() -> Result<()> {\n    if std::env::var(\"LITELLM_HOST\").is_err() {\n        println!(\"LITELLM_HOST not set, skipping test\");\n        TEST_REPORT.record_skip(\"LiteLLM\");",
      "description": null
    },
    {
      "key": "OPENAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 454,
      "context": "test_provider(\n        \"OpenAI\",\n        &[\"OPENAI_API_KEY\"],\n        None,\n        openai::OpenAiProvider::default,",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 466,
      "context": "\"Azure\",\n        &[\n            \"AZURE_OPENAI_API_KEY\",\n            \"AZURE_OPENAI_ENDPOINT\",\n            \"AZURE_OPENAI_DEPLOYMENT_NAME\",",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_ENDPOINT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 467,
      "context": "&[\n            \"AZURE_OPENAI_API_KEY\",\n            \"AZURE_OPENAI_ENDPOINT\",\n            \"AZURE_OPENAI_DEPLOYMENT_NAME\",\n        ],",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_DEPLOYMENT_NAME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 468,
      "context": "\"AZURE_OPENAI_API_KEY\",\n            \"AZURE_OPENAI_ENDPOINT\",\n            \"AZURE_OPENAI_DEPLOYMENT_NAME\",\n        ],\n        None,",
      "description": null
    },
    {
      "key": "AWS_ACCESS_KEY_ID",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 480,
      "context": "test_provider(\n        \"Bedrock\",\n        &[\"AWS_ACCESS_KEY_ID\", \"AWS_SECRET_ACCESS_KEY\"],\n        None,\n        bedrock::BedrockProvider::default,",
      "description": null
    },
    {
      "key": "AWS_SECRET_ACCESS_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 480,
      "context": "test_provider(\n        \"Bedrock\",\n        &[\"AWS_ACCESS_KEY_ID\", \"AWS_SECRET_ACCESS_KEY\"],\n        None,\n        bedrock::BedrockProvider::default,",
      "description": null
    },
    {
      "key": "AWS_PROFILE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 497,
      "context": "test_provider(\n        \"Bedrock AWS Profile Credentials\",\n        &[\"AWS_PROFILE\"],\n        Some(env_mods),\n        bedrock::BedrockProvider::default,",
      "description": null
    },
    {
      "key": "DATABRICKS_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 508,
      "context": "test_provider(\n        \"Databricks\",\n        &[\"DATABRICKS_HOST\", \"DATABRICKS_TOKEN\"],\n        None,\n        databricks::DatabricksProvider::default,",
      "description": null
    },
    {
      "key": "DATABRICKS_TOKEN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 508,
      "context": "test_provider(\n        \"Databricks\",\n        &[\"DATABRICKS_HOST\", \"DATABRICKS_TOKEN\"],\n        None,\n        databricks::DatabricksProvider::default,",
      "description": null
    },
    {
      "key": "OLLAMA_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 533,
      "context": "test_provider(\n        \"Ollama\",\n        &[\"OLLAMA_HOST\"],\n        None,\n        ollama::OllamaProvider::default,",
      "description": null
    },
    {
      "key": "GROQ_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 542,
      "context": "#[tokio::test]\nasync fn test_groq_provider() -> Result<()> {\n    test_provider(\"Groq\", &[\"GROQ_API_KEY\"], None, groq::GroqProvider::default).await\n}",
      "description": null
    },
    {
      "key": "ANTHROPIC_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 549,
      "context": "test_provider(\n        \"Anthropic\",\n        &[\"ANTHROPIC_API_KEY\"],\n        None,\n        anthropic::AnthropicProvider::default,",
      "description": null
    },
    {
      "key": "OPENROUTER_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 560,
      "context": "test_provider(\n        \"OpenRouter\",\n        &[\"OPENROUTER_API_KEY\"],\n        None,\n        openrouter::OpenRouterProvider::default,",
      "description": null
    },
    {
      "key": "GOOGLE_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 571,
      "context": "test_provider(\n        \"Google\",\n        &[\"GOOGLE_API_KEY\"],\n        None,\n        google::GoogleProvider::default,",
      "description": null
    },
    {
      "key": "SNOWFLAKE_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 582,
      "context": "test_provider(\n        \"Snowflake\",\n        &[\"SNOWFLAKE_HOST\", \"SNOWFLAKE_TOKEN\"],\n        None,\n        snowflake::SnowflakeProvider::default,",
      "description": null
    },
    {
      "key": "SNOWFLAKE_TOKEN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 582,
      "context": "test_provider(\n        \"Snowflake\",\n        &[\"SNOWFLAKE_HOST\", \"SNOWFLAKE_TOKEN\"],\n        None,\n        snowflake::SnowflakeProvider::default,",
      "description": null
    },
    {
      "key": "SAGEMAKER_ENDPOINT_NAME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 593,
      "context": "test_provider(\n        \"SageMakerTgi\",\n        &[\"SAGEMAKER_ENDPOINT_NAME\"],\n        None,\n        goose::providers::sagemaker_tgi::SageMakerTgiProvider::default,",
      "description": null
    },
    {
      "key": "LITELLM_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 602,
      "context": "#[tokio::test]\nasync fn test_litellm_provider() -> Result<()> {\n    if std::env::var(\"LITELLM_HOST\").is_err() {\n        println!(\"LITELLM_HOST not set, skipping test\");\n        TEST_REPORT.record_skip(\"LiteLLM\");",
      "description": null
    },
    {
      "key": "LITELLM_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 610,
      "context": "let env_mods = HashMap::from_iter([\n        (\"LITELLM_HOST\", Some(\"http://localhost:4000\".to_string())),\n        (\"LITELLM_API_KEY\", Some(\"\".to_string())),\n    ]);",
      "description": null
    },
    {
      "key": "XAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/tests/providers.rs",
      "line_number": 624,
      "context": "#[tokio::test]\nasync fn test_xai_provider() -> Result<()> {\n    test_provider(\"Xai\", &[\"XAI_API_KEY\"], None, xai::XaiProvider::default).await\n}",
      "description": null
    },
    {
      "key": "DATABRICKS_TOKEN",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/examples/databricks_oauth.rs",
      "line_number": 16,
      "context": "// Clear any token to force OAuth\n    std::env::remove_var(\"DATABRICKS_TOKEN\");\n\n    // Create the provider",
      "description": null
    },
    {
      "key": "DATABRICKS_TOKEN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/examples/databricks_oauth.rs",
      "line_number": 16,
      "context": "// Clear any token to force OAuth\n    std::env::remove_var(\"DATABRICKS_TOKEN\");\n\n    // Create the provider",
      "description": null
    },
    {
      "key": "PORT",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/temporal_scheduler.rs",
      "line_number": 127,
      "context": "// Check PORT environment variable first\n        if let Ok(port_str) = std::env::var(\"PORT\") {\n            if let Ok(port) = port_str.parse::<u16>() {\n                if Self::is_temporal_service_running(http_client, port).await {",
      "description": null
    },
    {
      "key": "GOOSE_TEMPORAL_BIN",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/temporal_scheduler.rs",
      "line_number": 458,
      "context": "// Check environment variable override\n        if let Ok(binary_path) = std::env::var(\"GOOSE_TEMPORAL_BIN\") {\n            if std::path::Path::new(&binary_path).exists() {\n                tracing::info!(",
      "description": null
    },
    {
      "key": "GOOSE_TEMPORAL_BIN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/temporal_scheduler.rs",
      "line_number": 458,
      "context": "// Check environment variable override\n        if let Ok(binary_path) = std::env::var(\"GOOSE_TEMPORAL_BIN\") {\n            if std::path::Path::new(&binary_path).exists() {\n                tracing::info!(",
      "description": null
    },
    {
      "key": "GOOSE_SCHEDULER_TYPE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/scheduler_factory.rs",
      "line_number": 22,
      "context": "// Check scheduler type preference from GOOSE_SCHEDULER_TYPE\n        match config.get_param::<String>(\"GOOSE_SCHEDULER_TYPE\") {\n            Ok(scheduler_type) => {\n                tracing::debug!(",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/scheduler.rs",
      "line_number": 1125,
      "context": "} else {\n        let global_config = Config::global();\n        let provider_name: String = match global_config.get_param(\"GOOSE_PROVIDER\") {\n            Ok(name) => name,\n            Err(_) => return Err(JobExecutionError {",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/scheduler.rs",
      "line_number": 1135,
      "context": "};\n        let model_name: String =\n            match global_config.get_param(\"GOOSE_MODEL\") {\n                Ok(name) => name,\n                Err(_) => return Err(JobExecutionError {",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/scheduler.rs",
      "line_number": 1427,
      "context": "async fn test_scheduled_session_has_schedule_id() -> Result<(), Box<dyn std::error::Error>> {\n        // Set environment variables for the test\n        env::set_var(\"GOOSE_PROVIDER\", \"test_provider\");\n        env::set_var(\"GOOSE_MODEL\", \"test_model\");",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/scheduler.rs",
      "line_number": 1428,
      "context": "// Set environment variables for the test\n        env::set_var(\"GOOSE_PROVIDER\", \"test_provider\");\n        env::set_var(\"GOOSE_MODEL\", \"test_model\");\n\n        let temp_dir = tempdir()?;",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/scheduler.rs",
      "line_number": 1521,
      "context": "// Clean up environment variables\n        env::remove_var(\"GOOSE_PROVIDER\");\n        env::remove_var(\"GOOSE_MODEL\");",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/scheduler.rs",
      "line_number": 1522,
      "context": "// Clean up environment variables\n        env::remove_var(\"GOOSE_PROVIDER\");\n        env::remove_var(\"GOOSE_MODEL\");\n\n        Ok(())",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/scheduler.rs",
      "line_number": 1125,
      "context": "} else {\n        let global_config = Config::global();\n        let provider_name: String = match global_config.get_param(\"GOOSE_PROVIDER\") {\n            Ok(name) => name,\n            Err(_) => return Err(JobExecutionError {",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/scheduler.rs",
      "line_number": 1135,
      "context": "};\n        let model_name: String =\n            match global_config.get_param(\"GOOSE_MODEL\") {\n                Ok(name) => name,\n                Err(_) => return Err(JobExecutionError {",
      "description": null
    },
    {
      "key": "GOOSE_CONTEXT_LIMIT",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/model.rs",
      "line_number": 115,
      "context": "}\n        }\n        if let Ok(val) = std::env::var(\"GOOSE_CONTEXT_LIMIT\") {\n            return Self::validate_context_limit(&val, \"GOOSE_CONTEXT_LIMIT\").map(Some);\n        }",
      "description": null
    },
    {
      "key": "GOOSE_TEMPERATURE",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/model.rs",
      "line_number": 141,
      "context": "fn parse_temperature() -> Result<Option<f32>, ConfigError> {\n        if let Ok(val) = std::env::var(\"GOOSE_TEMPERATURE\") {\n            let temp = val.parse::<f32>().map_err(|_| {\n                ConfigError::InvalidValue(",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/model.rs",
      "line_number": 162,
      "context": "fn parse_toolshim() -> Result<bool, ConfigError> {\n        if let Ok(val) = std::env::var(\"GOOSE_TOOLSHIM\") {\n            match val.to_lowercase().as_str() {\n                \"1\" | \"true\" | \"yes\" | \"on\" => Ok(true),",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM_OLLAMA_MODEL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/model.rs",
      "line_number": 178,
      "context": "fn parse_toolshim_model() -> Result<Option<String>, ConfigError> {\n        match std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\") {\n            Ok(val) if val.trim().is_empty() => Err(ConfigError::InvalidValue(\n                \"GOOSE_TOOLSHIM_OLLAMA_MODEL\".to_string(),",
      "description": null
    },
    {
      "key": "GOOSE_CONTEXT_LIMIT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/model.rs",
      "line_number": 115,
      "context": "}\n        }\n        if let Ok(val) = std::env::var(\"GOOSE_CONTEXT_LIMIT\") {\n            return Self::validate_context_limit(&val, \"GOOSE_CONTEXT_LIMIT\").map(Some);\n        }",
      "description": null
    },
    {
      "key": "GOOSE_TEMPERATURE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/model.rs",
      "line_number": 141,
      "context": "fn parse_temperature() -> Result<Option<f32>, ConfigError> {\n        if let Ok(val) = std::env::var(\"GOOSE_TEMPERATURE\") {\n            let temp = val.parse::<f32>().map_err(|_| {\n                ConfigError::InvalidValue(",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/model.rs",
      "line_number": 162,
      "context": "fn parse_toolshim() -> Result<bool, ConfigError> {\n        if let Ok(val) = std::env::var(\"GOOSE_TOOLSHIM\") {\n            match val.to_lowercase().as_str() {\n                \"1\" | \"true\" | \"yes\" | \"on\" => Ok(true),",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM_OLLAMA_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/model.rs",
      "line_number": 178,
      "context": "fn parse_toolshim_model() -> Result<Option<String>, ConfigError> {\n        match std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\") {\n            Ok(val) if val.trim().is_empty() => Err(ConfigError::InvalidValue(\n                \"GOOSE_TOOLSHIM_OLLAMA_MODEL\".to_string(),",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_ENDPOINT",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 35,
      "context": "impl OtlpConfig {\n    pub fn from_env() -> Option<Self> {\n        if let Ok(endpoint) = env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\") {\n            let mut config = Self {\n                endpoint,",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_TIMEOUT",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 41,
      "context": "};\n\n            if let Ok(timeout_str) = env::var(\"OTEL_EXPORTER_OTLP_TIMEOUT\") {\n                if let Ok(timeout_ms) = timeout_str.parse::<u64>() {\n                    config.timeout = Duration::from_millis(timeout_ms);",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_ENDPOINT",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 249,
      "context": "#[test]\n    fn test_otlp_config_from_env() {\n        let original_endpoint = env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\").ok();\n        let original_timeout = env::var(\"OTEL_EXPORTER_OTLP_TIMEOUT\").ok();",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_TIMEOUT",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 250,
      "context": "fn test_otlp_config_from_env() {\n        let original_endpoint = env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\").ok();\n        let original_timeout = env::var(\"OTEL_EXPORTER_OTLP_TIMEOUT\").ok();\n\n        env::remove_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\");",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_ENDPOINT",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 255,
      "context": "assert!(OtlpConfig::from_env().is_none());\n\n        env::set_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\", \"http://test:4317\");\n        env::set_var(\"OTEL_EXPORTER_OTLP_TIMEOUT\", \"5000\");",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_TIMEOUT",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 256,
      "context": "env::set_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\", \"http://test:4317\");\n        env::set_var(\"OTEL_EXPORTER_OTLP_TIMEOUT\", \"5000\");\n\n        let config = OtlpConfig::from_env().unwrap();",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_ENDPOINT",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 252,
      "context": "let original_timeout = env::var(\"OTEL_EXPORTER_OTLP_TIMEOUT\").ok();\n\n        env::remove_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\");\n        assert!(OtlpConfig::from_env().is_none());",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_TIMEOUT",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 268,
      "context": "match original_timeout {\n            Some(val) => env::set_var(\"OTEL_EXPORTER_OTLP_TIMEOUT\", val),\n            None => env::remove_var(\"OTEL_EXPORTER_OTLP_TIMEOUT\"),\n        }\n    }",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_ENDPOINT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 35,
      "context": "impl OtlpConfig {\n    pub fn from_env() -> Option<Self> {\n        if let Ok(endpoint) = env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\") {\n            let mut config = Self {\n                endpoint,",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_TIMEOUT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 41,
      "context": "};\n\n            if let Ok(timeout_str) = env::var(\"OTEL_EXPORTER_OTLP_TIMEOUT\") {\n                if let Ok(timeout_ms) = timeout_str.parse::<u64>() {\n                    config.timeout = Duration::from_millis(timeout_ms);",
      "description": null
    },
    {
      "key": "CARGO_PKG_VERSION",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/tracing/otlp_layer.rs",
      "line_number": 57,
      "context": "let resource = Resource::new(vec![\n        KeyValue::new(\"service.name\", \"goose\"),\n        KeyValue::new(\"service.version\", env!(\"CARGO_PKG_VERSION\")),\n        KeyValue::new(\"service.namespace\", \"goose\"),\n    ]);",
      "description": null
    },
    {
      "key": "LANGFUSE_PUBLIC_KEY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 156,
      "context": "pub fn create_langfuse_observer() -> Option<ObservationLayer> {\n    let public_key = env::var(\"LANGFUSE_PUBLIC_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_PUBLIC_KEY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 157,
      "context": "pub fn create_langfuse_observer() -> Option<ObservationLayer> {\n    let public_key = env::var(\"LANGFUSE_PUBLIC_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found",
      "description": null
    },
    {
      "key": "LANGFUSE_SECRET_KEY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 160,
      "context": ".unwrap_or_default(); // Use empty string if not found\n\n    let secret_key = env::var(\"LANGFUSE_SECRET_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_SECRET_KEY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 161,
      "context": "let secret_key = env::var(\"LANGFUSE_SECRET_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found",
      "description": null
    },
    {
      "key": "LANGFUSE_URL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 169,
      "context": "}\n\n    let base_url = env::var(\"LANGFUSE_URL\").unwrap_or_else(|_| DEFAULT_LANGFUSE_URL.to_string());\n\n    let batch_manager = Arc::new(Mutex::new(LangfuseBatchManager::new(",
      "description": null
    },
    {
      "key": "LANGFUSE_URL",
      "usage_type": "env_var_unwrap",
      "method": "env_var_unwrap",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 169,
      "context": "}\n\n    let base_url = env::var(\"LANGFUSE_URL\").unwrap_or_else(|_| DEFAULT_LANGFUSE_URL.to_string());\n\n    let batch_manager = Arc::new(Mutex::new(LangfuseBatchManager::new(",
      "description": null
    },
    {
      "key": "LANGFUSE_PUBLIC_KEY",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 413,
      "context": "// Test 2: Only public key set (regular)\n        env::set_var(\"LANGFUSE_PUBLIC_KEY\", \"test-public-key\");\n        let observer = create_langfuse_observer();\n        assert!(",
      "description": null
    },
    {
      "key": "LANGFUSE_SECRET_KEY",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 422,
      "context": "// Test 3: Only secret key set (regular)\n        env::set_var(\"LANGFUSE_SECRET_KEY\", \"test-secret-key\");\n        let observer = create_langfuse_observer();\n        assert!(",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_PUBLIC_KEY",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 431,
      "context": "// Test 4: Only public key set (init project)\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test-public-key\");\n        let observer = create_langfuse_observer();\n        assert!(",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_SECRET_KEY",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 440,
      "context": "// Test 5: Only secret key set (init project)\n        env::set_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\", \"test-secret-key\");\n        let observer = create_langfuse_observer();\n        assert!(",
      "description": null
    },
    {
      "key": "LANGFUSE_URL",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 451,
      "context": "env::set_var(\"LANGFUSE_PUBLIC_KEY\", \"test-public-key\");\n        env::set_var(\"LANGFUSE_SECRET_KEY\", \"test-secret-key\");\n        env::set_var(\"LANGFUSE_URL\", fixture.mock_server_uri());\n        let observer = create_langfuse_observer();\n        assert!(",
      "description": null
    },
    {
      "key": "LANGFUSE_PUBLIC_KEY",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 419,
      "context": "\"Observer should be None with only public key\"\n        );\n        env::remove_var(\"LANGFUSE_PUBLIC_KEY\");\n\n        // Test 3: Only secret key set (regular)",
      "description": null
    },
    {
      "key": "LANGFUSE_SECRET_KEY",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 428,
      "context": "\"Observer should be None with only secret key\"\n        );\n        env::remove_var(\"LANGFUSE_SECRET_KEY\");\n\n        // Test 4: Only public key set (init project)",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_PUBLIC_KEY",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 437,
      "context": "\"Observer should be None with only init project public key\"\n        );\n        env::remove_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\");\n\n        // Test 5: Only secret key set (init project)",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_SECRET_KEY",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 446,
      "context": "\"Observer should be None with only init project secret key\"\n        );\n        env::remove_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\");\n\n        // Test 6: Both regular keys set (should succeed)",
      "description": null
    },
    {
      "key": "LANGFUSE_PUBLIC_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 156,
      "context": "pub fn create_langfuse_observer() -> Option<ObservationLayer> {\n    let public_key = env::var(\"LANGFUSE_PUBLIC_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_PUBLIC_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 157,
      "context": "pub fn create_langfuse_observer() -> Option<ObservationLayer> {\n    let public_key = env::var(\"LANGFUSE_PUBLIC_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found",
      "description": null
    },
    {
      "key": "LANGFUSE_SECRET_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 160,
      "context": ".unwrap_or_default(); // Use empty string if not found\n\n    let secret_key = env::var(\"LANGFUSE_SECRET_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_SECRET_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 161,
      "context": "let secret_key = env::var(\"LANGFUSE_SECRET_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found",
      "description": null
    },
    {
      "key": "LANGFUSE_URL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/tracing/langfuse_layer.rs",
      "line_number": 169,
      "context": "}\n\n    let base_url = env::var(\"LANGFUSE_URL\").unwrap_or_else(|_| DEFAULT_LANGFUSE_URL.to_string());\n\n    let batch_manager = Arc::new(Mutex::new(LangfuseBatchManager::new(",
      "description": null
    },
    {
      "key": "OPENAI_API_KEY",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 88,
      "context": "/// // Get a string value\n/// let config = Config::global();\n/// let api_key: String = config.get_param(\"OPENAI_API_KEY\").unwrap();\n///\n/// // Get a complex type",
      "description": null
    },
    {
      "key": "server",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 97,
      "context": "/// }\n///\n/// let server_config: ServerConfig = config.get_param(\"server\").unwrap();\n/// ```\n///",
      "description": null
    },
    {
      "key": "test_key",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 810,
      "context": "// Test simple string retrieval\n        let value: String = config.get_param(\"test_key\")?;\n        assert_eq!(value, \"test_value\");",
      "description": null
    },
    {
      "key": "complex_key",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 841,
      "context": ")?;\n\n        let value: TestStruct = config.get_param(\"complex_key\")?;\n        assert_eq!(value.field1, \"hello\");\n        assert_eq!(value.field2, 42);",
      "description": null
    },
    {
      "key": "nonexistent_key",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 853,
      "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE).unwrap();\n\n        let result: Result<String, ConfigError> = config.get_param(\"nonexistent_key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));\n    }",
      "description": null
    },
    {
      "key": "key",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 880,
      "context": "config.set_param(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_param(\"key\")?;\n        assert_eq!(value, \"value\");",
      "description": null
    },
    {
      "key": "provider",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1409,
      "context": "// Test string environment variable (the original issue case)\n        std::env::set_var(\"PROVIDER\", \"ANTHROPIC\");\n        let value: String = config.get_param(\"provider\")?;\n        assert_eq!(value, \"ANTHROPIC\");",
      "description": null
    },
    {
      "key": "port",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1414,
      "context": "// Test number environment variable\n        std::env::set_var(\"PORT\", \"8080\");\n        let value: i32 = config.get_param(\"port\")?;\n        assert_eq!(value, 8080);",
      "description": null
    },
    {
      "key": "enabled",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1419,
      "context": "// Test boolean environment variable\n        std::env::set_var(\"ENABLED\", \"true\");\n        let value: bool = config.get_param(\"enabled\")?;\n        assert_eq!(value, true);",
      "description": null
    },
    {
      "key": "config",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1429,
      "context": "level: i32,\n        }\n        let value: TestConfig = config.get_param(\"config\")?;\n        assert_eq!(value.debug, true);\n        assert_eq!(value.level, 5);",
      "description": null
    },
    {
      "key": "test_precedence",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1451,
      "context": "// Verify file value is returned when no env var\n        let value: String = config.get_param(\"test_precedence\")?;\n        assert_eq!(value, \"file_value\");",
      "description": null
    },
    {
      "key": "test_key",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 807,
      "context": "// Set a simple string value\n        config.set_param(\"test_key\", Value::String(\"test_value\".to_string()))?;\n\n        // Test simple string retrieval",
      "description": null
    },
    {
      "key": "complex_key",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 833,
      "context": "// Set a complex value\n        config.set_param(\n            \"complex_key\",\n            serde_json::json!({",
      "description": null
    },
    {
      "key": "key1",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 862,
      "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE)?;\n\n        config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n        config.set_param(\"key2\", Value::Number(42.into()))?;",
      "description": null
    },
    {
      "key": "key2",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 863,
      "context": "config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n        config.set_param(\"key2\", Value::Number(42.into()))?;\n\n        // Read the file directly to check YAML formatting",
      "description": null
    },
    {
      "key": "key",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 878,
      "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE)?;\n\n        config.set_param(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_param(\"key\")?;",
      "description": null
    },
    {
      "key": "test_key_backup",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1148,
      "context": "// First, create a config with some data\n        config.set_param(\"test_key_backup\", Value::String(\"backup_value\".to_string()))?;\n        config.set_param(\"another_key\", Value::Number(42.into()))?;",
      "description": null
    },
    {
      "key": "another_key",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1149,
      "context": "// First, create a config with some data\n        config.set_param(\"test_key_backup\", Value::String(\"backup_value\".to_string()))?;\n        config.set_param(\"another_key\", Value::Number(42.into()))?;\n\n        // Verify the backup was created",
      "description": null
    },
    {
      "key": "third_key",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1156,
      "context": "// Make sure we have a backup by doing another write\n        config.set_param(\"third_key\", Value::Bool(true))?;\n        assert!(primary_backup.exists(), \"Backup should exist after writes\");",
      "description": null
    },
    {
      "key": "version",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1213,
      "context": "// Create multiple versions to test rotation\n        for i in 1..=7 {\n            config.set_param(\"version\", Value::Number(i.into()))?;\n        }",
      "description": null
    },
    {
      "key": "test_precedence",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1448,
      "context": "// Set value in config file\n        config.set_param(\"test_precedence\", Value::String(\"file_value\".to_string()))?;\n\n        // Verify file value is returned when no env var",
      "description": null
    },
    {
      "key": "key",
      "usage_type": "config_delete",
      "method": "config_delete",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 883,
      "context": "assert_eq!(value, \"value\");\n\n        config.delete(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_param(\"key\");",
      "description": null
    },
    {
      "key": "key",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 899,
      "context": "config.set_secret(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_secret(\"key\")?;\n        assert_eq!(value, \"value\");",
      "description": null
    },
    {
      "key": "api_key",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 919,
      "context": "// Test setting and getting a simple secret\n        config.set_secret(\"api_key\", Value::String(\"secret123\".to_string()))?;\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"secret123\");",
      "description": null
    },
    {
      "key": "key1",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 949,
      "context": "// Verify both exist\n        let value1: String = config.get_secret(\"key1\")?;\n        let value2: String = config.get_secret(\"key2\")?;\n        assert_eq!(value1, \"secret1\");",
      "description": null
    },
    {
      "key": "key2",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 950,
      "context": "// Verify both exist\n        let value1: String = config.get_secret(\"key1\")?;\n        let value2: String = config.get_secret(\"key2\")?;\n        assert_eq!(value1, \"secret1\");\n        assert_eq!(value2, \"secret2\");",
      "description": null
    },
    {
      "key": "key",
      "usage_type": "secret_set",
      "method": "secret_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 897,
      "context": "let config = Config::new_with_file_secrets(config_file.path(), secrets_file.path())?;\n\n        config.set_secret(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_secret(\"key\")?;",
      "description": null
    },
    {
      "key": "api_key",
      "usage_type": "secret_set",
      "method": "secret_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 918,
      "context": "// Test setting and getting a simple secret\n        config.set_secret(\"api_key\", Value::String(\"secret123\".to_string()))?;\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"secret123\");",
      "description": null
    },
    {
      "key": "key1",
      "usage_type": "secret_set",
      "method": "secret_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 945,
      "context": "// Set multiple secrets\n        config.set_secret(\"key1\", Value::String(\"secret1\".to_string()))?;\n        config.set_secret(\"key2\", Value::String(\"secret2\".to_string()))?;",
      "description": null
    },
    {
      "key": "key2",
      "usage_type": "secret_set",
      "method": "secret_set",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 946,
      "context": "// Set multiple secrets\n        config.set_secret(\"key1\", Value::String(\"secret1\".to_string()))?;\n        config.set_secret(\"key2\", Value::String(\"secret2\".to_string()))?;\n\n        // Verify both exist",
      "description": null
    },
    {
      "key": "key",
      "usage_type": "secret_delete",
      "method": "secret_delete",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 902,
      "context": "assert_eq!(value, \"value\");\n\n        config.delete_secret(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_secret(\"key\");",
      "description": null
    },
    {
      "key": "api_key",
      "usage_type": "secret_delete",
      "method": "secret_delete",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 929,
      "context": "// Test deleting a secret\n        config.delete_secret(\"api_key\")?;\n        let result: Result<String, ConfigError> = config.get_secret(\"api_key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));",
      "description": null
    },
    {
      "key": "key1",
      "usage_type": "secret_delete",
      "method": "secret_delete",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 955,
      "context": "// Delete one secret\n        config.delete_secret(\"key1\")?;\n\n        // Verify key1 is gone but key2 remains",
      "description": null
    },
    {
      "key": "GOOSE_DISABLE_KEYRING",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 132,
      "context": "let config_path = config_dir.join(\"config.yaml\");\n\n        let secrets = match env::var(\"GOOSE_DISABLE_KEYRING\") {\n            Ok(_) => SecretStorage::File {\n                path: config_dir.join(\"secrets.yaml\"),",
      "description": null
    },
    {
      "key": "TEST_KEY",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 814,
      "context": "// Test with environment variable override\n        std::env::set_var(\"TEST_KEY\", \"env_value\");\n        let value: String = config.get_param(\"test_key\")?;\n        assert_eq!(value, \"env_value\");",
      "description": null
    },
    {
      "key": "API_KEY",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 923,
      "context": "// Test environment variable override\n        std::env::set_var(\"API_KEY\", \"env_secret\");\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"env_secret\");",
      "description": null
    },
    {
      "key": "PROVIDER",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1408,
      "context": "// Test string environment variable (the original issue case)\n        std::env::set_var(\"PROVIDER\", \"ANTHROPIC\");\n        let value: String = config.get_param(\"provider\")?;\n        assert_eq!(value, \"ANTHROPIC\");",
      "description": null
    },
    {
      "key": "PORT",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1413,
      "context": "// Test number environment variable\n        std::env::set_var(\"PORT\", \"8080\");\n        let value: i32 = config.get_param(\"port\")?;\n        assert_eq!(value, 8080);",
      "description": null
    },
    {
      "key": "ENABLED",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1418,
      "context": "// Test boolean environment variable\n        std::env::set_var(\"ENABLED\", \"true\");\n        let value: bool = config.get_param(\"enabled\")?;\n        assert_eq!(value, true);",
      "description": null
    },
    {
      "key": "CONFIG",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1423,
      "context": "// Test JSON object environment variable\n        std::env::set_var(\"CONFIG\", \"{\\\"debug\\\": true, \\\"level\\\": 5}\");\n        #[derive(Deserialize, Debug, PartialEq)]\n        struct TestConfig {",
      "description": null
    },
    {
      "key": "TEST_PRECEDENCE",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1455,
      "context": "// Set environment variable\n        std::env::set_var(\"TEST_PRECEDENCE\", \"env_value\");\n\n        // Environment variable should take precedence",
      "description": null
    },
    {
      "key": "API_KEY",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 926,
      "context": "let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"env_secret\");\n        std::env::remove_var(\"API_KEY\");\n\n        // Test deleting a secret",
      "description": null
    },
    {
      "key": "PROVIDER",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1434,
      "context": "// Clean up\n        std::env::remove_var(\"PROVIDER\");\n        std::env::remove_var(\"PORT\");\n        std::env::remove_var(\"ENABLED\");",
      "description": null
    },
    {
      "key": "PORT",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1435,
      "context": "// Clean up\n        std::env::remove_var(\"PROVIDER\");\n        std::env::remove_var(\"PORT\");\n        std::env::remove_var(\"ENABLED\");\n        std::env::remove_var(\"CONFIG\");",
      "description": null
    },
    {
      "key": "ENABLED",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1436,
      "context": "std::env::remove_var(\"PROVIDER\");\n        std::env::remove_var(\"PORT\");\n        std::env::remove_var(\"ENABLED\");\n        std::env::remove_var(\"CONFIG\");",
      "description": null
    },
    {
      "key": "CONFIG",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1437,
      "context": "std::env::remove_var(\"PORT\");\n        std::env::remove_var(\"ENABLED\");\n        std::env::remove_var(\"CONFIG\");\n\n        Ok(())",
      "description": null
    },
    {
      "key": "TEST_PRECEDENCE",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1462,
      "context": "// Clean up\n        std::env::remove_var(\"TEST_PRECEDENCE\");\n\n        Ok(())",
      "description": null
    },
    {
      "key": "OPENAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 88,
      "context": "/// // Get a string value\n/// let config = Config::global();\n/// let api_key: String = config.get_param(\"OPENAI_API_KEY\").unwrap();\n///\n/// // Get a complex type",
      "description": null
    },
    {
      "key": "GOOSE_DISABLE_KEYRING",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 132,
      "context": "let config_path = config_dir.join(\"config.yaml\");\n\n        let secrets = match env::var(\"GOOSE_DISABLE_KEYRING\") {\n            Ok(_) => SecretStorage::File {\n                path: config_dir.join(\"secrets.yaml\"),",
      "description": null
    },
    {
      "key": "TEST_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 814,
      "context": "// Test with environment variable override\n        std::env::set_var(\"TEST_KEY\", \"env_value\");\n        let value: String = config.get_param(\"test_key\")?;\n        assert_eq!(value, \"env_value\");",
      "description": null
    },
    {
      "key": "API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 923,
      "context": "// Test environment variable override\n        std::env::set_var(\"API_KEY\", \"env_secret\");\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"env_secret\");",
      "description": null
    },
    {
      "key": "TEST_PRECEDENCE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/config/base.rs",
      "line_number": 1455,
      "context": "// Set environment variable\n        std::env::set_var(\"TEST_PRECEDENCE\", \"env_value\");\n\n        // Environment variable should take precedence",
      "description": null
    },
    {
      "key": "extensions",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/extensions.rs",
      "line_number": 36,
      "context": "// Try to get the extension entry\n        let extensions: HashMap<String, ExtensionEntry> = match config.get_param(\"extensions\") {\n            Ok(exts) => exts,\n            Err(super::ConfigError::NotFound(_)) => {",
      "description": null
    },
    {
      "key": "extensions",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/extensions.rs",
      "line_number": 53,
      "context": "},\n                )]);\n                config.set_param(\"extensions\", serde_json::to_value(&defaults)?)?;\n                defaults\n            }",
      "description": null
    },
    {
      "key": "experiments",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/config/experiments.rs",
      "line_number": 23,
      "context": "let config = Config::global();\n        let mut experiments: HashMap<String, bool> =\n            config.get_param(\"experiments\").unwrap_or_default();\n        Self::refresh_experiments(&mut experiments);",
      "description": null
    },
    {
      "key": "experiments",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/experiments.rs",
      "line_number": 38,
      "context": "experiments.insert(name.to_string(), enabled);\n\n        config.set_param(\"experiments\", serde_json::to_value(experiments)?)?;\n        Ok(())\n    }",
      "description": null
    },
    {
      "key": "GCP_PROJECT_ID",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 108,
      "context": "async fn new_async(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let project_id = config.get_param(\"GCP_PROJECT_ID\")?;\n        let location = Self::determine_location(config)?;\n        let host = format!(\"https://{}-aiplatform.googleapis.com\", location);",
      "description": null
    },
    {
      "key": "GCP_MAX_RETRIES",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 136,
      "context": "// Load max retries for 429 rate limit errors\n        let max_retries = config\n            .get_param(\"GCP_MAX_RETRIES\")\n            .ok()\n            .and_then(|v: String| v.parse::<usize>().ok())",
      "description": null
    },
    {
      "key": "GCP_INITIAL_RETRY_INTERVAL_MS",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 142,
      "context": "let initial_interval_ms = config\n            .get_param(\"GCP_INITIAL_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())",
      "description": null
    },
    {
      "key": "GCP_BACKOFF_MULTIPLIER",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 148,
      "context": "let backoff_multiplier = config\n            .get_param(\"GCP_BACKOFF_MULTIPLIER\")\n            .ok()\n            .and_then(|v: String| v.parse::<f64>().ok())",
      "description": null
    },
    {
      "key": "GCP_MAX_RETRY_INTERVAL_MS",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 154,
      "context": "let max_interval_ms = config\n            .get_param(\"GCP_MAX_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())",
      "description": null
    },
    {
      "key": "GCP_LOCATION",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 174,
      "context": "fn determine_location(config: &crate::config::Config) -> Result<String> {\n        Ok(config\n            .get_param(\"GCP_LOCATION\")\n            .ok()\n            .filter(|location: &String| !location.trim().is_empty())",
      "description": null
    },
    {
      "key": "GCP_PROJECT_ID",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 108,
      "context": "async fn new_async(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let project_id = config.get_param(\"GCP_PROJECT_ID\")?;\n        let location = Self::determine_location(config)?;\n        let host = format!(\"https://{}-aiplatform.googleapis.com\", location);",
      "description": null
    },
    {
      "key": "GCP_MAX_RETRIES",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 136,
      "context": "// Load max retries for 429 rate limit errors\n        let max_retries = config\n            .get_param(\"GCP_MAX_RETRIES\")\n            .ok()\n            .and_then(|v: String| v.parse::<usize>().ok())",
      "description": null
    },
    {
      "key": "GCP_INITIAL_RETRY_INTERVAL_MS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 142,
      "context": "let initial_interval_ms = config\n            .get_param(\"GCP_INITIAL_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())",
      "description": null
    },
    {
      "key": "GCP_BACKOFF_MULTIPLIER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 148,
      "context": "let backoff_multiplier = config\n            .get_param(\"GCP_BACKOFF_MULTIPLIER\")\n            .ok()\n            .and_then(|v: String| v.parse::<f64>().ok())",
      "description": null
    },
    {
      "key": "GCP_MAX_RETRY_INTERVAL_MS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 154,
      "context": "let max_interval_ms = config\n            .get_param(\"GCP_MAX_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())",
      "description": null
    },
    {
      "key": "GCP_LOCATION",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gcpvertexai.rs",
      "line_number": 174,
      "context": "fn determine_location(config: &crate::config::Config) -> Result<String> {\n        Ok(config\n            .get_param(\"GCP_LOCATION\")\n            .ok()\n            .filter(|location: &String| !location.trim().is_empty())",
      "description": null
    },
    {
      "key": "GOOGLE_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/google.rs",
      "line_number": 61,
      "context": "let api_key: String = config.get_secret(\"GOOGLE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GOOGLE_HOST\")\n            .unwrap_or_else(|_| GOOGLE_API_HOST.to_string());",
      "description": null
    },
    {
      "key": "GOOGLE_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/google.rs",
      "line_number": 59,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"GOOGLE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GOOGLE_HOST\")",
      "description": null
    },
    {
      "key": "GOOGLE_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/google.rs",
      "line_number": 59,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"GOOGLE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GOOGLE_HOST\")",
      "description": null
    },
    {
      "key": "GOOGLE_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/google.rs",
      "line_number": 61,
      "context": "let api_key: String = config.get_secret(\"GOOGLE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GOOGLE_HOST\")\n            .unwrap_or_else(|_| GOOGLE_API_HOST.to_string());",
      "description": null
    },
    {
      "key": "OLLAMA_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/toolshim.rs",
      "line_number": 88,
      "context": "let config = crate::config::Config::global();\n        let host: String = config\n            .get_param(\"OLLAMA_HOST\")\n            .unwrap_or_else(|_| OLLAMA_HOST.to_string());",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM_OLLAMA_MODEL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/toolshim.rs",
      "line_number": 282,
      "context": "// Determine which model to use for interpretation (from env var or default)\n        let interpreter_model = std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\")\n            .unwrap_or_else(|_| DEFAULT_INTERPRETER_MODEL_OLLAMA.to_string());",
      "description": null
    },
    {
      "key": "OLLAMA_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/toolshim.rs",
      "line_number": 88,
      "context": "let config = crate::config::Config::global();\n        let host: String = config\n            .get_param(\"OLLAMA_HOST\")\n            .unwrap_or_else(|_| OLLAMA_HOST.to_string());",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM_OLLAMA_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/toolshim.rs",
      "line_number": 282,
      "context": "// Determine which model to use for interpretation (from env var or default)\n        let interpreter_model = std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\")\n            .unwrap_or_else(|_| DEFAULT_INTERPRETER_MODEL_OLLAMA.to_string());",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_MODEL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 236,
      "context": "fn test_create_lead_worker_provider() {\n        // Save current env vars\n        let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_PROVIDER",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 237,
      "context": "// Save current env vars\n        let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_TURNS",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 238,
      "context": "let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();\n\n        // Test with basic lead model configuration",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_FAILURE_THRESHOLD",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 291,
      "context": "(\n                \"GOOSE_LEAD_FAILURE_THRESHOLD\",\n                env::var(\"GOOSE_LEAD_FAILURE_THRESHOLD\").ok(),\n            ),\n            (",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_FALLBACK_TURNS",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 295,
      "context": "(\n                \"GOOSE_LEAD_FALLBACK_TURNS\",\n                env::var(\"GOOSE_LEAD_FALLBACK_TURNS\").ok(),\n            ),\n        ];",
      "description": null
    },
    {
      "key": "GOOSE_WORKER_CONTEXT_LIMIT",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 397,
      "context": "(\n                \"GOOSE_WORKER_CONTEXT_LIMIT\",\n                env::var(\"GOOSE_WORKER_CONTEXT_LIMIT\").ok(),\n            ),\n            (\"GOOSE_CONTEXT_LIMIT\", env::var(\"GOOSE_CONTEXT_LIMIT\").ok()),",
      "description": null
    },
    {
      "key": "GOOSE_CONTEXT_LIMIT",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 399,
      "context": "env::var(\"GOOSE_WORKER_CONTEXT_LIMIT\").ok(),\n            ),\n            (\"GOOSE_CONTEXT_LIMIT\", env::var(\"GOOSE_CONTEXT_LIMIT\").ok()),\n        ];",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_MODEL",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 236,
      "context": "fn test_create_lead_worker_provider() {\n        // Save current env vars\n        let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_PROVIDER",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 237,
      "context": "// Save current env vars\n        let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_TURNS",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 238,
      "context": "let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();\n\n        // Test with basic lead model configuration",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_FAILURE_THRESHOLD",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 291,
      "context": "(\n                \"GOOSE_LEAD_FAILURE_THRESHOLD\",\n                env::var(\"GOOSE_LEAD_FAILURE_THRESHOLD\").ok(),\n            ),\n            (",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_FALLBACK_TURNS",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 295,
      "context": "(\n                \"GOOSE_LEAD_FALLBACK_TURNS\",\n                env::var(\"GOOSE_LEAD_FALLBACK_TURNS\").ok(),\n            ),\n        ];",
      "description": null
    },
    {
      "key": "GOOSE_WORKER_CONTEXT_LIMIT",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 397,
      "context": "(\n                \"GOOSE_WORKER_CONTEXT_LIMIT\",\n                env::var(\"GOOSE_WORKER_CONTEXT_LIMIT\").ok(),\n            ),\n            (\"GOOSE_CONTEXT_LIMIT\", env::var(\"GOOSE_CONTEXT_LIMIT\").ok()),",
      "description": null
    },
    {
      "key": "GOOSE_CONTEXT_LIMIT",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 399,
      "context": "env::var(\"GOOSE_WORKER_CONTEXT_LIMIT\").ok(),\n            ),\n            (\"GOOSE_CONTEXT_LIMIT\", env::var(\"GOOSE_CONTEXT_LIMIT\").ok()),\n        ];",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_MODEL",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 241,
      "context": "// Test with basic lead model configuration\n        env::set_var(\"GOOSE_LEAD_MODEL\", \"gpt-4o\");\n\n        // This will try to create a lead/worker provider",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_PROVIDER",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 261,
      "context": "// Test with different lead provider\n        env::set_var(\"GOOSE_LEAD_PROVIDER\", \"anthropic\");\n        env::set_var(\"GOOSE_LEAD_TURNS\", \"5\");",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_TURNS",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 262,
      "context": "// Test with different lead provider\n        env::set_var(\"GOOSE_LEAD_PROVIDER\", \"anthropic\");\n        env::set_var(\"GOOSE_LEAD_TURNS\", \"5\");\n\n        let _result = create(\"openai\", gpt4mini_config);",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_FAILURE_THRESHOLD",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 324,
      "context": "// Test with custom values\n        env::set_var(\"GOOSE_LEAD_TURNS\", \"7\");\n        env::set_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\", \"4\");\n        env::set_var(\"GOOSE_LEAD_FALLBACK_TURNS\", \"3\");",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_FALLBACK_TURNS",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 325,
      "context": "env::set_var(\"GOOSE_LEAD_TURNS\", \"7\");\n        env::set_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\", \"4\");\n        env::set_var(\"GOOSE_LEAD_FALLBACK_TURNS\", \"3\");\n\n        let _result = create(\"openai\", ModelConfig::new_or_fail(\"gpt-4o-mini\"));",
      "description": null
    },
    {
      "key": "GOOSE_WORKER_CONTEXT_LIMIT",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 418,
      "context": "// Test case 2: With GOOSE_WORKER_CONTEXT_LIMIT - should override original\n        env::set_var(\"GOOSE_WORKER_CONTEXT_LIMIT\", \"32000\");\n        let _result = create_lead_worker_from_env(\"openai\", &default_model, \"gpt-4o\");\n        env::remove_var(\"GOOSE_WORKER_CONTEXT_LIMIT\");",
      "description": null
    },
    {
      "key": "GOOSE_CONTEXT_LIMIT",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 423,
      "context": "// Test case 3: With GOOSE_CONTEXT_LIMIT - should override original\n        env::set_var(\"GOOSE_CONTEXT_LIMIT\", \"64000\");\n        let _result = create_lead_worker_from_env(\"openai\", &default_model, \"gpt-4o\");\n        env::remove_var(\"GOOSE_CONTEXT_LIMIT\");",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_MODEL",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 270,
      "context": "match saved_lead {\n            Some(val) => env::set_var(\"GOOSE_LEAD_MODEL\", val),\n            None => env::remove_var(\"GOOSE_LEAD_MODEL\"),\n        }\n        match saved_provider {",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_PROVIDER",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 274,
      "context": "match saved_provider {\n            Some(val) => env::set_var(\"GOOSE_LEAD_PROVIDER\", val),\n            None => env::remove_var(\"GOOSE_LEAD_PROVIDER\"),\n        }\n        match saved_turns {",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_TURNS",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 278,
      "context": "match saved_turns {\n            Some(val) => env::set_var(\"GOOSE_LEAD_TURNS\", val),\n            None => env::remove_var(\"GOOSE_LEAD_TURNS\"),\n        }\n    }",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_FAILURE_THRESHOLD",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 352,
      "context": "env::remove_var(\"GOOSE_LEAD_PROVIDER\");\n        env::remove_var(\"GOOSE_LEAD_TURNS\");\n        env::remove_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\");\n        env::remove_var(\"GOOSE_LEAD_FALLBACK_TURNS\");",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_FALLBACK_TURNS",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 353,
      "context": "env::remove_var(\"GOOSE_LEAD_TURNS\");\n        env::remove_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\");\n        env::remove_var(\"GOOSE_LEAD_FALLBACK_TURNS\");\n\n        // This should try to create a regular provider",
      "description": null
    },
    {
      "key": "GOOSE_WORKER_CONTEXT_LIMIT",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 420,
      "context": "env::set_var(\"GOOSE_WORKER_CONTEXT_LIMIT\", \"32000\");\n        let _result = create_lead_worker_from_env(\"openai\", &default_model, \"gpt-4o\");\n        env::remove_var(\"GOOSE_WORKER_CONTEXT_LIMIT\");\n\n        // Test case 3: With GOOSE_CONTEXT_LIMIT - should override original",
      "description": null
    },
    {
      "key": "GOOSE_CONTEXT_LIMIT",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 425,
      "context": "env::set_var(\"GOOSE_CONTEXT_LIMIT\", \"64000\");\n        let _result = create_lead_worker_from_env(\"openai\", &default_model, \"gpt-4o\");\n        env::remove_var(\"GOOSE_CONTEXT_LIMIT\");\n\n        // Restore env vars",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 69,
      "context": "// Check for lead model environment variables\n    if let Ok(lead_model_name) = config.get_param::<String>(\"GOOSE_LEAD_MODEL\") {\n        tracing::info!(\"Creating lead/worker provider from environment variables\");",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 87,
      "context": "// Get lead provider (optional, defaults to main provider)\n    let lead_provider_name = config\n        .get_param::<String>(\"GOOSE_LEAD_PROVIDER\")\n        .unwrap_or_else(|_| default_provider_name.to_string());",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_TURNS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 92,
      "context": "// Get configuration parameters with defaults\n    let lead_turns = config\n        .get_param::<usize>(\"GOOSE_LEAD_TURNS\")\n        .unwrap_or(default_lead_turns());\n    let failure_threshold = config",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_FAILURE_THRESHOLD",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 95,
      "context": ".unwrap_or(default_lead_turns());\n    let failure_threshold = config\n        .get_param::<usize>(\"GOOSE_LEAD_FAILURE_THRESHOLD\")\n        .unwrap_or(default_failure_threshold());\n    let fallback_turns = config",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_FALLBACK_TURNS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 98,
      "context": ".unwrap_or(default_failure_threshold());\n    let fallback_turns = config\n        .get_param::<usize>(\"GOOSE_LEAD_FALLBACK_TURNS\")\n        .unwrap_or(default_fallback_turns());",
      "description": null
    },
    {
      "key": "GOOSE_LEAD_CONTEXT_LIMIT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 103,
      "context": "let lead_model_config = ModelConfig::new_with_context_env(\n        lead_model_name.to_string(),\n        Some(\"GOOSE_LEAD_CONTEXT_LIMIT\"),\n    )?;",
      "description": null
    },
    {
      "key": "GOOSE_WORKER_CONTEXT_LIMIT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 121,
      "context": "// Check for worker-specific context limit\n        if let Ok(limit_str) = global_config.get_param::<String>(\"GOOSE_WORKER_CONTEXT_LIMIT\") {\n            if let Ok(limit) = limit_str.parse::<usize>() {\n                worker_config = worker_config.with_context_limit(Some(limit));",
      "description": null
    },
    {
      "key": "GOOSE_CONTEXT_LIMIT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 125,
      "context": "worker_config = worker_config.with_context_limit(Some(limit));\n            }\n        } else if let Ok(limit_str) = global_config.get_param::<String>(\"GOOSE_CONTEXT_LIMIT\") {\n            // Check for general context limit if worker-specific is not set\n            if let Ok(limit) = limit_str.parse::<usize>() {",
      "description": null
    },
    {
      "key": "OPENAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/factory.rs",
      "line_number": 256,
      "context": "// If it fails, it should be due to missing API keys, confirming we tried to create providers\n                let error_msg = error.to_string();\n                assert!(error_msg.contains(\"OPENAI_API_KEY\") || error_msg.contains(\"secret\"));\n            }\n        }",
      "description": null
    },
    {
      "key": "OPENROUTER_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/openrouter.rs",
      "line_number": 48,
      "context": "let api_key: String = config.get_secret(\"OPENROUTER_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENROUTER_HOST\")\n            .unwrap_or_else(|_| \"https://openrouter.ai\".to_string());",
      "description": null
    },
    {
      "key": "OPENROUTER_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/openrouter.rs",
      "line_number": 46,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"OPENROUTER_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENROUTER_HOST\")",
      "description": null
    },
    {
      "key": "OPENROUTER_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/openrouter.rs",
      "line_number": 46,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"OPENROUTER_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENROUTER_HOST\")",
      "description": null
    },
    {
      "key": "OPENROUTER_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/openrouter.rs",
      "line_number": 48,
      "context": "let api_key: String = config.get_secret(\"OPENROUTER_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENROUTER_HOST\")\n            .unwrap_or_else(|_| \"https://openrouter.ai\".to_string());",
      "description": null
    },
    {
      "key": "GOOGLE_APPLICATION_CREDENTIALS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gcpauth.rs",
      "line_number": 213,
      "context": "fn get_env_credentials_path(env_ops: &impl EnvOps) -> Result<String, AuthError> {\n        env_ops\n            .get_var(\"GOOGLE_APPLICATION_CREDENTIALS\")\n            .map_err(|_| {\n                AuthError::Credentials(\"GOOGLE_APPLICATION_CREDENTIALS not set\".to_string())",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gcpauth.rs",
      "line_number": 224,
      "context": "} else {\n            (\n                \"HOME\",\n                \".config/gcloud/application_default_credentials.json\",\n            )",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_ENDPOINT",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/azure.rs",
      "line_number": 76,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let endpoint: String = config.get_param(\"AZURE_OPENAI_ENDPOINT\")?;\n        let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_DEPLOYMENT_NAME",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/azure.rs",
      "line_number": 77,
      "context": "let config = crate::config::Config::global();\n        let endpoint: String = config.get_param(\"AZURE_OPENAI_ENDPOINT\")?;\n        let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config\n            .get_param(\"AZURE_OPENAI_API_VERSION\")",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_API_VERSION",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/azure.rs",
      "line_number": 79,
      "context": "let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config\n            .get_param(\"AZURE_OPENAI_API_VERSION\")\n            .unwrap_or_else(|_| AZURE_DEFAULT_API_VERSION.to_string());",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/azure.rs",
      "line_number": 83,
      "context": "let api_key = config\n            .get_secret(\"AZURE_OPENAI_API_KEY\")\n            .ok()\n            .filter(|key: &String| !key.is_empty());",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_ENDPOINT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/azure.rs",
      "line_number": 76,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let endpoint: String = config.get_param(\"AZURE_OPENAI_ENDPOINT\")?;\n        let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_DEPLOYMENT_NAME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/azure.rs",
      "line_number": 77,
      "context": "let config = crate::config::Config::global();\n        let endpoint: String = config.get_param(\"AZURE_OPENAI_ENDPOINT\")?;\n        let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config\n            .get_param(\"AZURE_OPENAI_API_VERSION\")",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_API_VERSION",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/azure.rs",
      "line_number": 79,
      "context": "let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config\n            .get_param(\"AZURE_OPENAI_API_VERSION\")\n            .unwrap_or_else(|_| AZURE_DEFAULT_API_VERSION.to_string());",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/azure.rs",
      "line_number": 83,
      "context": "let api_key = config\n            .get_secret(\"AZURE_OPENAI_API_KEY\")\n            .ok()\n            .filter(|key: &String| !key.is_empty());",
      "description": null
    },
    {
      "key": "GITHUB_COPILOT_TOKEN",
      "usage_type": "secret_set",
      "method": "secret_set",
      "file_path": "crates/goose/src/providers/githubcopilot.rs",
      "line_number": 239,
      "context": ".await\n                        .context(\"unable to login into github\")?;\n                    config.set_secret(\"GITHUB_COPILOT_TOKEN\", Value::String(token.clone()))?;\n                    token\n                }",
      "description": null
    },
    {
      "key": "GITHUB_COPILOT_TOKEN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/githubcopilot.rs",
      "line_number": 231,
      "context": "async fn refresh_api_info(&self) -> Result<CopilotTokenInfo> {\n        let config = Config::global();\n        let token = match config.get_secret::<String>(\"GITHUB_COPILOT_TOKEN\") {\n            Ok(token) => token,\n            Err(err) => match err {",
      "description": null
    },
    {
      "key": "SAGEMAKER_ENDPOINT_NAME",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/sagemaker_tgi.rs",
      "line_number": 40,
      "context": "// Get SageMaker endpoint name (just the name, not full URL)\n        let endpoint_name: String = config.get_param(\"SAGEMAKER_ENDPOINT_NAME\").map_err(|_| {\n            anyhow::anyhow!(\"SAGEMAKER_ENDPOINT_NAME is required for SageMaker TGI provider\")\n        })?;",
      "description": null
    },
    {
      "key": "SAGEMAKER_ENDPOINT_NAME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/sagemaker_tgi.rs",
      "line_number": 40,
      "context": "// Get SageMaker endpoint name (just the name, not full URL)\n        let endpoint_name: String = config.get_param(\"SAGEMAKER_ENDPOINT_NAME\").map_err(|_| {\n            anyhow::anyhow!(\"SAGEMAKER_ENDPOINT_NAME is required for SageMaker TGI provider\")\n        })?;",
      "description": null
    },
    {
      "key": "AWS_",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/sagemaker_tgi.rs",
      "line_number": 48,
      "context": "if let Ok(map) = res {\n                map.into_iter()\n                    .filter(|(key, _)| key.starts_with(\"AWS_\"))\n                    .filter_map(|(key, value)| value.as_str().map(|s| (key, s.to_string())))\n                    .for_each(|(key, s)| std::env::set_var(key, s));",
      "description": null
    },
    {
      "key": "AWS_REGION",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/sagemaker_tgi.rs",
      "line_number": 272,
      "context": "vec![\n                ConfigKey::new(\"SAGEMAKER_ENDPOINT_NAME\", false, false, None),\n                ConfigKey::new(\"AWS_REGION\", true, false, Some(\"us-east-1\")),\n                ConfigKey::new(\"AWS_PROFILE\", true, false, Some(\"default\")),\n            ],",
      "description": null
    },
    {
      "key": "AWS_PROFILE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/sagemaker_tgi.rs",
      "line_number": 273,
      "context": "ConfigKey::new(\"SAGEMAKER_ENDPOINT_NAME\", false, false, None),\n                ConfigKey::new(\"AWS_REGION\", true, false, Some(\"us-east-1\")),\n                ConfigKey::new(\"AWS_PROFILE\", true, false, Some(\"default\")),\n            ],\n        )",
      "description": null
    },
    {
      "key": "AWS_",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/bedrock.rs",
      "line_number": 48,
      "context": "if let Ok(map) = res {\n                map.into_iter()\n                    .filter(|(key, _)| key.starts_with(\"AWS_\"))\n                    .filter_map(|(key, value)| value.as_str().map(|s| (key, s.to_string())))\n                    .for_each(|(key, s)| std::env::set_var(key, s));",
      "description": null
    },
    {
      "key": "AWS_PROFILE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/bedrock.rs",
      "line_number": 146,
      "context": "BEDROCK_KNOWN_MODELS.to_vec(),\n            BEDROCK_DOC_LINK,\n            vec![ConfigKey::new(\"AWS_PROFILE\", true, false, Some(\"default\"))],\n        )\n    }",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 538,
      "context": "let config = Config::global();\n        let goose_mode: String = config.get_param(\"GOOSE_MODE\").unwrap();\n        assert_eq!(goose_mode, \"auto\");",
      "description": null
    },
    {
      "key": "CLAUDE_CODE_COMMAND",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 36,
      "context": "let config = crate::config::Config::global();\n        let command: String = config\n            .get_param(\"CLAUDE_CODE_COMMAND\")\n            .unwrap_or_else(|_| \"claude\".to_string());",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 53,
      "context": "/// Search for claude executable in common installation locations\n    fn find_claude_executable(command_name: &str) -> Option<String> {\n        let home = std::env::var(\"HOME\").ok()?;\n\n        let search_paths = vec![",
      "description": null
    },
    {
      "key": "PATH",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 86,
      "context": "}\n\n        if let Ok(path_var) = std::env::var(\"PATH\") {\n            #[cfg(unix)]\n            let path_separator = ':';",
      "description": null
    },
    {
      "key": "GOOSE_CLAUDE_CODE_DEBUG",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 310,
      "context": "let filtered_system = self.filter_extensions_from_system_prompt(system);\n\n        if std::env::var(\"GOOSE_CLAUDE_CODE_DEBUG\").is_ok() {\n            println!(\"=== CLAUDE CODE PROVIDER DEBUG ===\");\n            println!(\"Command: {}\", self.command);",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 53,
      "context": "/// Search for claude executable in common installation locations\n    fn find_claude_executable(command_name: &str) -> Option<String> {\n        let home = std::env::var(\"HOME\").ok()?;\n\n        let search_paths = vec![",
      "description": null
    },
    {
      "key": "GOOSE_CLAUDE_CODE_DEBUG",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 310,
      "context": "let filtered_system = self.filter_extensions_from_system_prompt(system);\n\n        if std::env::var(\"GOOSE_CLAUDE_CODE_DEBUG\").is_ok() {\n            println!(\"=== CLAUDE CODE PROVIDER DEBUG ===\");\n            println!(\"Command: {}\", self.command);",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 535,
      "context": "fn test_permission_mode_flag_construction() {\n        // Test that in auto mode, the --permission-mode acceptEdits flag is added\n        std::env::set_var(\"GOOSE_MODE\", \"auto\");\n\n        let config = Config::global();",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 541,
      "context": "assert_eq!(goose_mode, \"auto\");\n\n        std::env::remove_var(\"GOOSE_MODE\");\n    }",
      "description": null
    },
    {
      "key": "CLAUDE_CODE_COMMAND",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 36,
      "context": "let config = crate::config::Config::global();\n        let command: String = config\n            .get_param(\"CLAUDE_CODE_COMMAND\")\n            .unwrap_or_else(|_| \"claude\".to_string());",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 53,
      "context": "/// Search for claude executable in common installation locations\n    fn find_claude_executable(command_name: &str) -> Option<String> {\n        let home = std::env::var(\"HOME\").ok()?;\n\n        let search_paths = vec![",
      "description": null
    },
    {
      "key": "PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 86,
      "context": "}\n\n        if let Ok(path_var) = std::env::var(\"PATH\") {\n            #[cfg(unix)]\n            let path_separator = ':';",
      "description": null
    },
    {
      "key": "GOOSE_CLAUDE_CODE_DEBUG",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 310,
      "context": "let filtered_system = self.filter_extensions_from_system_prompt(system);\n\n        if std::env::var(\"GOOSE_CLAUDE_CODE_DEBUG\").is_ok() {\n            println!(\"=== CLAUDE CODE PROVIDER DEBUG ===\");\n            println!(\"Command: {}\", self.command);",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/claude_code.rs",
      "line_number": 342,
      "context": "// Add permission mode based on GOOSE_MODE setting\n        let config = Config::global();\n        if let Ok(goose_mode) = config.get_param::<String>(\"GOOSE_MODE\") {\n            if goose_mode.as_str() == \"auto\" {\n                cmd.arg(\"--permission-mode\").arg(\"acceptEdits\");",
      "description": null
    },
    {
      "key": "API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/base.rs",
      "line_number": 170,
      "context": "#[derive(Debug, Clone, Serialize, Deserialize, ToSchema)]\npub struct ConfigKey {\n    /// The name of the configuration key (e.g., \"API_KEY\")\n    pub name: String,\n    /// Whether this key is required for the provider to function",
      "description": null
    },
    {
      "key": "OLLAMA_TIMEOUT",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/ollama.rs",
      "line_number": 45,
      "context": "let timeout: Duration =\n            Duration::from_secs(config.get_param(\"OLLAMA_TIMEOUT\").unwrap_or(OLLAMA_TIMEOUT));\n\n        // OLLAMA_HOST is sometimes just the 'host' or 'host:port' without a scheme",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/ollama.rs",
      "line_number": 134,
      "context": ") -> Result<(Message, ProviderUsage), ProviderError> {\n        let config = crate::config::Config::global();\n        let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n        let filtered_tools = if goose_mode == \"chat\" { &[] } else { tools };",
      "description": null
    },
    {
      "key": "OLLAMA_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/ollama.rs",
      "line_number": 41,
      "context": "let config = crate::config::Config::global();\n        let host: String = config\n            .get_param(\"OLLAMA_HOST\")\n            .unwrap_or_else(|_| OLLAMA_HOST.to_string());",
      "description": null
    },
    {
      "key": "OLLAMA_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/ollama.rs",
      "line_number": 41,
      "context": "let config = crate::config::Config::global();\n        let host: String = config\n            .get_param(\"OLLAMA_HOST\")\n            .unwrap_or_else(|_| OLLAMA_HOST.to_string());",
      "description": null
    },
    {
      "key": "OLLAMA_TIMEOUT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/ollama.rs",
      "line_number": 45,
      "context": "let timeout: Duration =\n            Duration::from_secs(config.get_param(\"OLLAMA_TIMEOUT\").unwrap_or(OLLAMA_TIMEOUT));\n\n        // OLLAMA_HOST is sometimes just the 'host' or 'host:port' without a scheme",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/ollama.rs",
      "line_number": 134,
      "context": ") -> Result<(Message, ProviderUsage), ProviderError> {\n        let config = crate::config::Config::global();\n        let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n        let filtered_tools = if goose_mode == \"chat\" { &[] } else { tools };",
      "description": null
    },
    {
      "key": "DATABRICKS_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 113,
      "context": "let config = crate::config::Config::global();\n\n        let mut host: Result<String, ConfigError> = config.get_param(\"DATABRICKS_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"DATABRICKS_HOST\")",
      "description": null
    },
    {
      "key": "DATABRICKS_MAX_RETRIES",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 151,
      "context": "fn load_retry_config(config: &crate::config::Config) -> RetryConfig {\n        let max_retries = config\n            .get_param(\"DATABRICKS_MAX_RETRIES\")\n            .ok()\n            .and_then(|v: String| v.parse::<usize>().ok())",
      "description": null
    },
    {
      "key": "DATABRICKS_INITIAL_RETRY_INTERVAL_MS",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 157,
      "context": "let initial_interval_ms = config\n            .get_param(\"DATABRICKS_INITIAL_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())",
      "description": null
    },
    {
      "key": "DATABRICKS_BACKOFF_MULTIPLIER",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 163,
      "context": "let backoff_multiplier = config\n            .get_param(\"DATABRICKS_BACKOFF_MULTIPLIER\")\n            .ok()\n            .and_then(|v: String| v.parse::<f64>().ok())",
      "description": null
    },
    {
      "key": "DATABRICKS_MAX_RETRY_INTERVAL_MS",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 169,
      "context": "let max_interval_ms = config\n            .get_param(\"DATABRICKS_MAX_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())",
      "description": null
    },
    {
      "key": "DATABRICKS_HOST",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 115,
      "context": "let mut host: Result<String, ConfigError> = config.get_param(\"DATABRICKS_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"DATABRICKS_HOST\")\n        }",
      "description": null
    },
    {
      "key": "DATABRICKS_TOKEN",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 128,
      "context": "let retry_config = Self::load_retry_config(config);\n\n        let auth = if let Ok(api_key) = config.get_secret(\"DATABRICKS_TOKEN\") {\n            DatabricksAuth::token(api_key)\n        } else {",
      "description": null
    },
    {
      "key": "DATABRICKS_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 113,
      "context": "let config = crate::config::Config::global();\n\n        let mut host: Result<String, ConfigError> = config.get_param(\"DATABRICKS_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"DATABRICKS_HOST\")",
      "description": null
    },
    {
      "key": "DATABRICKS_TOKEN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 128,
      "context": "let retry_config = Self::load_retry_config(config);\n\n        let auth = if let Ok(api_key) = config.get_secret(\"DATABRICKS_TOKEN\") {\n            DatabricksAuth::token(api_key)\n        } else {",
      "description": null
    },
    {
      "key": "DATABRICKS_MAX_RETRIES",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 151,
      "context": "fn load_retry_config(config: &crate::config::Config) -> RetryConfig {\n        let max_retries = config\n            .get_param(\"DATABRICKS_MAX_RETRIES\")\n            .ok()\n            .and_then(|v: String| v.parse::<usize>().ok())",
      "description": null
    },
    {
      "key": "DATABRICKS_INITIAL_RETRY_INTERVAL_MS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 157,
      "context": "let initial_interval_ms = config\n            .get_param(\"DATABRICKS_INITIAL_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())",
      "description": null
    },
    {
      "key": "DATABRICKS_BACKOFF_MULTIPLIER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 163,
      "context": "let backoff_multiplier = config\n            .get_param(\"DATABRICKS_BACKOFF_MULTIPLIER\")\n            .ok()\n            .and_then(|v: String| v.parse::<f64>().ok())",
      "description": null
    },
    {
      "key": "DATABRICKS_MAX_RETRY_INTERVAL_MS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/databricks.rs",
      "line_number": 169,
      "context": "let max_interval_ms = config\n            .get_param(\"DATABRICKS_MAX_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())",
      "description": null
    },
    {
      "key": "GEMINI_CLI_COMMAND",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/gemini_cli.rs",
      "line_number": 35,
      "context": "let config = crate::config::Config::global();\n        let command: String = config\n            .get_param(\"GEMINI_CLI_COMMAND\")\n            .unwrap_or_else(|_| \"gemini\".to_string());",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/gemini_cli.rs",
      "line_number": 52,
      "context": "/// Search for gemini executable in common installation locations\n    fn find_gemini_executable(command_name: &str) -> Option<String> {\n        let home = std::env::var(\"HOME\").ok()?;\n\n        // Common locations where gemini might be installed",
      "description": null
    },
    {
      "key": "PATH",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/gemini_cli.rs",
      "line_number": 90,
      "context": "// If not found in common locations, check if it's in PATH\n        if let Ok(path_var) = std::env::var(\"PATH\") {\n            for dir in path_var.split(':') {\n                let full_path = format!(\"{}/{}\", dir, command_name);",
      "description": null
    },
    {
      "key": "GOOSE_GEMINI_CLI_DEBUG",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/gemini_cli.rs",
      "line_number": 161,
      "context": "full_prompt.push_str(\"Assistant: \");\n\n        if std::env::var(\"GOOSE_GEMINI_CLI_DEBUG\").is_ok() {\n            println!(\"=== GEMINI CLI PROVIDER DEBUG ===\");\n            println!(\"Command: {}\", self.command);",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/providers/gemini_cli.rs",
      "line_number": 52,
      "context": "/// Search for gemini executable in common installation locations\n    fn find_gemini_executable(command_name: &str) -> Option<String> {\n        let home = std::env::var(\"HOME\").ok()?;\n\n        // Common locations where gemini might be installed",
      "description": null
    },
    {
      "key": "GOOSE_GEMINI_CLI_DEBUG",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose/src/providers/gemini_cli.rs",
      "line_number": 161,
      "context": "full_prompt.push_str(\"Assistant: \");\n\n        if std::env::var(\"GOOSE_GEMINI_CLI_DEBUG\").is_ok() {\n            println!(\"=== GEMINI CLI PROVIDER DEBUG ===\");\n            println!(\"Command: {}\", self.command);",
      "description": null
    },
    {
      "key": "GEMINI_CLI_COMMAND",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gemini_cli.rs",
      "line_number": 35,
      "context": "let config = crate::config::Config::global();\n        let command: String = config\n            .get_param(\"GEMINI_CLI_COMMAND\")\n            .unwrap_or_else(|_| \"gemini\".to_string());",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gemini_cli.rs",
      "line_number": 52,
      "context": "/// Search for gemini executable in common installation locations\n    fn find_gemini_executable(command_name: &str) -> Option<String> {\n        let home = std::env::var(\"HOME\").ok()?;\n\n        // Common locations where gemini might be installed",
      "description": null
    },
    {
      "key": "PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gemini_cli.rs",
      "line_number": 90,
      "context": "// If not found in common locations, check if it's in PATH\n        if let Ok(path_var) = std::env::var(\"PATH\") {\n            for dir in path_var.split(':') {\n                let full_path = format!(\"{}/{}\", dir, command_name);",
      "description": null
    },
    {
      "key": "GOOSE_GEMINI_CLI_DEBUG",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/gemini_cli.rs",
      "line_number": 161,
      "context": "full_prompt.push_str(\"Assistant: \");\n\n        if std::env::var(\"GOOSE_GEMINI_CLI_DEBUG\").is_ok() {\n            println!(\"=== GEMINI CLI PROVIDER DEBUG ===\");\n            println!(\"Command: {}\", self.command);",
      "description": null
    },
    {
      "key": "GOOSE_CACHE_DIR",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/pricing.rs",
      "line_number": 16,
      "context": "/// Get the cache directory path\nfn get_cache_dir() -> Result<PathBuf> {\n    let cache_dir = if let Ok(goose_dir) = std::env::var(\"GOOSE_CACHE_DIR\") {\n        PathBuf::from(goose_dir)\n    } else {",
      "description": null
    },
    {
      "key": "GOOSE_CACHE_DIR",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/pricing.rs",
      "line_number": 16,
      "context": "/// Get the cache directory path\nfn get_cache_dir() -> Result<PathBuf> {\n    let cache_dir = if let Ok(goose_dir) = std::env::var(\"GOOSE_CACHE_DIR\") {\n        PathBuf::from(goose_dir)\n    } else {",
      "description": null
    },
    {
      "key": "SNOWFLAKE_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/snowflake.rs",
      "line_number": 48,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let mut host: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"SNOWFLAKE_HOST\")",
      "description": null
    },
    {
      "key": "SNOWFLAKE_TOKEN",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/snowflake.rs",
      "line_number": 69,
      "context": "}\n\n        let mut token: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_TOKEN\");\n\n        if token.is_err() {",
      "description": null
    },
    {
      "key": "SNOWFLAKE_HOST",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/snowflake.rs",
      "line_number": 50,
      "context": "let mut host: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"SNOWFLAKE_HOST\")\n        }\n        if host.is_err() {",
      "description": null
    },
    {
      "key": "SNOWFLAKE_TOKEN",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/snowflake.rs",
      "line_number": 72,
      "context": "if token.is_err() {\n            token = config.get_secret(\"SNOWFLAKE_TOKEN\")\n        }",
      "description": null
    },
    {
      "key": "SNOWFLAKE_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/snowflake.rs",
      "line_number": 48,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let mut host: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"SNOWFLAKE_HOST\")",
      "description": null
    },
    {
      "key": "SNOWFLAKE_TOKEN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/snowflake.rs",
      "line_number": 69,
      "context": "}\n\n        let mut token: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_TOKEN\");\n\n        if token.is_err() {",
      "description": null
    },
    {
      "key": "XAI_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/xai.rs",
      "line_number": 53,
      "context": "let api_key: String = config.get_secret(\"XAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"XAI_HOST\")\n            .unwrap_or_else(|_| XAI_API_HOST.to_string());",
      "description": null
    },
    {
      "key": "XAI_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/xai.rs",
      "line_number": 51,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"XAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"XAI_HOST\")",
      "description": null
    },
    {
      "key": "XAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/xai.rs",
      "line_number": 51,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"XAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"XAI_HOST\")",
      "description": null
    },
    {
      "key": "XAI_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/xai.rs",
      "line_number": 53,
      "context": "let api_key: String = config.get_secret(\"XAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"XAI_HOST\")\n            .unwrap_or_else(|_| XAI_API_HOST.to_string());",
      "description": null
    },
    {
      "key": "ANTHROPIC_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/anthropic.rs",
      "line_number": 54,
      "context": "let api_key: String = config.get_secret(\"ANTHROPIC_API_KEY\")?;\n        let host: String = config\n            .get_param(\"ANTHROPIC_HOST\")\n            .unwrap_or_else(|_| \"https://api.anthropic.com\".to_string());",
      "description": null
    },
    {
      "key": "ANTHROPIC_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/anthropic.rs",
      "line_number": 52,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"ANTHROPIC_API_KEY\")?;\n        let host: String = config\n            .get_param(\"ANTHROPIC_HOST\")",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/anthropic.rs",
      "line_number": 71,
      "context": "let mut headers = Vec::new();\n\n        let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n        if self.model.model_name.starts_with(\"claude-3-7-sonnet-\") {\n            if is_thinking_enabled {",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose/src/providers/anthropic.rs",
      "line_number": 71,
      "context": "let mut headers = Vec::new();\n\n        let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n        if self.model.model_name.starts_with(\"claude-3-7-sonnet-\") {\n            if is_thinking_enabled {",
      "description": null
    },
    {
      "key": "ANTHROPIC_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/anthropic.rs",
      "line_number": 52,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"ANTHROPIC_API_KEY\")?;\n        let host: String = config\n            .get_param(\"ANTHROPIC_HOST\")",
      "description": null
    },
    {
      "key": "ANTHROPIC_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/anthropic.rs",
      "line_number": 54,
      "context": "let api_key: String = config.get_secret(\"ANTHROPIC_API_KEY\")?;\n        let host: String = config\n            .get_param(\"ANTHROPIC_HOST\")\n            .unwrap_or_else(|_| \"https://api.anthropic.com\".to_string());",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/anthropic.rs",
      "line_number": 71,
      "context": "let mut headers = Vec::new();\n\n        let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n        if self.model.model_name.starts_with(\"claude-3-7-sonnet-\") {\n            if is_thinking_enabled {",
      "description": null
    },
    {
      "key": "GROQ_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/groq.rs",
      "line_number": 40,
      "context": "let api_key: String = config.get_secret(\"GROQ_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GROQ_HOST\")\n            .unwrap_or_else(|_| GROQ_API_HOST.to_string());",
      "description": null
    },
    {
      "key": "GROQ_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/groq.rs",
      "line_number": 38,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"GROQ_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GROQ_HOST\")",
      "description": null
    },
    {
      "key": "GROQ_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/groq.rs",
      "line_number": 38,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"GROQ_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GROQ_HOST\")",
      "description": null
    },
    {
      "key": "GROQ_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/groq.rs",
      "line_number": 40,
      "context": "let api_key: String = config.get_secret(\"GROQ_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GROQ_HOST\")\n            .unwrap_or_else(|_| GROQ_API_HOST.to_string());",
      "description": null
    },
    {
      "key": "LITELLM_CUSTOM_HEADERS",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 44,
      "context": "let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"LITELLM_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"LITELLM_CUSTOM_HEADERS\"))\n            .ok()\n            .map(parse_custom_headers);",
      "description": null
    },
    {
      "key": "LITELLM_TIMEOUT",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 47,
      "context": ".ok()\n            .map(parse_custom_headers);\n        let timeout_secs: u64 = config.get_param(\"LITELLM_TIMEOUT\").unwrap_or(600);\n\n        let auth = if api_key.is_empty() {",
      "description": null
    },
    {
      "key": "LITELLM_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 37,
      "context": ".unwrap_or_else(|_| String::new());\n        let host: String = config\n            .get_param(\"LITELLM_HOST\")\n            .unwrap_or_else(|_| \"https://api.litellm.ai\".to_string());\n        let base_path: String = config",
      "description": null
    },
    {
      "key": "LITELLM_BASE_PATH",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 40,
      "context": ".unwrap_or_else(|_| \"https://api.litellm.ai\".to_string());\n        let base_path: String = config\n            .get_param(\"LITELLM_BASE_PATH\")\n            .unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let custom_headers: Option<HashMap<String, String>> = config",
      "description": null
    },
    {
      "key": "LITELLM_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 34,
      "context": "let config = crate::config::Config::global();\n        let api_key: String = config\n            .get_secret(\"LITELLM_API_KEY\")\n            .unwrap_or_else(|_| String::new());\n        let host: String = config",
      "description": null
    },
    {
      "key": "LITELLM_CUSTOM_HEADERS",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 43,
      "context": ".unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"LITELLM_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"LITELLM_CUSTOM_HEADERS\"))\n            .ok()",
      "description": null
    },
    {
      "key": "GOOSE_EMBEDDING_MODEL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 229,
      "context": "impl EmbeddingCapable for LiteLLMProvider {\n    async fn create_embeddings(&self, texts: Vec<String>) -> Result<Vec<Vec<f32>>, anyhow::Error> {\n        let embedding_model = std::env::var(\"GOOSE_EMBEDDING_MODEL\")\n            .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());",
      "description": null
    },
    {
      "key": "LITELLM_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 34,
      "context": "let config = crate::config::Config::global();\n        let api_key: String = config\n            .get_secret(\"LITELLM_API_KEY\")\n            .unwrap_or_else(|_| String::new());\n        let host: String = config",
      "description": null
    },
    {
      "key": "LITELLM_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 37,
      "context": ".unwrap_or_else(|_| String::new());\n        let host: String = config\n            .get_param(\"LITELLM_HOST\")\n            .unwrap_or_else(|_| \"https://api.litellm.ai\".to_string());\n        let base_path: String = config",
      "description": null
    },
    {
      "key": "LITELLM_BASE_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 40,
      "context": ".unwrap_or_else(|_| \"https://api.litellm.ai\".to_string());\n        let base_path: String = config\n            .get_param(\"LITELLM_BASE_PATH\")\n            .unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let custom_headers: Option<HashMap<String, String>> = config",
      "description": null
    },
    {
      "key": "LITELLM_CUSTOM_HEADERS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 43,
      "context": ".unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"LITELLM_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"LITELLM_CUSTOM_HEADERS\"))\n            .ok()",
      "description": null
    },
    {
      "key": "LITELLM_TIMEOUT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 47,
      "context": ".ok()\n            .map(parse_custom_headers);\n        let timeout_secs: u64 = config.get_param(\"LITELLM_TIMEOUT\").unwrap_or(600);\n\n        let auth = if api_key.is_empty() {",
      "description": null
    },
    {
      "key": "GOOSE_EMBEDDING_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/litellm.rs",
      "line_number": 229,
      "context": "impl EmbeddingCapable for LiteLLMProvider {\n    async fn create_embeddings(&self, texts: Vec<String>) -> Result<Vec<Vec<f32>>, anyhow::Error> {\n        let embedding_model = std::env::var(\"GOOSE_EMBEDDING_MODEL\")\n            .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());",
      "description": null
    },
    {
      "key": "INVALID_ARGUMENT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/utils.rs",
      "line_number": 230,
      "context": "error_msg = error.get(\"message\").and_then(|m| m.as_str()).unwrap_or(\"Unknown error\").to_string();\n                    let error_status = error.get(\"status\").and_then(|s| s.as_str()).unwrap_or(\"Unknown status\");\n                    if error_status == \"INVALID_ARGUMENT\" && error_msg.to_lowercase().contains(\"exceeds\") {\n                        return Err(ProviderError::ContextLengthExceeded(error_msg.to_string()));\n                    }",
      "description": null
    },
    {
      "key": "OPENAI_ORGANIZATION",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 68,
      "context": ".get_param(\"OPENAI_BASE_PATH\")\n            .unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();\n        let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config",
      "description": null
    },
    {
      "key": "OPENAI_PROJECT",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 69,
      "context": ".unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();\n        let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"OPENAI_CUSTOM_HEADERS\")",
      "description": null
    },
    {
      "key": "OPENAI_CUSTOM_HEADERS",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 72,
      "context": "let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"OPENAI_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"OPENAI_CUSTOM_HEADERS\"))\n            .ok()\n            .map(parse_custom_headers);",
      "description": null
    },
    {
      "key": "OPENAI_TIMEOUT",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 75,
      "context": ".ok()\n            .map(parse_custom_headers);\n        let timeout_secs: u64 = config.get_param(\"OPENAI_TIMEOUT\").unwrap_or(600);\n\n        let auth = AuthMethod::BearerToken(api_key);",
      "description": null
    },
    {
      "key": "OPENAI_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 63,
      "context": "let api_key: String = config.get_secret(\"OPENAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENAI_HOST\")\n            .unwrap_or_else(|_| \"https://api.openai.com\".to_string());\n        let base_path: String = config",
      "description": null
    },
    {
      "key": "OPENAI_BASE_PATH",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 66,
      "context": ".unwrap_or_else(|_| \"https://api.openai.com\".to_string());\n        let base_path: String = config\n            .get_param(\"OPENAI_BASE_PATH\")\n            .unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();",
      "description": null
    },
    {
      "key": "OPENAI_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 61,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"OPENAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENAI_HOST\")",
      "description": null
    },
    {
      "key": "OPENAI_CUSTOM_HEADERS",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 71,
      "context": "let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"OPENAI_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"OPENAI_CUSTOM_HEADERS\"))\n            .ok()",
      "description": null
    },
    {
      "key": "GOOSE_EMBEDDING_MODEL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 268,
      "context": "}\n\n        let embedding_model = std::env::var(\"GOOSE_EMBEDDING_MODEL\")\n            .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());",
      "description": null
    },
    {
      "key": "OPENAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 61,
      "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"OPENAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENAI_HOST\")",
      "description": null
    },
    {
      "key": "OPENAI_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 63,
      "context": "let api_key: String = config.get_secret(\"OPENAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENAI_HOST\")\n            .unwrap_or_else(|_| \"https://api.openai.com\".to_string());\n        let base_path: String = config",
      "description": null
    },
    {
      "key": "OPENAI_BASE_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 66,
      "context": ".unwrap_or_else(|_| \"https://api.openai.com\".to_string());\n        let base_path: String = config\n            .get_param(\"OPENAI_BASE_PATH\")\n            .unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();",
      "description": null
    },
    {
      "key": "OPENAI_ORGANIZATION",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 68,
      "context": ".get_param(\"OPENAI_BASE_PATH\")\n            .unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();\n        let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config",
      "description": null
    },
    {
      "key": "OPENAI_PROJECT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 69,
      "context": ".unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();\n        let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"OPENAI_CUSTOM_HEADERS\")",
      "description": null
    },
    {
      "key": "OPENAI_CUSTOM_HEADERS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 71,
      "context": "let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"OPENAI_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"OPENAI_CUSTOM_HEADERS\"))\n            .ok()",
      "description": null
    },
    {
      "key": "OPENAI_TIMEOUT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 75,
      "context": ".ok()\n            .map(parse_custom_headers);\n        let timeout_secs: u64 = config.get_param(\"OPENAI_TIMEOUT\").unwrap_or(600);\n\n        let auth = AuthMethod::BearerToken(api_key);",
      "description": null
    },
    {
      "key": "GOOSE_EMBEDDING_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/openai.rs",
      "line_number": 268,
      "context": "}\n\n        let embedding_model = std::env::var(\"GOOSE_EMBEDDING_MODEL\")\n            .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());",
      "description": null
    },
    {
      "key": "VENICE_HOST",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/venice.rs",
      "line_number": 90,
      "context": "let api_key: String = config.get_secret(\"VENICE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"VENICE_HOST\")\n            .unwrap_or_else(|_| VENICE_DEFAULT_HOST.to_string());\n        let base_path: String = config",
      "description": null
    },
    {
      "key": "VENICE_BASE_PATH",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/venice.rs",
      "line_number": 93,
      "context": ".unwrap_or_else(|_| VENICE_DEFAULT_HOST.to_string());\n        let base_path: String = config\n            .get_param(\"VENICE_BASE_PATH\")\n            .unwrap_or_else(|_| VENICE_DEFAULT_BASE_PATH.to_string());\n        let models_path: String = config",
      "description": null
    },
    {
      "key": "VENICE_MODELS_PATH",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/providers/venice.rs",
      "line_number": 96,
      "context": ".unwrap_or_else(|_| VENICE_DEFAULT_BASE_PATH.to_string());\n        let models_path: String = config\n            .get_param(\"VENICE_MODELS_PATH\")\n            .unwrap_or_else(|_| VENICE_DEFAULT_MODELS_PATH.to_string());",
      "description": null
    },
    {
      "key": "VENICE_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose/src/providers/venice.rs",
      "line_number": 88,
      "context": "pub fn from_env(mut model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"VENICE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"VENICE_HOST\")",
      "description": null
    },
    {
      "key": "VENICE_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/venice.rs",
      "line_number": 88,
      "context": "pub fn from_env(mut model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"VENICE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"VENICE_HOST\")",
      "description": null
    },
    {
      "key": "VENICE_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/venice.rs",
      "line_number": 90,
      "context": "let api_key: String = config.get_secret(\"VENICE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"VENICE_HOST\")\n            .unwrap_or_else(|_| VENICE_DEFAULT_HOST.to_string());\n        let base_path: String = config",
      "description": null
    },
    {
      "key": "VENICE_BASE_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/venice.rs",
      "line_number": 93,
      "context": ".unwrap_or_else(|_| VENICE_DEFAULT_HOST.to_string());\n        let base_path: String = config\n            .get_param(\"VENICE_BASE_PATH\")\n            .unwrap_or_else(|_| VENICE_DEFAULT_BASE_PATH.to_string());\n        let models_path: String = config",
      "description": null
    },
    {
      "key": "VENICE_MODELS_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/venice.rs",
      "line_number": 96,
      "context": ".unwrap_or_else(|_| VENICE_DEFAULT_BASE_PATH.to_string());\n        let models_path: String = config\n            .get_param(\"VENICE_MODELS_PATH\")\n            .unwrap_or_else(|_| VENICE_DEFAULT_MODELS_PATH.to_string());",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/agents/prompt_manager.rs",
      "line_number": 141,
      "context": "let mut system_prompt_extras = self.system_prompt_extras.clone();\n        let config = Config::global();\n        let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n        if goose_mode == \"chat\" {\n            system_prompt_extras.push(",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/prompt_manager.rs",
      "line_number": 141,
      "context": "let mut system_prompt_extras = self.system_prompt_extras.clone();\n        let config = Config::global();\n        let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n        if goose_mode == \"chat\" {\n            system_prompt_extras.push(",
      "description": null
    },
    {
      "key": "1=1",
      "usage_type": "config_delete",
      "method": "config_delete",
      "file_path": "crates/goose/src/agents/tool_vectordb.rs",
      "line_number": 165,
      "context": "// Delete all records instead of dropping the table\n                table\n                    .delete(\"1=1\") // This will match all records\n                    .await\n                    .context(\"Failed to delete all records\")?;",
      "description": null
    },
    {
      "key": "GOOSE_VECTOR_DB_PATH",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/agents/tool_vectordb.rs",
      "line_number": 554,
      "context": "let custom_path = temp_dir.path().join(\"custom_vector_db\");\n\n        env::set_var(\"GOOSE_VECTOR_DB_PATH\", custom_path.to_str().unwrap());\n\n        let db_path = ToolVectorDB::get_db_path()?;",
      "description": null
    },
    {
      "key": "GOOSE_VECTOR_DB_PATH",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/agents/tool_vectordb.rs",
      "line_number": 559,
      "context": "assert_eq!(db_path, custom_path);\n\n        env::remove_var(\"GOOSE_VECTOR_DB_PATH\");\n        Ok(())\n    }",
      "description": null
    },
    {
      "key": "GOOSE_VECTOR_DB_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/tool_vectordb.rs",
      "line_number": 62,
      "context": "// Check for custom database path override\n        if let Ok(custom_path) = config.get_param::<String>(\"GOOSE_VECTOR_DB_PATH\") {\n            let path = PathBuf::from(custom_path);",
      "description": null
    },
    {
      "key": "GOOSE_ROUTER_TOOL_SELECTION_STRATEGY",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/agents/tool_route_manager.rs",
      "line_number": 78,
      "context": "let config = Config::global();\n        let router_tool_selection_strategy = config\n            .get_param(\"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\")\n            .unwrap_or_else(|_| \"default\".to_string());",
      "description": null
    },
    {
      "key": "GOOSE_ROUTER_TOOL_SELECTION_STRATEGY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/tool_route_manager.rs",
      "line_number": 78,
      "context": "let config = Config::global();\n        let router_tool_selection_strategy = config\n            .get_param(\"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\")\n            .unwrap_or_else(|_| \"default\".to_string());",
      "description": null
    },
    {
      "key": "GOOSE_SUBAGENT_MAX_TURNS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/subagent_task_config.rs",
      "line_number": 11,
      "context": "/// Environment variable name for configuring max turns\npub const GOOSE_SUBAGENT_MAX_TURNS_ENV_VAR: &str = \"GOOSE_SUBAGENT_MAX_TURNS\";\n\n/// Configuration for task execution with all necessary dependencies",
      "description": null
    },
    {
      "key": "GOOSE_EMBEDDING_MODEL_PROVIDER",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/agents/router_tool_selector.rs",
      "line_number": 45,
      "context": "let vector_db = ToolVectorDB::new(Some(table_name)).await?;\n\n        let embedding_provider = if env::var(\"GOOSE_EMBEDDING_MODEL_PROVIDER\").is_ok() {\n            // If env var is set, create a new provider for embeddings\n            // Get embedding model and provider from environment variables",
      "description": null
    },
    {
      "key": "GOOSE_EMBEDDING_MODEL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/agents/router_tool_selector.rs",
      "line_number": 48,
      "context": "// If env var is set, create a new provider for embeddings\n            // Get embedding model and provider from environment variables\n            let embedding_model = env::var(\"GOOSE_EMBEDDING_MODEL\")\n                .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());\n            let embedding_provider_name =",
      "description": null
    },
    {
      "key": "GOOSE_EMBEDDING_MODEL_PROVIDER",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose/src/agents/router_tool_selector.rs",
      "line_number": 45,
      "context": "let vector_db = ToolVectorDB::new(Some(table_name)).await?;\n\n        let embedding_provider = if env::var(\"GOOSE_EMBEDDING_MODEL_PROVIDER\").is_ok() {\n            // If env var is set, create a new provider for embeddings\n            // Get embedding model and provider from environment variables",
      "description": null
    },
    {
      "key": "GOOSE_EMBEDDING_MODEL_PROVIDER",
      "usage_type": "env_var_unwrap",
      "method": "env_var_unwrap",
      "file_path": "crates/goose/src/agents/router_tool_selector.rs",
      "line_number": 51,
      "context": ".unwrap_or_else(|_| \"text-embedding-3-small\".to_string());\n            let embedding_provider_name =\n                env::var(\"GOOSE_EMBEDDING_MODEL_PROVIDER\").unwrap_or_else(|_| \"openai\".to_string());\n\n            // Create the provider using the factory",
      "description": null
    },
    {
      "key": "GOOSE_EMBEDDING_MODEL_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/router_tool_selector.rs",
      "line_number": 45,
      "context": "let vector_db = ToolVectorDB::new(Some(table_name)).await?;\n\n        let embedding_provider = if env::var(\"GOOSE_EMBEDDING_MODEL_PROVIDER\").is_ok() {\n            // If env var is set, create a new provider for embeddings\n            // Get embedding model and provider from environment variables",
      "description": null
    },
    {
      "key": "GOOSE_EMBEDDING_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/router_tool_selector.rs",
      "line_number": 48,
      "context": "// If env var is set, create a new provider for embeddings\n            // Get embedding model and provider from environment variables\n            let embedding_model = env::var(\"GOOSE_EMBEDDING_MODEL\")\n                .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());\n            let embedding_provider_name =",
      "description": null
    },
    {
      "key": "GOOSE_MAX_TURNS",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/agents/agent.rs",
      "line_number": 884,
      "context": ".and_then(|s| s.max_turns)\n                .unwrap_or_else(|| {\n                    config.get_param(\"GOOSE_MAX_TURNS\").unwrap_or(DEFAULT_MAX_TURNS)\n                });",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/agents/agent.rs",
      "line_number": 1150,
      "context": "Some(\"background\") => \"auto\".to_string(),\n            _ => config\n                .get_param(\"GOOSE_MODE\")\n                .unwrap_or_else(|_| \"auto\".to_string()),\n        }",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose/src/agents/agent.rs",
      "line_number": 1370,
      "context": "let config = Config::global();\n        let provider_name: String = config\n            .get_param(\"GOOSE_PROVIDER\")\n            .expect(\"No provider configured. Run 'goose configure' first\");",
      "description": null
    },
    {
      "key": "USER",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/agents/agent.rs",
      "line_number": 1360,
      "context": "let author = Author {\n            contact: std::env::var(\"USER\")\n                .or_else(|_| std::env::var(\"USERNAME\"))\n                .ok(),",
      "description": null
    },
    {
      "key": "USERNAME",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/agents/agent.rs",
      "line_number": 1361,
      "context": "let author = Author {\n            contact: std::env::var(\"USER\")\n                .or_else(|_| std::env::var(\"USERNAME\"))\n                .ok(),\n            metadata: None,",
      "description": null
    },
    {
      "key": "GOOSE_MAX_TURNS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/agent.rs",
      "line_number": 884,
      "context": ".and_then(|s| s.max_turns)\n                .unwrap_or_else(|| {\n                    config.get_param(\"GOOSE_MAX_TURNS\").unwrap_or(DEFAULT_MAX_TURNS)\n                });",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/agent.rs",
      "line_number": 1150,
      "context": "Some(\"background\") => \"auto\".to_string(),\n            _ => config\n                .get_param(\"GOOSE_MODE\")\n                .unwrap_or_else(|_| \"auto\".to_string()),\n        }",
      "description": null
    },
    {
      "key": "USER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/agent.rs",
      "line_number": 1360,
      "context": "let author = Author {\n            contact: std::env::var(\"USER\")\n                .or_else(|_| std::env::var(\"USERNAME\"))\n                .ok(),",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/agent.rs",
      "line_number": 1370,
      "context": "let config = Config::global();\n        let provider_name: String = config\n            .get_param(\"GOOSE_PROVIDER\")\n            .expect(\"No provider configured. Run 'goose configure' first\");",
      "description": null
    },
    {
      "key": "PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 68,
      "context": "const DISALLOWED_KEYS: [&'static str; 31] = [\n        // \ud83d\udd27 Binary path manipulation\n        \"PATH\",       // Controls executable lookup paths \u2014 critical for command hijacking\n        \"PATHEXT\",    // Windows: Determines recognized executable extensions (e.g., .exe, .bat)\n        \"SystemRoot\", // Windows: Can affect system DLL resolution (e.g., `kernel32.dll`)",
      "description": null
    },
    {
      "key": "LD_LIBRARY_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 73,
      "context": "\"windir\",     // Windows: Alternative to SystemRoot (used in legacy apps)\n        // \ud83e\uddec Dynamic linker hijacking (Linux/macOS)\n        \"LD_LIBRARY_PATH\",  // Alters shared library resolution\n        \"LD_PRELOAD\",       // Forces preloading of shared libraries \u2014 common attack vector\n        \"LD_AUDIT\",         // Loads a monitoring library that can intercept execution",
      "description": null
    },
    {
      "key": "LD_PRELOAD",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 74,
      "context": "// \ud83e\uddec Dynamic linker hijacking (Linux/macOS)\n        \"LD_LIBRARY_PATH\",  // Alters shared library resolution\n        \"LD_PRELOAD\",       // Forces preloading of shared libraries \u2014 common attack vector\n        \"LD_AUDIT\",         // Loads a monitoring library that can intercept execution\n        \"LD_DEBUG\",         // Enables verbose linker logging (information disclosure risk)",
      "description": null
    },
    {
      "key": "LD_AUDIT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 75,
      "context": "\"LD_LIBRARY_PATH\",  // Alters shared library resolution\n        \"LD_PRELOAD\",       // Forces preloading of shared libraries \u2014 common attack vector\n        \"LD_AUDIT\",         // Loads a monitoring library that can intercept execution\n        \"LD_DEBUG\",         // Enables verbose linker logging (information disclosure risk)\n        \"LD_BIND_NOW\",      // Forces immediate symbol resolution, affecting ASLR",
      "description": null
    },
    {
      "key": "LD_DEBUG",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 76,
      "context": "\"LD_PRELOAD\",       // Forces preloading of shared libraries \u2014 common attack vector\n        \"LD_AUDIT\",         // Loads a monitoring library that can intercept execution\n        \"LD_DEBUG\",         // Enables verbose linker logging (information disclosure risk)\n        \"LD_BIND_NOW\",      // Forces immediate symbol resolution, affecting ASLR\n        \"LD_ASSUME_KERNEL\", // Tricks linker into thinking it's running on an older kernel",
      "description": null
    },
    {
      "key": "LD_BIND_NOW",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 77,
      "context": "\"LD_AUDIT\",         // Loads a monitoring library that can intercept execution\n        \"LD_DEBUG\",         // Enables verbose linker logging (information disclosure risk)\n        \"LD_BIND_NOW\",      // Forces immediate symbol resolution, affecting ASLR\n        \"LD_ASSUME_KERNEL\", // Tricks linker into thinking it's running on an older kernel\n        // \ud83c\udf4e macOS dynamic linker variables",
      "description": null
    },
    {
      "key": "LD_ASSUME_KERNEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 78,
      "context": "\"LD_DEBUG\",         // Enables verbose linker logging (information disclosure risk)\n        \"LD_BIND_NOW\",      // Forces immediate symbol resolution, affecting ASLR\n        \"LD_ASSUME_KERNEL\", // Tricks linker into thinking it's running on an older kernel\n        // \ud83c\udf4e macOS dynamic linker variables\n        \"DYLD_LIBRARY_PATH\",     // Same as LD_LIBRARY_PATH but for macOS",
      "description": null
    },
    {
      "key": "DYLD_LIBRARY_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 80,
      "context": "\"LD_ASSUME_KERNEL\", // Tricks linker into thinking it's running on an older kernel\n        // \ud83c\udf4e macOS dynamic linker variables\n        \"DYLD_LIBRARY_PATH\",     // Same as LD_LIBRARY_PATH but for macOS\n        \"DYLD_INSERT_LIBRARIES\", // macOS equivalent of LD_PRELOAD\n        \"DYLD_FRAMEWORK_PATH\",   // Overrides framework lookup paths",
      "description": null
    },
    {
      "key": "DYLD_INSERT_LIBRARIES",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 81,
      "context": "// \ud83c\udf4e macOS dynamic linker variables\n        \"DYLD_LIBRARY_PATH\",     // Same as LD_LIBRARY_PATH but for macOS\n        \"DYLD_INSERT_LIBRARIES\", // macOS equivalent of LD_PRELOAD\n        \"DYLD_FRAMEWORK_PATH\",   // Overrides framework lookup paths\n        // \ud83d\udc0d Python / Node / Ruby / Java / Golang hijacking",
      "description": null
    },
    {
      "key": "DYLD_FRAMEWORK_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 82,
      "context": "\"DYLD_LIBRARY_PATH\",     // Same as LD_LIBRARY_PATH but for macOS\n        \"DYLD_INSERT_LIBRARIES\", // macOS equivalent of LD_PRELOAD\n        \"DYLD_FRAMEWORK_PATH\",   // Overrides framework lookup paths\n        // \ud83d\udc0d Python / Node / Ruby / Java / Golang hijacking\n        \"PYTHONPATH\",   // Overrides Python module resolution",
      "description": null
    },
    {
      "key": "NODE_OPTIONS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 86,
      "context": "\"PYTHONPATH\",   // Overrides Python module resolution\n        \"PYTHONHOME\",   // Overrides Python root directory\n        \"NODE_OPTIONS\", // Injects options/scripts into every Node.js process\n        \"RUBYOPT\",      // Injects Ruby execution flags\n        \"GEM_PATH\",     // Alters where RubyGems looks for installed packages",
      "description": null
    },
    {
      "key": "GEM_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 88,
      "context": "\"NODE_OPTIONS\", // Injects options/scripts into every Node.js process\n        \"RUBYOPT\",      // Injects Ruby execution flags\n        \"GEM_PATH\",     // Alters where RubyGems looks for installed packages\n        \"GEM_HOME\",     // Changes RubyGems default install location\n        \"CLASSPATH\",    // Java: Controls where classes are loaded from \u2014 critical for RCE attacks",
      "description": null
    },
    {
      "key": "GEM_HOME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 89,
      "context": "\"RUBYOPT\",      // Injects Ruby execution flags\n        \"GEM_PATH\",     // Alters where RubyGems looks for installed packages\n        \"GEM_HOME\",     // Changes RubyGems default install location\n        \"CLASSPATH\",    // Java: Controls where classes are loaded from \u2014 critical for RCE attacks\n        \"GO111MODULE\",  // Go: Forces use of module proxy or disables it",
      "description": null
    },
    {
      "key": "APPINIT_DLLS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 94,
      "context": "\"GOROOT\", // Go: Changes root installation directory (could lead to execution hijacking)\n        // \ud83d\udda5\ufe0f Windows-specific process & DLL hijacking\n        \"APPINIT_DLLS\", // Forces Windows to load a DLL into every process\n        \"SESSIONNAME\",  // Affects Windows session configuration\n        \"ComSpec\",      // Determines default command interpreter (can replace `cmd.exe`)",
      "description": null
    },
    {
      "key": "TEMP",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 97,
      "context": "\"SESSIONNAME\",  // Affects Windows session configuration\n        \"ComSpec\",      // Determines default command interpreter (can replace `cmd.exe`)\n        \"TEMP\",\n        \"TMP\",          // Redirects temporary file storage (useful for injection attacks)\n        \"LOCALAPPDATA\", // Controls application data paths (can be abused for persistence)",
      "description": null
    },
    {
      "key": "TMP",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/extension.rs",
      "line_number": 98,
      "context": "\"ComSpec\",      // Determines default command interpreter (can replace `cmd.exe`)\n        \"TEMP\",\n        \"TMP\",          // Redirects temporary file storage (useful for injection attacks)\n        \"LOCALAPPDATA\", // Controls application data paths (can be abused for persistence)\n        \"USERPROFILE\",  // Windows user directory (can affect profile-based execution paths)",
      "description": null
    },
    {
      "key": "GOOSE_RECIPE_RETRY_TIMEOUT_SECONDS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/retry.rs",
      "line_number": 32,
      "context": "/// Environment variable for configuring retry timeout globally\nconst GOOSE_RECIPE_RETRY_TIMEOUT_SECONDS: &str = \"GOOSE_RECIPE_RETRY_TIMEOUT_SECONDS\";\n\n/// Environment variable for configuring on_failure timeout globally",
      "description": null
    },
    {
      "key": "GOOSE_RECIPE_ON_FAILURE_TIMEOUT_SECONDS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/agents/retry.rs",
      "line_number": 35,
      "context": "/// Environment variable for configuring on_failure timeout globally\nconst GOOSE_RECIPE_ON_FAILURE_TIMEOUT_SECONDS: &str = \"GOOSE_RECIPE_ON_FAILURE_TIMEOUT_SECONDS\";\n\n/// Manages retry state and operations for agent execution",
      "description": null
    },
    {
      "key": "GOOSE_AUTO_COMPACT_THRESHOLD",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/context_mgmt/auto_compact.rs",
      "line_number": 546,
      "context": "let config = Config::global();\n        config\n            .set_param(\"GOOSE_AUTO_COMPACT_THRESHOLD\", serde_json::Value::from(0.1))\n            .unwrap();",
      "description": null
    },
    {
      "key": "GOOSE_AUTO_COMPACT_THRESHOLD",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/context_mgmt/auto_compact.rs",
      "line_number": 70,
      "context": "let threshold = threshold_override.unwrap_or_else(|| {\n        config\n            .get_param::<f64>(\"GOOSE_AUTO_COMPACT_THRESHOLD\")\n            .unwrap_or(0.3) // Default to 30%\n    });",
      "description": null
    },
    {
      "key": "REQUEST_CHANGES",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/formats/google.rs",
      "line_number": 557,
      "context": "\"event\": {\n                    \"description\": \"Review action to perform\",\n                    \"enum\": [\"APPROVE\", \"REQUEST_CHANGES\", \"COMMENT\"],\n                    \"type\": \"string\"\n                },",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/formats/databricks.rs",
      "line_number": 560,
      "context": "// Add thinking parameters for Claude 3.7 Sonnet model when requested\n    let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n    if is_claude_sonnet && is_thinking_enabled {\n        // Minimum budget_tokens is 1024",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_BUDGET",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/formats/databricks.rs",
      "line_number": 563,
      "context": "if is_claude_sonnet && is_thinking_enabled {\n        // Minimum budget_tokens is 1024\n        let budget_tokens = std::env::var(\"CLAUDE_THINKING_BUDGET\")\n            .unwrap_or_else(|_| \"16000\".to_string())\n            .parse()",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose/src/providers/formats/databricks.rs",
      "line_number": 560,
      "context": "// Add thinking parameters for Claude 3.7 Sonnet model when requested\n    let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n    if is_claude_sonnet && is_thinking_enabled {\n        // Minimum budget_tokens is 1024",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/formats/databricks.rs",
      "line_number": 560,
      "context": "// Add thinking parameters for Claude 3.7 Sonnet model when requested\n    let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n    if is_claude_sonnet && is_thinking_enabled {\n        // Minimum budget_tokens is 1024",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_BUDGET",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/formats/databricks.rs",
      "line_number": 563,
      "context": "if is_claude_sonnet && is_thinking_enabled {\n        // Minimum budget_tokens is 1024\n        let budget_tokens = std::env::var(\"CLAUDE_THINKING_BUDGET\")\n            .unwrap_or_else(|_| \"16000\".to_string())\n            .parse()",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/formats/anthropic.rs",
      "line_number": 416,
      "context": "// Add thinking parameters for claude-3-7-sonnet model\n    let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n    if model_config.model_name.starts_with(\"claude-3-7-sonnet-\") && is_thinking_enabled {\n        // Minimum budget_tokens is 1024",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_BUDGET",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose/src/providers/formats/anthropic.rs",
      "line_number": 419,
      "context": "if model_config.model_name.starts_with(\"claude-3-7-sonnet-\") && is_thinking_enabled {\n        // Minimum budget_tokens is 1024\n        let budget_tokens = std::env::var(\"CLAUDE_THINKING_BUDGET\")\n            .unwrap_or_else(|_| \"16000\".to_string())\n            .parse()",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose/src/providers/formats/anthropic.rs",
      "line_number": 915,
      "context": "#[test]\n    fn test_create_request_with_thinking() -> Result<()> {\n        let original_value = std::env::var(\"CLAUDE_THINKING_ENABLED\").ok();\n        std::env::set_var(\"CLAUDE_THINKING_ENABLED\", \"true\");",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose/src/providers/formats/anthropic.rs",
      "line_number": 416,
      "context": "// Add thinking parameters for claude-3-7-sonnet model\n    let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n    if model_config.model_name.starts_with(\"claude-3-7-sonnet-\") && is_thinking_enabled {\n        // Minimum budget_tokens is 1024",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose/src/providers/formats/anthropic.rs",
      "line_number": 916,
      "context": "fn test_create_request_with_thinking() -> Result<()> {\n        let original_value = std::env::var(\"CLAUDE_THINKING_ENABLED\").ok();\n        std::env::set_var(\"CLAUDE_THINKING_ENABLED\", \"true\");\n\n        let result = (|| {",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose/src/providers/formats/anthropic.rs",
      "line_number": 945,
      "context": "match original_value {\n            Some(val) => std::env::set_var(\"CLAUDE_THINKING_ENABLED\", val),\n            None => std::env::remove_var(\"CLAUDE_THINKING_ENABLED\"),\n        }",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_ENABLED",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/formats/anthropic.rs",
      "line_number": 416,
      "context": "// Add thinking parameters for claude-3-7-sonnet model\n    let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n    if model_config.model_name.starts_with(\"claude-3-7-sonnet-\") && is_thinking_enabled {\n        // Minimum budget_tokens is 1024",
      "description": null
    },
    {
      "key": "CLAUDE_THINKING_BUDGET",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/providers/formats/anthropic.rs",
      "line_number": 419,
      "context": "if model_config.model_name.starts_with(\"claude-3-7-sonnet-\") && is_thinking_enabled {\n        // Minimum budget_tokens is 1024\n        let budget_tokens = std::env::var(\"CLAUDE_THINKING_BUDGET\")\n            .unwrap_or_else(|_| \"16000\".to_string())\n            .parse()",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/signup_openrouter/mod.rs",
      "line_number": 169,
      "context": "pub fn configure_openrouter(config: &Config, api_key: String) -> Result<()> {\n    config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(\n        \"GOOSE_MODEL\",",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose/src/config/signup_openrouter/mod.rs",
      "line_number": 170,
      "context": "config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(\n        \"GOOSE_MODEL\",\n        Value::String(OPENROUTER_DEFAULT_MODEL.to_string()),",
      "description": null
    },
    {
      "key": "OPENROUTER_API_KEY",
      "usage_type": "secret_set",
      "method": "secret_set",
      "file_path": "crates/goose/src/config/signup_openrouter/mod.rs",
      "line_number": 168,
      "context": "pub fn configure_openrouter(config: &Config, api_key: String) -> Result<()> {\n    config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(",
      "description": null
    },
    {
      "key": "OPENROUTER_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/config/signup_openrouter/mod.rs",
      "line_number": 168,
      "context": "pub fn configure_openrouter(config: &Config, api_key: String) -> Result<()> {\n    config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/config/signup_openrouter/mod.rs",
      "line_number": 169,
      "context": "pub fn configure_openrouter(config: &Config, api_key: String) -> Result<()> {\n    config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(\n        \"GOOSE_MODEL\",",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose/src/config/signup_openrouter/mod.rs",
      "line_number": 171,
      "context": "config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(\n        \"GOOSE_MODEL\",\n        Value::String(OPENROUTER_DEFAULT_MODEL.to_string()),\n    )?;",
      "description": null
    },
    {
      "key": "CARGO_PKG_VERSION",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/mcp-client/src/client.rs",
      "line_number": 131,
      "context": "client_info: Implementation {\n                name: \"goose\".to_string(),\n                version: env!(\"CARGO_PKG_VERSION\").to_owned(),\n            },\n        }",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-bench/src/runners/model_runner.rs",
      "line_number": 78,
      "context": "envs.extend(env_vars);\n        }\n        envs.push((\"GOOSE_MODEL\".to_string(), model.clone().name));\n        envs.push((\"GOOSE_PROVIDER\".to_string(), model.clone().provider));",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-bench/src/runners/model_runner.rs",
      "line_number": 79,
      "context": "}\n        envs.push((\"GOOSE_MODEL\".to_string(), model.clone().name));\n        envs.push((\"GOOSE_PROVIDER\".to_string(), model.clone().provider));\n\n        // Only run in parallel if the model is parallel_safe",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-bench/src/runners/model_runner.rs",
      "line_number": 227,
      "context": "if let Some(shim_opt) = &model.tool_shim {\n                if shim_opt.use_tool_shim {\n                    shim_envs.push((\"GOOSE_TOOLSHIM\".to_string(), \"true\".to_string()));\n                    if let Some(shim_model) = &shim_opt.tool_shim_model {\n                        shim_envs.push((",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM_OLLAMA_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-bench/src/runners/model_runner.rs",
      "line_number": 230,
      "context": "if let Some(shim_model) = &shim_opt.tool_shim_model {\n                        shim_envs.push((\n                            \"GOOSE_TOOLSHIM_OLLAMA_MODEL\".to_string(),\n                            shim_model.clone(),\n                        ));",
      "description": null
    },
    {
      "key": "USERPROFILE",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/developer/shell.rs",
      "line_number": 79,
      "context": "let with_userprofile = path_str.replace(\n            \"%USERPROFILE%\",\n            &env::var(\"USERPROFILE\").unwrap_or_default(),\n        );\n        // Add more Windows environment variables as needed",
      "description": null
    },
    {
      "key": "APPDATA",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/developer/shell.rs",
      "line_number": 82,
      "context": ");\n        // Add more Windows environment variables as needed\n        with_userprofile.replace(\"%APPDATA%\", &env::var(\"APPDATA\").unwrap_or_default())\n    } else {\n        // Unix-style expansion",
      "description": null
    },
    {
      "key": "USERPROFILE",
      "usage_type": "env_var_unwrap",
      "method": "env_var_unwrap",
      "file_path": "crates/goose-mcp/src/developer/shell.rs",
      "line_number": 79,
      "context": "let with_userprofile = path_str.replace(\n            \"%USERPROFILE%\",\n            &env::var(\"USERPROFILE\").unwrap_or_default(),\n        );\n        // Add more Windows environment variables as needed",
      "description": null
    },
    {
      "key": "APPDATA",
      "usage_type": "env_var_unwrap",
      "method": "env_var_unwrap",
      "file_path": "crates/goose-mcp/src/developer/shell.rs",
      "line_number": 82,
      "context": ");\n        // Add more Windows environment variables as needed\n        with_userprofile.replace(\"%APPDATA%\", &env::var(\"APPDATA\").unwrap_or_default())\n    } else {\n        // Unix-style expansion",
      "description": null
    },
    {
      "key": "CONTEXT_FILE_NAMES",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/developer/mod.rs",
      "line_number": 406,
      "context": "};\n\n        let hints_filenames: Vec<String> = std::env::var(\"CONTEXT_FILE_NAMES\")\n            .ok()\n            .and_then(|s| serde_json::from_str(&s).ok())",
      "description": null
    },
    {
      "key": "CONTEXT_FILE_NAMES",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-mcp/src/developer/mod.rs",
      "line_number": 1714,
      "context": "let dir = TempDir::new().unwrap();\n        std::env::set_current_dir(dir.path()).unwrap();\n        std::env::set_var(\"CONTEXT_FILE_NAMES\", r#\"[\"CLAUDE.md\", \".goosehints\"]\"#);\n\n        fs::write(\"CLAUDE.md\", \"Custom hints file content from CLAUDE.md\").unwrap();",
      "description": null
    },
    {
      "key": "CONTEXT_FILE_NAMES",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose-mcp/src/developer/mod.rs",
      "line_number": 1723,
      "context": "assert!(instructions.contains(\"Custom hints file content from CLAUDE.md\"));\n        assert!(instructions.contains(\"Custom hints file content from .goosehints\"));\n        std::env::remove_var(\"CONTEXT_FILE_NAMES\");\n    }",
      "description": null
    },
    {
      "key": "CONTEXT_FILE_NAMES",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/developer/mod.rs",
      "line_number": 406,
      "context": "};\n\n        let hints_filenames: Vec<String> = std::env::var(\"CONTEXT_FILE_NAMES\")\n            .ok()\n            .and_then(|s| serde_json::from_str(&s).ok())",
      "description": null
    },
    {
      "key": "GOOSE_WORKING_DIR",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/memory/mod.rs",
      "line_number": 228,
      "context": "// Check for .goose/memory in current directory\n        let local_memory_dir = std::env::var(\"GOOSE_WORKING_DIR\")\n            .map(PathBuf::from)\n            .unwrap_or_else(|_| std::env::current_dir().unwrap())",
      "description": null
    },
    {
      "key": "GOOSE_WORKING_DIR",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/memory/mod.rs",
      "line_number": 228,
      "context": "// Check for .goose/memory in current directory\n        let local_memory_dir = std::env::var(\"GOOSE_WORKING_DIR\")\n            .map(PathBuf::from)\n            .unwrap_or_else(|_| std::env::current_dir().unwrap())",
      "description": null
    },
    {
      "key": "CARGO_MANIFEST_DIR",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/computercontroller/pdf_tool.rs",
      "line_number": 333,
      "context": "#[tokio::test]\n    async fn test_pdf_text_extraction() {\n        let test_pdf_path = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"))\n            .join(\"src/computercontroller/tests/data/test.pdf\");\n        let cache_dir = tempfile::tempdir().unwrap().into_path();",
      "description": null
    },
    {
      "key": "CARGO_MANIFEST_DIR",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/computercontroller/docx_tool.rs",
      "line_number": 561,
      "context": "#[tokio::test]\n    async fn test_docx_text_extraction() {\n        let test_docx_path = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"))\n            .join(\"src/computercontroller/tests/data/sample.docx\");",
      "description": null
    },
    {
      "key": "CARGO_MANIFEST_DIR",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/computercontroller/xlsx_tool.rs",
      "line_number": 264,
      "context": "fn get_test_file() -> PathBuf {\n        PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"))\n            .join(\"src\")\n            .join(\"computercontroller\")",
      "description": null
    },
    {
      "key": "GOOGLE_DRIVE_OAUTH_PATH",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/google_drive/mod.rs",
      "line_number": 102,
      "context": "Arc<CredentialsManager>,\n    ) {\n        let keyfile_path_str = env::var(\"GOOGLE_DRIVE_OAUTH_PATH\")\n            .unwrap_or_else(|_| \"./gcp-oauth.keys.json\".to_string());\n        let credentials_path_str = env::var(\"GOOGLE_DRIVE_CREDENTIALS_PATH\")",
      "description": null
    },
    {
      "key": "GOOGLE_DRIVE_CREDENTIALS_PATH",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/google_drive/mod.rs",
      "line_number": 104,
      "context": "let keyfile_path_str = env::var(\"GOOGLE_DRIVE_OAUTH_PATH\")\n            .unwrap_or_else(|_| \"./gcp-oauth.keys.json\".to_string());\n        let credentials_path_str = env::var(\"GOOGLE_DRIVE_CREDENTIALS_PATH\")\n            .unwrap_or_else(|_| \"./gdrive-server-credentials.json\".to_string());",
      "description": null
    },
    {
      "key": "GOOGLE_DRIVE_OAUTH_CONFIG",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/google_drive/mod.rs",
      "line_number": 119,
      "context": ");\n\n        if let Ok(oauth_config) = env::var(\"GOOGLE_DRIVE_OAUTH_CONFIG\") {\n            // Ensure the parent directory exists (create_dir_all is idempotent)\n            if let Some(parent) = keyfile_path.parent() {",
      "description": null
    },
    {
      "key": "GOOGLE_DRIVE_DISK_FALLBACK",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/google_drive/mod.rs",
      "line_number": 47,
      "context": "pub const KEYCHAIN_SERVICE: &str = \"mcp_google_drive\";\npub const KEYCHAIN_USERNAME: &str = \"oauth_credentials\";\npub const KEYCHAIN_DISK_FALLBACK_ENV: &str = \"GOOGLE_DRIVE_DISK_FALLBACK\";\n\nconst GOOGLE_DRIVE_SCOPES: Scope = Scope::Full;",
      "description": null
    },
    {
      "key": "GOOGLE_DRIVE_OAUTH_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/google_drive/mod.rs",
      "line_number": 102,
      "context": "Arc<CredentialsManager>,\n    ) {\n        let keyfile_path_str = env::var(\"GOOGLE_DRIVE_OAUTH_PATH\")\n            .unwrap_or_else(|_| \"./gcp-oauth.keys.json\".to_string());\n        let credentials_path_str = env::var(\"GOOGLE_DRIVE_CREDENTIALS_PATH\")",
      "description": null
    },
    {
      "key": "GOOGLE_DRIVE_CREDENTIALS_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/google_drive/mod.rs",
      "line_number": 104,
      "context": "let keyfile_path_str = env::var(\"GOOGLE_DRIVE_OAUTH_PATH\")\n            .unwrap_or_else(|_| \"./gcp-oauth.keys.json\".to_string());\n        let credentials_path_str = env::var(\"GOOGLE_DRIVE_CREDENTIALS_PATH\")\n            .unwrap_or_else(|_| \"./gdrive-server-credentials.json\".to_string());",
      "description": null
    },
    {
      "key": "GOOGLE_DRIVE_OAUTH_CONFIG",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/google_drive/mod.rs",
      "line_number": 119,
      "context": ");\n\n        if let Ok(oauth_config) = env::var(\"GOOGLE_DRIVE_OAUTH_CONFIG\") {\n            // Ensure the parent directory exists (create_dir_all is idempotent)\n            if let Some(parent) = keyfile_path.parent() {",
      "description": null
    },
    {
      "key": "USER_ENTERED",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/google_drive/mod.rs",
      "line_number": 547,
      "context": "\"valueInputOption\": {\n                      \"type\": \"string\",\n                      \"enum\": [\"RAW\", \"USER_ENTERED\"],\n                      \"description\": \"How input data should be interpreted (default: USER_ENTERED)\",\n                  }",
      "description": null
    },
    {
      "key": "LABEL_VIEW_BASIC",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/google_drive/mod.rs",
      "line_number": 1106,
      "context": ".labels()\n                .list()\n                .param(\"view\", \"LABEL_VIEW_BASIC\");\n            // .param(\"view\", \"LABEL_VIEW_FULL\");",
      "description": null
    },
    {
      "key": "LABEL_VIEW_FULL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/google_drive/mod.rs",
      "line_number": 1107,
      "context": ".list()\n                .param(\"view\", \"LABEL_VIEW_BASIC\");\n            // .param(\"view\", \"LABEL_VIEW_FULL\");\n\n            let label_results = match label_builder.doit().await {",
      "description": null
    },
    {
      "key": "TEMP",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/computercontroller/platform/windows.rs",
      "line_number": 24,
      "context": "fn get_temp_path(&self) -> PathBuf {\n        std::env::var(\"TEMP\")\n            .map(PathBuf::from)\n            .unwrap_or_else(|_| PathBuf::from(r\"C:\\Windows\\Temp\"))",
      "description": null
    },
    {
      "key": "TEMP",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/computercontroller/platform/windows.rs",
      "line_number": 24,
      "context": "fn get_temp_path(&self) -> PathBuf {\n        std::env::var(\"TEMP\")\n            .map(PathBuf::from)\n            .unwrap_or_else(|_| PathBuf::from(r\"C:\\Windows\\Temp\"))",
      "description": null
    },
    {
      "key": "WAYLAND_DISPLAY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/computercontroller/platform/linux.rs",
      "line_number": 44,
      "context": "fn detect_display_server() -> DisplayServer {\n        if let Ok(wayland_display) = std::env::var(\"WAYLAND_DISPLAY\") {\n            if !wayland_display.is_empty() {\n                return DisplayServer::Wayland;",
      "description": null
    },
    {
      "key": "DISPLAY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/computercontroller/platform/linux.rs",
      "line_number": 50,
      "context": "}\n\n        if let Ok(display) = std::env::var(\"DISPLAY\") {\n            if !display.is_empty() {\n                return DisplayServer::X11;",
      "description": null
    },
    {
      "key": "WAYLAND_DISPLAY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/computercontroller/platform/linux.rs",
      "line_number": 44,
      "context": "fn detect_display_server() -> DisplayServer {\n        if let Ok(wayland_display) = std::env::var(\"WAYLAND_DISPLAY\") {\n            if !wayland_display.is_empty() {\n                return DisplayServer::Wayland;",
      "description": null
    },
    {
      "key": "GOOSE_EDITOR_API_KEY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/developer/editor_models/mod.rs",
      "line_number": 78,
      "context": "// Check if basic editor API variables are set\n    let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;",
      "description": null
    },
    {
      "key": "GOOSE_EDITOR_HOST",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/developer/editor_models/mod.rs",
      "line_number": 79,
      "context": "// Check if basic editor API variables are set\n    let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;",
      "description": null
    },
    {
      "key": "GOOSE_EDITOR_MODEL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-mcp/src/developer/editor_models/mod.rs",
      "line_number": 80,
      "context": "let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;\n\n    if api_key.is_empty() || host.is_empty() || model.is_empty() {",
      "description": null
    },
    {
      "key": "GOOSE_EDITOR_API_KEY",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-mcp/src/developer/editor_models/mod.rs",
      "line_number": 78,
      "context": "// Check if basic editor API variables are set\n    let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;",
      "description": null
    },
    {
      "key": "GOOSE_EDITOR_HOST",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-mcp/src/developer/editor_models/mod.rs",
      "line_number": 79,
      "context": "// Check if basic editor API variables are set\n    let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;",
      "description": null
    },
    {
      "key": "GOOSE_EDITOR_MODEL",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-mcp/src/developer/editor_models/mod.rs",
      "line_number": 80,
      "context": "let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;\n\n    if api_key.is_empty() || host.is_empty() || model.is_empty() {",
      "description": null
    },
    {
      "key": "GOOSE_EDITOR_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/developer/editor_models/mod.rs",
      "line_number": 78,
      "context": "// Check if basic editor API variables are set\n    let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;",
      "description": null
    },
    {
      "key": "GOOSE_EDITOR_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/developer/editor_models/mod.rs",
      "line_number": 79,
      "context": "// Check if basic editor API variables are set\n    let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;",
      "description": null
    },
    {
      "key": "GOOSE_EDITOR_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-mcp/src/developer/editor_models/mod.rs",
      "line_number": 80,
      "context": "let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;\n\n    if api_key.is_empty() || host.is_empty() || model.is_empty() {",
      "description": null
    },
    {
      "key": "LANGFUSE_PUBLIC_KEY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 461,
      "context": "// Store original environment variables (both sets)\n        let original_vars = [\n            (\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),",
      "description": null
    },
    {
      "key": "LANGFUSE_SECRET_KEY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 462,
      "context": "let original_vars = [\n            (\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),\n            (",
      "description": null
    },
    {
      "key": "LANGFUSE_URL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 463,
      "context": "(\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),\n            (\n                \"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\",",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_PUBLIC_KEY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 466,
      "context": "(\n                \"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\",\n                env::var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\").ok(),\n            ),\n            (",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_SECRET_KEY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 470,
      "context": "(\n                \"LANGFUSE_INIT_PROJECT_SECRET_KEY\",\n                env::var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\").ok(),\n            ),\n        ];",
      "description": null
    },
    {
      "key": "LANGFUSE_PUBLIC_KEY",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 461,
      "context": "// Store original environment variables (both sets)\n        let original_vars = [\n            (\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),",
      "description": null
    },
    {
      "key": "LANGFUSE_SECRET_KEY",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 462,
      "context": "let original_vars = [\n            (\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),\n            (",
      "description": null
    },
    {
      "key": "LANGFUSE_URL",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 463,
      "context": "(\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),\n            (\n                \"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\",",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_PUBLIC_KEY",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 466,
      "context": "(\n                \"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\",\n                env::var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\").ok(),\n            ),\n            (",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_SECRET_KEY",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 470,
      "context": "(\n                \"LANGFUSE_INIT_PROJECT_SECRET_KEY\",\n                env::var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\").ok(),\n            ),\n        ];",
      "description": null
    },
    {
      "key": "USERPROFILE",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 204,
      "context": "let temp_dir = TempDir::new().unwrap();\n        if cfg!(windows) {\n            env::set_var(\"USERPROFILE\", temp_dir.path());\n        } else {\n            env::set_var(\"HOME\", temp_dir.path());",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 206,
      "context": "env::set_var(\"USERPROFILE\", temp_dir.path());\n        } else {\n            env::set_var(\"HOME\", temp_dir.path());\n        }\n        temp_dir",
      "description": null
    },
    {
      "key": "TMPDIR",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 260,
      "context": "env::set_var(\"HOME\", test_dir);\n            // Also set TMPDIR to prevent temp directory sharing between tests\n            env::set_var(\"TMPDIR\", test_dir);\n        }",
      "description": null
    },
    {
      "key": "LANGFUSE_PUBLIC_KEY",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 483,
      "context": "// Test with standard Langfuse variables\n        env::set_var(\"LANGFUSE_PUBLIC_KEY\", \"test_public_key\");\n        env::set_var(\"LANGFUSE_SECRET_KEY\", \"test_secret_key\");\n        assert!(langfuse_layer::create_langfuse_observer().is_some());",
      "description": null
    },
    {
      "key": "LANGFUSE_SECRET_KEY",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 484,
      "context": "// Test with standard Langfuse variables\n        env::set_var(\"LANGFUSE_PUBLIC_KEY\", \"test_public_key\");\n        env::set_var(\"LANGFUSE_SECRET_KEY\", \"test_secret_key\");\n        assert!(langfuse_layer::create_langfuse_observer().is_some());",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_PUBLIC_KEY",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 490,
      "context": "env::remove_var(\"LANGFUSE_PUBLIC_KEY\");\n        env::remove_var(\"LANGFUSE_SECRET_KEY\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test_public_key\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\", \"test_secret_key\");\n        assert!(langfuse_layer::create_langfuse_observer().is_some());",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_SECRET_KEY",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 491,
      "context": "env::remove_var(\"LANGFUSE_SECRET_KEY\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test_public_key\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\", \"test_secret_key\");\n        assert!(langfuse_layer::create_langfuse_observer().is_some());",
      "description": null
    },
    {
      "key": "LANGFUSE_PUBLIC_KEY",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 488,
      "context": "// Clear and test with init project variables\n        env::remove_var(\"LANGFUSE_PUBLIC_KEY\");\n        env::remove_var(\"LANGFUSE_SECRET_KEY\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test_public_key\");",
      "description": null
    },
    {
      "key": "LANGFUSE_SECRET_KEY",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 489,
      "context": "// Clear and test with init project variables\n        env::remove_var(\"LANGFUSE_PUBLIC_KEY\");\n        env::remove_var(\"LANGFUSE_SECRET_KEY\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test_public_key\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\", \"test_secret_key\");",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_PUBLIC_KEY",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 495,
      "context": "// Test fallback behavior\n        env::remove_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\");\n        assert!(langfuse_layer::create_langfuse_observer().is_none());",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 206,
      "context": "env::set_var(\"USERPROFILE\", temp_dir.path());\n        } else {\n            env::set_var(\"HOME\", temp_dir.path());\n        }\n        temp_dir",
      "description": null
    },
    {
      "key": "LANGFUSE_PUBLIC_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 461,
      "context": "// Store original environment variables (both sets)\n        let original_vars = [\n            (\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),",
      "description": null
    },
    {
      "key": "LANGFUSE_SECRET_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 462,
      "context": "let original_vars = [\n            (\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),\n            (",
      "description": null
    },
    {
      "key": "LANGFUSE_URL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 463,
      "context": "(\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),\n            (\n                \"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\",",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_PUBLIC_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 465,
      "context": "(\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),\n            (\n                \"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\",\n                env::var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\").ok(),\n            ),",
      "description": null
    },
    {
      "key": "LANGFUSE_INIT_PROJECT_SECRET_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/logging.rs",
      "line_number": 469,
      "context": "),\n            (\n                \"LANGFUSE_INIT_PROJECT_SECRET_KEY\",\n                env::var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\").ok(),\n            ),",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_ENDPOINT",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/main.rs",
      "line_number": 13,
      "context": "// Only wait for telemetry flush if OTLP is configured\n    if std::env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\").is_ok() {\n        // Use a shorter, dynamic wait with max timeout\n        let max_wait = tokio::time::Duration::from_millis(500);",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_ENDPOINT",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose-cli/src/main.rs",
      "line_number": 13,
      "context": "// Only wait for telemetry flush if OTLP is configured\n    if std::env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\").is_ok() {\n        // Use a shorter, dynamic wait with max timeout\n        let max_wait = tokio::time::Duration::from_millis(500);",
      "description": null
    },
    {
      "key": "OTEL_EXPORTER_OTLP_ENDPOINT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/main.rs",
      "line_number": 13,
      "context": "// Only wait for telemetry flush if OTLP is configured\n    if std::env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\").is_ok() {\n        // Use a shorter, dynamic wait with max timeout\n        let max_wait = tokio::time::Duration::from_millis(500);",
      "description": null
    },
    {
      "key": "PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 54,
      "context": "short,\n        long,\n        value_name = \"PATH\",\n        help = \"Path for the chat session (e.g., './playground.jsonl')\",\n        long_help = \"Specify a path for your chat session. When used with --resume, will resume this specific session if it exists.\"",
      "description": null
    },
    {
      "key": "--max-tool-repetitions",
      "usage_type": "cli_flag",
      "method": "clap_long",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 327,
      "context": "debug: bool,\n\n        /// Maximum number of consecutive identical tool calls allowed\n        #[arg(\n            long = \"max-tool-repetitions\",\n            value_name = \"NUMBER\",\n            help = \"Maximum number of consecutive identical tool calls allowed\",",
      "description": "Maximum number of consecutive identical tool calls allowed"
    },
    {
      "key": "--text",
      "usage_type": "cli_flag",
      "method": "clap_long",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 408,
      "context": "instructions: Option<String>,\n\n        /// Input text containing commands\n        #[arg(\n            short = 't',\n            long = \"text\",\n            value_name = \"TEXT\",",
      "description": "Input text to provide to Goose directly"
    },
    {
      "key": "-t",
      "usage_type": "cli_flag",
      "method": "clap_short",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 408,
      "context": "instructions: Option<String>,\n\n        /// Input text containing commands\n        #[arg(\n            short = 't',\n            long = \"text\",\n            value_name = \"TEXT\",",
      "description": null
    },
    {
      "key": "--system",
      "usage_type": "cli_flag",
      "method": "clap_long",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 420,
      "context": "input_text: Option<String>,\n\n        /// Additional system prompt to customize agent behavior\n        #[arg(\n            long = \"system\",\n            value_name = \"TEXT\",\n            help = \"Additional system prompt to customize agent behavior\",",
      "description": "Additional system prompt to customize agent behavior"
    },
    {
      "key": "--interactive",
      "usage_type": "cli_flag",
      "method": "clap_long",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 452,
      "context": "params: Vec<(String, String)>,\n\n        /// Continue in interactive mode after processing input\n        #[arg(\n            short = 's',\n            long = \"interactive\",\n            help = \"Continue in interactive mode after processing initial input\"",
      "description": "Continue in interactive mode after processing initial input"
    },
    {
      "key": "-s",
      "usage_type": "cli_flag",
      "method": "clap_short",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 452,
      "context": "params: Vec<(String, String)>,\n\n        /// Continue in interactive mode after processing input\n        #[arg(\n            short = 's',\n            long = \"interactive\",\n            help = \"Continue in interactive mode after processing initial input\"",
      "description": null
    },
    {
      "key": "--no-session",
      "usage_type": "cli_flag",
      "method": "clap_long",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 460,
      "context": "interactive: bool,\n\n        /// Run without storing a session file\n        #[arg(\n            long = \"no-session\",\n            help = \"Run without storing a session file\",\n            long_help = \"Execute commands without creating or using a session file. Useful for automated runs.\",",
      "description": "Run without storing a session file"
    },
    {
      "key": "--explain",
      "usage_type": "cli_flag",
      "method": "clap_long",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 469,
      "context": "no_session: bool,\n\n        /// Show the recipe title, description, and parameters\n        #[arg(\n            long = \"explain\",\n            help = \"Show the recipe title, description, and parameters\"\n        )]",
      "description": "Show the recipe title, description, and parameters"
    },
    {
      "key": "--render-recipe",
      "usage_type": "cli_flag",
      "method": "clap_long",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 476,
      "context": "explain: bool,\n\n        /// Print the rendered recipe instead of running it\n        #[arg(\n            long = \"render-recipe\",\n            help = \"Print the rendered recipe instead of running it.\"\n        )]",
      "description": "Print the rendered recipe instead of running it."
    },
    {
      "key": "--quiet",
      "usage_type": "cli_flag",
      "method": "clap_long",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 563,
      "context": "builtins: Vec<String>,\n\n        /// Quiet mode - suppress non-response output\n        #[arg(\n            short = 'q',\n            long = \"quiet\",\n            help = \"Quiet mode. Suppress non-response output, printing only the model response to stdout\"",
      "description": "Quiet mode. Suppress non-response output, printing only the model response to stdout"
    },
    {
      "key": "-q",
      "usage_type": "cli_flag",
      "method": "clap_short",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 563,
      "context": "builtins: Vec<String>,\n\n        /// Quiet mode - suppress non-response output\n        #[arg(\n            short = 'q',\n            long = \"quiet\",\n            help = \"Quiet mode. Suppress non-response output, printing only the model response to stdout\"",
      "description": null
    },
    {
      "key": "List",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 80,
      "context": "#[derive(Subcommand)]\nenum SessionCommand {\n    #[command(about = \"List all available sessions\")]\n    List {\n        #[arg(short, long, help = \"List all available sessions\")]\n        verbose: bool,",
      "description": "List all available sessions"
    },
    {
      "key": "Remove",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 100,
      "context": ")]\n        ascending: bool,\n    },\n    #[command(about = \"Remove sessions. Runs interactively if no ID or regex is provided.\")]\n    Remove {\n        #[arg(short, long, help = \"Session ID to be removed (optional)\")]\n        id: Option<String>,",
      "description": "Remove sessions. Runs interactively if no ID or regex is provided."
    },
    {
      "key": "Export",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 107,
      "context": "#[arg(short, long, help = \"Regex for removing matched sessions (optional)\")]\n        regex: Option<String>,\n    },\n    #[command(about = \"Export a session to Markdown format\")]\n    Export {\n        #[command(flatten)]\n        identifier: Option<Identifier>,",
      "description": "Export a session to Markdown format"
    },
    {
      "key": "Add",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 124,
      "context": "#[derive(Subcommand, Debug)]\nenum SchedulerCommand {\n    #[command(about = \"Add a new scheduled job\")]\n    Add {\n        #[arg(long, help = \"Unique ID for the job\")]\n        id: String,",
      "description": "Add a new scheduled job"
    },
    {
      "key": "Sessions",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 148,
      "context": "id: String,\n    },\n    /// List sessions created by a specific schedule\n    #[command(about = \"List sessions created by a specific schedule\")]\n    Sessions {\n        /// ID of the schedule\n        #[arg(long, help = \"ID of the schedule\")] // Explicitly make it --id",
      "description": "List sessions created by a specific schedule"
    },
    {
      "key": "RunNow",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 158,
      "context": "limit: Option<u32>,\n    },\n    /// Run a scheduled job immediately\n    #[command(about = \"Run a scheduled job immediately\")]\n    RunNow {\n        /// ID of the schedule to run\n        #[arg(long, help = \"ID of the schedule to run\")] // Explicitly make it --id",
      "description": "Run a scheduled job immediately"
    },
    {
      "key": "ServicesStatus",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 165,
      "context": "id: String,\n    },\n    /// Check status of Temporal services (temporal scheduler only)\n    #[command(about = \"Check status of Temporal services\")]\n    ServicesStatus {},\n    /// Stop Temporal services (temporal scheduler only)\n    #[command(about = \"Stop Temporal services\")]",
      "description": "Check status of Temporal services"
    },
    {
      "key": "ServicesStop",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 168,
      "context": "#[command(about = \"Check status of Temporal services\")]\n    ServicesStatus {},\n    /// Stop Temporal services (temporal scheduler only)\n    #[command(about = \"Stop Temporal services\")]\n    ServicesStop {},\n    /// Show cron expression examples and help\n    #[command(about = \"Show cron expression examples and help\")]",
      "description": "Stop Temporal services"
    },
    {
      "key": "CronHelp",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 171,
      "context": "#[command(about = \"Stop Temporal services\")]\n    ServicesStop {},\n    /// Show cron expression examples and help\n    #[command(about = \"Show cron expression examples and help\")]\n    CronHelp {},\n}",
      "description": "Show cron expression examples and help"
    },
    {
      "key": "InitConfig",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 177,
      "context": "#[derive(Subcommand)]\npub enum BenchCommand {\n    #[command(name = \"init-config\", about = \"Create a new starter-config\")]\n    InitConfig {\n        #[arg(short, long, help = \"filename with extension for generated config\")]\n        name: String,",
      "description": "Create a new starter-config"
    },
    {
      "key": "Run",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 183,
      "context": "name: String,\n    },\n\n    #[command(about = \"Run all benchmarks from a config\")]\n    Run {\n        #[arg(\n            short,",
      "description": "Run all benchmarks from a config"
    },
    {
      "key": "Selectors",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 193,
      "context": "config: PathBuf,\n    },\n\n    #[command(about = \"List all available selectors\")]\n    Selectors {\n        #[arg(\n            short,",
      "description": "List all available selectors"
    },
    {
      "key": "EvalModel",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 203,
      "context": "config: Option<PathBuf>,\n    },\n\n    #[command(name = \"eval-model\", about = \"Run an eval of model\")]\n    EvalModel {\n        #[arg(short, long, help = \"A serialized config file for the model only.\")]\n        config: String,",
      "description": "Run an eval of model"
    },
    {
      "key": "ExecEval",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 209,
      "context": "config: String,\n    },\n\n    #[command(name = \"exec-eval\", about = \"run a single eval\")]\n    ExecEval {\n        #[arg(short, long, help = \"A serialized config file for the eval only.\")]\n        config: String,",
      "description": "run a single eval"
    },
    {
      "key": "GenerateLeaderboard",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 215,
      "context": "config: String,\n    },\n\n    #[command(\n        name = \"generate-leaderboard\",\n        about = \"Generate a leaderboard CSV from benchmark results\"\n    )]",
      "description": "Generate a leaderboard CSV from benchmark results"
    },
    {
      "key": "Validate",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 232,
      "context": "#[derive(Subcommand)]\nenum RecipeCommand {\n    /// Validate a recipe file\n    #[command(about = \"Validate a recipe\")]\n    Validate {\n        /// Recipe name to get recipe file to validate\n        #[arg(help = \"recipe name to get recipe file or full path to the recipe file to validate\")]",
      "description": "Validate a recipe"
    },
    {
      "key": "Deeplink",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 240,
      "context": "},\n\n    /// Generate a deeplink for a recipe file\n    #[command(about = \"Generate a deeplink for a recipe\")]\n    Deeplink {\n        /// Recipe name to get recipe file to generate deeplink\n        #[arg(",
      "description": "Generate a deeplink for a recipe"
    },
    {
      "key": "Configure",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 274,
      "context": "#[derive(Subcommand)]\nenum Command {\n    /// Configure Goose settings\n    #[command(about = \"Configure Goose settings\")]\n    Configure {},\n\n    /// Display Goose configuration information",
      "description": "Configure Goose settings"
    },
    {
      "key": "Info",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 278,
      "context": "Configure {},\n\n    /// Display Goose configuration information\n    #[command(about = \"Display Goose information\")]\n    Info {\n        /// Show verbose information including current configuration\n        #[arg(short, long, help = \"Show verbose information including config.yaml\")]",
      "description": "Display Goose information"
    },
    {
      "key": "Mcp",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 286,
      "context": "},\n\n    /// Manage system prompts and behaviors\n    #[command(about = \"Run one of the mcp servers bundled with goose\")]\n    Mcp { name: String },\n\n    /// Start or resume interactive chat sessions",
      "description": "Run one of the mcp servers bundled with goose"
    },
    {
      "key": "Session",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 290,
      "context": "Mcp { name: String },\n\n    /// Start or resume interactive chat sessions\n    #[command(\n        about = \"Start or resume interactive chat sessions\",\n        visible_alias = \"s\"\n    )]",
      "description": "Start or resume interactive chat sessions"
    },
    {
      "key": "Project",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 386,
      "context": "},\n\n    /// Open the last project directory\n    #[command(about = \"Open the last project directory\", visible_alias = \"p\")]\n    Project {},\n\n    /// List recent project directories",
      "description": "Open the last project directory"
    },
    {
      "key": "Recipe",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 610,
      "context": "},\n\n    /// Recipe utilities for validation and deeplinking\n    #[command(about = \"Recipe utilities for validation and deeplinking\")]\n    Recipe {\n        #[command(subcommand)]\n        command: RecipeCommand,",
      "description": "Recipe utilities for validation and deeplinking"
    },
    {
      "key": "Schedule",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 617,
      "context": "},\n\n    /// Manage scheduled jobs\n    #[command(about = \"Manage scheduled jobs\", visible_alias = \"sched\")]\n    Schedule {\n        #[command(subcommand)]\n        command: SchedulerCommand,",
      "description": "Manage scheduled jobs"
    },
    {
      "key": "Update",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 624,
      "context": "},\n\n    /// Update the Goose CLI version\n    #[command(about = \"Update the goose CLI version\")]\n    Update {\n        /// Update to canary version\n        #[arg(",
      "description": "Update the goose CLI version"
    },
    {
      "key": "Bench",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 641,
      "context": "},\n\n    /// Evaluate system configuration across a range of practical tasks\n    #[command(about = \"Evaluate system configuration across a range of practical tasks\")]\n    Bench {\n        #[command(subcommand)]\n        cmd: BenchCommand,",
      "description": "Evaluate system configuration across a range of practical tasks"
    },
    {
      "key": "Web",
      "usage_type": "cli_command",
      "method": "clap_command",
      "file_path": "crates/goose-cli/src/cli.rs",
      "line_number": 648,
      "context": "},\n\n    /// Start a web server with a chat interface\n    #[command(about = \"Experimental: Start a web server with a chat interface\")]\n    Web {\n        /// Port to run the web server on\n        #[arg(",
      "description": "Experimental: Start a web server with a chat interface"
    },
    {
      "key": "CARGO_MANIFEST_DIR",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/scenario_tests/message_generator.rs",
      "line_number": 21,
      "context": "let image_name = image_name.to_string();\n    Box::new(move |_provider| {\n        let manifest_dir = env!(\"CARGO_MANIFEST_DIR\");\n        let image_path = format!(\n            \"{}/{}/test_data/{}.jpg\",",
      "description": null
    },
    {
      "key": "GOOSE_TEST_PROVIDER",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/scenario_tests/scenario_runner.rs",
      "line_number": 52,
      "context": "F: Fn(&ScenarioResult) -> Result<()> + Send + Sync + 'static,\n{\n    if let Ok(only_provider) = std::env::var(\"GOOSE_TEST_PROVIDER\") {\n        let active_providers = get_provider_configs();\n        let config = active_providers",
      "description": null
    },
    {
      "key": "GITHUB_ACTIONS",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/scenario_tests/scenario_runner.rs",
      "line_number": 170,
      "context": "}\n    } else {\n        if std::env::var(\"GITHUB_ACTIONS\").is_ok() {\n            panic!(\n                \"Test recording is not supported on CI. \\",
      "description": null
    },
    {
      "key": "GITHUB_ACTIONS",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose-cli/src/scenario_tests/scenario_runner.rs",
      "line_number": 170,
      "context": "}\n    } else {\n        if std::env::var(\"GITHUB_ACTIONS\").is_ok() {\n            panic!(\n                \"Test recording is not supported on CI. \\",
      "description": null
    },
    {
      "key": "GOOSE_TEST_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/scenario_tests/scenario_runner.rs",
      "line_number": 52,
      "context": "F: Fn(&ScenarioResult) -> Result<()> + Send + Sync + 'static,\n{\n    if let Ok(only_provider) = std::env::var(\"GOOSE_TEST_PROVIDER\") {\n        let active_providers = get_provider_configs();\n        let config = active_providers",
      "description": null
    },
    {
      "key": "CARGO_MANIFEST_DIR",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/scenario_tests/scenario_runner.rs",
      "line_number": 144,
      "context": "let factory_name = config.name.to_lowercase();\n    let manifest_dir = env!(\"CARGO_MANIFEST_DIR\");\n    let file_path = format!(\n        \"{}/{}/recordings/{}/{}.json\",",
      "description": null
    },
    {
      "key": "GITHUB_ACTIONS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/scenario_tests/scenario_runner.rs",
      "line_number": 170,
      "context": "}\n    } else {\n        if std::env::var(\"GITHUB_ACTIONS\").is_ok() {\n            panic!(\n                \"Test recording is not supported on CI. \\",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/scenario_tests/provider_configs.rs",
      "line_number": 52,
      "context": "model_name: \"gpt-4o\",\n            required_env_vars: &[\n                \"AZURE_OPENAI_API_KEY\",\n                \"AZURE_OPENAI_ENDPOINT\",\n                \"AZURE_OPENAI_DEPLOYMENT_NAME\",",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_ENDPOINT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/scenario_tests/provider_configs.rs",
      "line_number": 53,
      "context": "required_env_vars: &[\n                \"AZURE_OPENAI_API_KEY\",\n                \"AZURE_OPENAI_ENDPOINT\",\n                \"AZURE_OPENAI_DEPLOYMENT_NAME\",\n            ],",
      "description": null
    },
    {
      "key": "AZURE_OPENAI_DEPLOYMENT_NAME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/scenario_tests/provider_configs.rs",
      "line_number": 54,
      "context": "\"AZURE_OPENAI_API_KEY\",\n                \"AZURE_OPENAI_ENDPOINT\",\n                \"AZURE_OPENAI_DEPLOYMENT_NAME\",\n            ],\n            env_modifications: None,",
      "description": null
    },
    {
      "key": "AWS_ACCESS_KEY_ID",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/scenario_tests/provider_configs.rs",
      "line_number": 62,
      "context": "name: \"aws_bedrock\",\n            model_name: \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n            required_env_vars: &[\"AWS_ACCESS_KEY_ID\", \"AWS_SECRET_ACCESS_KEY\"],\n            env_modifications: None,\n            skip_reason: Some(\"No valid keys around\"),",
      "description": null
    },
    {
      "key": "AWS_SECRET_ACCESS_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/scenario_tests/provider_configs.rs",
      "line_number": 62,
      "context": "name: \"aws_bedrock\",\n            model_name: \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n            required_env_vars: &[\"AWS_ACCESS_KEY_ID\", \"AWS_SECRET_ACCESS_KEY\"],\n            env_modifications: None,\n            skip_reason: Some(\"No valid keys around\"),",
      "description": null
    },
    {
      "key": "GITHUB_TOKEN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/recipes/secret_discovery.rs",
      "line_number": 9,
      "context": "#[derive(Debug, Clone, PartialEq)]\npub struct SecretRequirement {\n    /// The environment variable name (e.g., \"GITHUB_TOKEN\")\n    pub key: String,\n    /// The name of the extension that requires this secret",
      "description": null
    },
    {
      "key": "GITHUB_API_URL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/recipes/secret_discovery.rs",
      "line_number": 142,
      "context": "uri: \"sse://example.com\".to_string(),\n                    envs: Envs::new(HashMap::new()),\n                    env_keys: vec![\"GITHUB_TOKEN\".to_string(), \"GITHUB_API_URL\".to_string()],\n                    description: None,\n                    timeout: None,",
      "description": null
    },
    {
      "key": "SLACK_TOKEN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/recipes/secret_discovery.rs",
      "line_number": 152,
      "context": "args: vec![],\n                    envs: Envs::new(HashMap::new()),\n                    env_keys: vec![\"SLACK_TOKEN\".to_string()],\n                    timeout: None,\n                    description: None,",
      "description": null
    },
    {
      "key": "API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/recipes/secret_discovery.rs",
      "line_number": 236,
      "context": "uri: \"sse://example.com\".to_string(),\n                    envs: Envs::new(HashMap::new()),\n                    env_keys: vec![\"API_KEY\".to_string()],\n                    description: None,\n                    timeout: None,",
      "description": null
    },
    {
      "key": "API_TOKEN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/recipes/secret_discovery.rs",
      "line_number": 272,
      "context": "#[test]\n    fn test_secret_requirement_creation() {\n        let req = SecretRequirement::new(\"test-ext\".to_string(), \"API_TOKEN\".to_string());\n\n        assert_eq!(req.key, \"API_TOKEN\");",
      "description": null
    },
    {
      "key": "PARENT_TOKEN",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/recipes/secret_discovery.rs",
      "line_number": 293,
      "context": "uri: \"sse://parent.com\".to_string(),\n                envs: Envs::new(HashMap::new()),\n                env_keys: vec![\"PARENT_TOKEN\".to_string()],\n                description: None,\n                timeout: None,",
      "description": null
    },
    {
      "key": "GOOSE_RECIPE_GITHUB_REPO",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/recipes/github_recipe.rs",
      "line_number": 31,
      "context": "}\n\npub const GOOSE_RECIPE_GITHUB_REPO_CONFIG_KEY: &str = \"GOOSE_RECIPE_GITHUB_REPO\";\npub fn retrieve_recipe_from_github(\n    recipe_name: &str,",
      "description": null
    },
    {
      "key": "GOOSE_RECIPE_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/recipes/search_recipe.rs",
      "line_number": 16,
      "context": "};\n\nconst GOOSE_RECIPE_PATH_ENV_VAR: &str = \"GOOSE_RECIPE_PATH\";\n\npub fn retrieve_recipe_file(recipe_name: &str) -> Result<RecipeFile> {",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 297,
      "context": "// Get current default provider if it exists\n    let current_provider: Option<String> = config.get_param(\"GOOSE_PROVIDER\").ok();\n    let default_provider = current_provider.unwrap_or_default();",
      "description": null
    },
    {
      "key": "GOOSE_MAX_TURNS",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1522,
      "context": "let config = Config::global();\n\n    let current_max_turns: u32 = config.get_param(\"GOOSE_MAX_TURNS\").unwrap_or(1000);\n\n    let max_turns_input: String =",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1578,
      "context": "// Test configuration - get the model that was configured\n            println!(\"\\nTesting configuration...\");\n            let configured_model: String = config.get_param(\"GOOSE_MODEL\")?;\n            let model_config = match goose::model::ModelConfig::new(&configured_model) {\n                Ok(config) => config,",
      "description": null
    },
    {
      "key": "GOOSE_SCHEDULER_TYPE",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1475,
      "context": "// Get current scheduler type from config for display\n    let current_scheduler: String = config\n        .get_param(\"GOOSE_SCHEDULER_TYPE\")\n        .unwrap_or_else(|_| \"legacy\".to_string());",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 502,
      "context": "Ok((_message, _usage)) => {\n            // Update config with new values only if the test succeeds\n            config.set_param(\"GOOSE_PROVIDER\", Value::String(provider_name.to_string()))?;\n            config.set_param(\"GOOSE_MODEL\", Value::String(model.clone()))?;\n            cliclack::outro(\"Configuration saved successfully\")?;",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 503,
      "context": "// Update config with new values only if the test succeeds\n            config.set_param(\"GOOSE_PROVIDER\", Value::String(provider_name.to_string()))?;\n            config.set_param(\"GOOSE_MODEL\", Value::String(model.clone()))?;\n            cliclack::outro(\"Configuration saved successfully\")?;\n            Ok(true)",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1150,
      "context": "match mode {\n        \"auto\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"auto\".to_string()))?;\n            cliclack::outro(\"Set to Auto Mode - full file modification enabled\")?;\n        }",
      "description": null
    },
    {
      "key": "GOOSE_ROUTER_TOOL_SELECTION_STRATEGY",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1193,
      "context": "match strategy {\n        \"vector\" => {\n            config.set_param(\n                \"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\",\n                Value::String(\"vector\".to_string()),",
      "description": null
    },
    {
      "key": "GOOSE_CLI_MIN_PRIORITY",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1227,
      "context": "match tool_log_level {\n        \"high\" => {\n            config.set_param(\"GOOSE_CLI_MIN_PRIORITY\", Value::from(0.8))?;\n            cliclack::outro(\"Showing tool output of high importance only.\")?;\n        }",
      "description": null
    },
    {
      "key": "GOOSE_SCHEDULER_TYPE",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1492,
      "context": "match scheduler_type {\n        \"legacy\" => {\n            config.set_param(\"GOOSE_SCHEDULER_TYPE\", Value::String(\"legacy\".to_string()))?;\n            cliclack::outro(\n                \"Set to Built-in Cron scheduler - simple and reliable for basic scheduling\",",
      "description": null
    },
    {
      "key": "GOOSE_MAX_TURNS",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1541,
      "context": "let max_turns: u32 = max_turns_input.parse()?;\n    config.set_param(\"GOOSE_MAX_TURNS\", Value::from(max_turns))?;\n\n    cliclack::outro(format!(",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 442,
      "context": "Ok(None) => {\n            let default_model =\n                std::env::var(\"GOOSE_MODEL\").unwrap_or(provider_meta.default_model.clone());\n            cliclack::input(\"Enter a model from that provider:\")\n                .default_input(&default_model)",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 454,
      "context": "// Create model config with env var settings\n    let toolshim_enabled = std::env::var(\"GOOSE_TOOLSHIM\")\n        .map(|val| val == \"1\" || val.to_lowercase() == \"true\")\n        .unwrap_or(false);",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM_OLLAMA_MODEL",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 461,
      "context": ".with_max_tokens(Some(50))\n        .with_toolshim(toolshim_enabled)\n        .with_toolshim_model(std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\").ok());\n\n    let provider = create(provider_name, model_config)?;",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1121,
      "context": "// Check if GOOSE_MODE is set as an environment variable\n    if std::env::var(\"GOOSE_MODE\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_MODE environment variable is set and will override the configuration here.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_ROUTER_TOOL_SELECTION_STRATEGY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1174,
      "context": "// Check if GOOSE_ROUTER_STRATEGY is set as an environment variable\n    if std::env::var(\"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_ROUTER_TOOL_SELECTION_STRATEGY environment variable is set. Configuration will override this.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_CLI_MIN_PRIORITY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1216,
      "context": "let config = Config::global();\n    // Check if GOOSE_CLI_MIN_PRIORITY is set as an environment variable\n    if std::env::var(\"GOOSE_CLI_MIN_PRIORITY\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_CLI_MIN_PRIORITY environment variable is set and will override the configuration here.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_SCHEDULER_TYPE",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1469,
      "context": "// Check if GOOSE_SCHEDULER_TYPE is set as an environment variable\n    if std::env::var(\"GOOSE_SCHEDULER_TYPE\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_SCHEDULER_TYPE environment variable is set and will override the configuration here.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM_OLLAMA_MODEL",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 461,
      "context": ".with_max_tokens(Some(50))\n        .with_toolshim(toolshim_enabled)\n        .with_toolshim_model(std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\").ok());\n\n    let provider = create(provider_name, model_config)?;",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1121,
      "context": "// Check if GOOSE_MODE is set as an environment variable\n    if std::env::var(\"GOOSE_MODE\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_MODE environment variable is set and will override the configuration here.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_ROUTER_TOOL_SELECTION_STRATEGY",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1174,
      "context": "// Check if GOOSE_ROUTER_STRATEGY is set as an environment variable\n    if std::env::var(\"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_ROUTER_TOOL_SELECTION_STRATEGY environment variable is set. Configuration will override this.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_CLI_MIN_PRIORITY",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1216,
      "context": "let config = Config::global();\n    // Check if GOOSE_CLI_MIN_PRIORITY is set as an environment variable\n    if std::env::var(\"GOOSE_CLI_MIN_PRIORITY\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_CLI_MIN_PRIORITY environment variable is set and will override the configuration here.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_SCHEDULER_TYPE",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1469,
      "context": "// Check if GOOSE_SCHEDULER_TYPE is set as an environment variable\n    if std::env::var(\"GOOSE_SCHEDULER_TYPE\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_SCHEDULER_TYPE environment variable is set and will override the configuration here.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "env_var_unwrap",
      "method": "env_var_unwrap",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 442,
      "context": "Ok(None) => {\n            let default_model =\n                std::env::var(\"GOOSE_MODEL\").unwrap_or(provider_meta.default_model.clone());\n            cliclack::input(\"Enter a model from that provider:\")\n                .default_input(&default_model)",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 297,
      "context": "// Get current default provider if it exists\n    let current_provider: Option<String> = config.get_param(\"GOOSE_PROVIDER\").ok();\n    let default_provider = current_provider.unwrap_or_default();",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 442,
      "context": "Ok(None) => {\n            let default_model =\n                std::env::var(\"GOOSE_MODEL\").unwrap_or(provider_meta.default_model.clone());\n            cliclack::input(\"Enter a model from that provider:\")\n                .default_input(&default_model)",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 454,
      "context": "// Create model config with env var settings\n    let toolshim_enabled = std::env::var(\"GOOSE_TOOLSHIM\")\n        .map(|val| val == \"1\" || val.to_lowercase() == \"true\")\n        .unwrap_or(false);",
      "description": null
    },
    {
      "key": "GOOSE_TOOLSHIM_OLLAMA_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 461,
      "context": ".with_max_tokens(Some(50))\n        .with_toolshim(toolshim_enabled)\n        .with_toolshim_model(std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\").ok());\n\n    let provider = create(provider_name, model_config)?;",
      "description": null
    },
    {
      "key": "API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 714,
      "context": "loop {\n                    let key: String = cliclack::input(\"Environment variable name:\")\n                        .placeholder(\"API_KEY\")\n                        .interact()?;",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1121,
      "context": "// Check if GOOSE_MODE is set as an environment variable\n    if std::env::var(\"GOOSE_MODE\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_MODE environment variable is set and will override the configuration here.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_ROUTER_TOOL_SELECTION_STRATEGY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1174,
      "context": "// Check if GOOSE_ROUTER_STRATEGY is set as an environment variable\n    if std::env::var(\"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_ROUTER_TOOL_SELECTION_STRATEGY environment variable is set. Configuration will override this.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_CLI_MIN_PRIORITY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1216,
      "context": "let config = Config::global();\n    // Check if GOOSE_CLI_MIN_PRIORITY is set as an environment variable\n    if std::env::var(\"GOOSE_CLI_MIN_PRIORITY\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_CLI_MIN_PRIORITY environment variable is set and will override the configuration here.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_SCHEDULER_TYPE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1469,
      "context": "// Check if GOOSE_SCHEDULER_TYPE is set as an environment variable\n    if std::env::var(\"GOOSE_SCHEDULER_TYPE\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_SCHEDULER_TYPE environment variable is set and will override the configuration here.\");\n    }",
      "description": null
    },
    {
      "key": "GOOSE_MAX_TURNS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/configure.rs",
      "line_number": 1522,
      "context": "let config = Config::global();\n\n    let current_max_turns: u32 = config.get_param(\"GOOSE_MAX_TURNS\").unwrap_or(1000);\n\n    let max_turns_input: String =",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/commands/web.rs",
      "line_number": 87,
      "context": "let config = goose::config::Config::global();\n\n    let provider_name: String = match config.get_param(\"GOOSE_PROVIDER\") {\n        Ok(p) => p,\n        Err(_) => {",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/commands/web.rs",
      "line_number": 95,
      "context": "};\n\n    let model: String = match config.get_param(\"GOOSE_MODEL\") {\n        Ok(m) => m,\n        Err(_) => {",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/web.rs",
      "line_number": 87,
      "context": "let config = goose::config::Config::global();\n\n    let provider_name: String = match config.get_param(\"GOOSE_PROVIDER\") {\n        Ok(p) => p,\n        Err(_) => {",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/web.rs",
      "line_number": 95,
      "context": "};\n\n    let model: String = match config.get_param(\"GOOSE_MODEL\") {\n        Ok(m) => m,\n        Err(_) => {",
      "description": null
    },
    {
      "key": "GOOSE_SCHEDULER_TYPE",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/commands/schedule.rs",
      "line_number": 266,
      "context": "// Check if we're using temporal scheduler\n    let scheduler_type =\n        std::env::var(\"GOOSE_SCHEDULER_TYPE\").unwrap_or_else(|_| \"temporal\".to_string());\n\n    if scheduler_type != \"temporal\" {",
      "description": null
    },
    {
      "key": "GOOSE_SCHEDULER_TYPE",
      "usage_type": "env_var_unwrap",
      "method": "env_var_unwrap",
      "file_path": "crates/goose-cli/src/commands/schedule.rs",
      "line_number": 266,
      "context": "// Check if we're using temporal scheduler\n    let scheduler_type =\n        std::env::var(\"GOOSE_SCHEDULER_TYPE\").unwrap_or_else(|_| \"temporal\".to_string());\n\n    if scheduler_type != \"temporal\" {",
      "description": null
    },
    {
      "key": "GOOSE_SCHEDULER_TYPE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/schedule.rs",
      "line_number": 266,
      "context": "// Check if we're using temporal scheduler\n    let scheduler_type =\n        std::env::var(\"GOOSE_SCHEDULER_TYPE\").unwrap_or_else(|_| \"temporal\".to_string());\n\n    if scheduler_type != \"temporal\" {",
      "description": null
    },
    {
      "key": "CARGO_PKG_VERSION",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/commands/info.rs",
      "line_number": 34,
      "context": "// Print version information\n    println!(\"{}\", style(\"Goose Version:\").cyan().bold());\n    print_aligned(\"Version:\", env!(\"CARGO_PKG_VERSION\"), basic_padding);\n    println!();",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 814,
      "context": "let config = Config::global();\n                    let curr_goose_mode =\n                        config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n                    if curr_goose_mode != \"auto\" {\n                        config",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 621,
      "context": "config\n                        .set_param(\"GOOSE_MODE\", Value::String(mode.to_string()))\n                        .unwrap();\n                    output::goose_mode_message(&format!(\"Goose mode set to '{}'\", mode));",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 621,
      "context": "config\n                        .set_param(\"GOOSE_MODE\", Value::String(mode.to_string()))\n                        .unwrap();\n                    output::goose_mode_message(&format!(\"Goose mode set to '{}'\", mode));",
      "description": null
    },
    {
      "key": "GOOSE_CONTEXT_STRATEGY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 958,
      "context": "// Check for user-configured default context strategy\n                                let config = Config::global();\n                                let context_strategy = config.get_param::<String>(\"GOOSE_CONTEXT_STRATEGY\")\n                                    .unwrap_or_else(|_| if interactive { \"prompt\".to_string() } else { \"summarize\".to_string() });",
      "description": null
    },
    {
      "key": "GOOSE_CLI_MIN_PRIORITY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 1125,
      "context": "let config = Config::global();\n                                                        let min_priority = config\n                                                            .get_param::<f32>(\"GOOSE_CLI_MIN_PRIORITY\")\n                                                            .ok()\n                                                            .unwrap_or(0.5);",
      "description": null
    },
    {
      "key": "GOOSE_CLI_SHOW_COST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 1476,
      "context": "let config = Config::global();\n        let show_cost = config\n            .get_param::<bool>(\"GOOSE_CLI_SHOW_COST\")\n            .unwrap_or(false);",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 1480,
      "context": "let provider_name = config\n            .get_param::<String>(\"GOOSE_PROVIDER\")\n            .unwrap_or_else(|_| \"unknown\".to_string());",
      "description": null
    },
    {
      "key": "GOOSE_PLANNER_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 1634,
      "context": "// Try planner-specific provider first, fallback to default provider\n    let provider = if let Ok(provider) = config.get_param::<String>(\"GOOSE_PLANNER_PROVIDER\") {\n        provider\n    } else {",
      "description": null
    },
    {
      "key": "GOOSE_PLANNER_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 1644,
      "context": "// Try planner-specific model first, fallback to default model\n    let model = if let Ok(model) = config.get_param::<String>(\"GOOSE_PLANNER_MODEL\") {\n        model\n    } else {",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 1649,
      "context": "println!(\"WARNING: GOOSE_PLANNER_MODEL not found. Using default model...\");\n        config\n            .get_param::<String>(\"GOOSE_MODEL\")\n            .expect(\"No model configured. Run 'goose configure' first\")\n    };",
      "description": null
    },
    {
      "key": "GOOSE_PLANNER_CONTEXT_LIMIT",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/mod.rs",
      "line_number": 1654,
      "context": "let model_config =\n        ModelConfig::new_with_context_env(model, Some(\"GOOSE_PLANNER_CONTEXT_LIMIT\"))?;\n    let reasoner = create(&provider, model_config)?;",
      "description": null
    },
    {
      "key": "RANDOM_THINKING_MESSAGES",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 101,
      "context": "let spinner = cliclack::spinner();\n        if Config::global()\n            .get_param(\"RANDOM_THINKING_MESSAGES\")\n            .unwrap_or(true)\n        {",
      "description": null
    },
    {
      "key": "GOOSE_CLI_THEME",
      "usage_type": "config_param_set",
      "method": "config_param_set",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 82,
      "context": "};\n\n    if let Err(e) = config.set_param(\"GOOSE_CLI_THEME\", Value::String(theme_str.to_string())) {\n        eprintln!(\"Failed to save theme setting to config: {}\", e);\n    }",
      "description": null
    },
    {
      "key": "GOOSE_CLI_THEME",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 58,
      "context": "thread_local! {\n    static CURRENT_THEME: RefCell<Theme> = RefCell::new(\n        std::env::var(\"GOOSE_CLI_THEME\").ok()\n            .map(|val| Theme::from_config_str(&val))\n            .unwrap_or_else(||",
      "description": null
    },
    {
      "key": "GOOSE_CLI_SHOW_THINKING",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 176,
      "context": "}\n            MessageContent::Thinking(thinking) => {\n                if std::env::var(\"GOOSE_CLI_SHOW_THINKING\").is_ok()\n                    && std::io::stdout().is_terminal()\n                {",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 885,
      "context": "fn test_home_directory_conversion() {\n        // Save the current home dir\n        let original_home = env::var(\"HOME\").ok();\n\n        // Set a test home directory",
      "description": null
    },
    {
      "key": "GOOSE_CLI_THEME",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 58,
      "context": "thread_local! {\n    static CURRENT_THEME: RefCell<Theme> = RefCell::new(\n        std::env::var(\"GOOSE_CLI_THEME\").ok()\n            .map(|val| Theme::from_config_str(&val))\n            .unwrap_or_else(||",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "env_var_ok",
      "method": "env_var_ok",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 885,
      "context": "fn test_home_directory_conversion() {\n        // Save the current home dir\n        let original_home = env::var(\"HOME\").ok();\n\n        // Set a test home directory",
      "description": null
    },
    {
      "key": "GOOSE_CLI_SHOW_THINKING",
      "usage_type": "env_var_is_ok",
      "method": "env_var_is_ok",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 176,
      "context": "}\n            MessageContent::Thinking(thinking) => {\n                if std::env::var(\"GOOSE_CLI_SHOW_THINKING\").is_ok()\n                    && std::io::stdout().is_terminal()\n                {",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 888,
      "context": "// Set a test home directory\n        env::set_var(\"HOME\", \"/Users/testuser\");\n\n        assert_eq!(",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 905,
      "context": "env::set_var(\"HOME\", home);\n        } else {\n            env::remove_var(\"HOME\");\n        }\n    }",
      "description": null
    },
    {
      "key": "NO_COLOR",
      "usage_type": "env_var_os",
      "method": "env_var_os",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 484,
      "context": "pub fn env_no_color() -> bool {\n    // if NO_COLOR is defined at all disable colors\n    std::env::var_os(\"NO_COLOR\").is_none()\n}",
      "description": null
    },
    {
      "key": "GOOSE_CLI_THEME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 58,
      "context": "thread_local! {\n    static CURRENT_THEME: RefCell<Theme> = RefCell::new(\n        std::env::var(\"GOOSE_CLI_THEME\").ok()\n            .map(|val| Theme::from_config_str(&val))\n            .unwrap_or_else(||",
      "description": null
    },
    {
      "key": "RANDOM_THINKING_MESSAGES",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 101,
      "context": "let spinner = cliclack::spinner();\n        if Config::global()\n            .get_param(\"RANDOM_THINKING_MESSAGES\")\n            .unwrap_or(true)\n        {",
      "description": null
    },
    {
      "key": "GOOSE_CLI_SHOW_THINKING",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 176,
      "context": "}\n            MessageContent::Thinking(thinking) => {\n                if std::env::var(\"GOOSE_CLI_SHOW_THINKING\").is_ok()\n                    && std::io::stdout().is_terminal()\n                {",
      "description": null
    },
    {
      "key": "GOOSE_CLI_MIN_PRIORITY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 270,
      "context": "let min_priority = config\n                    .get_param::<f32>(\"GOOSE_CLI_MIN_PRIORITY\")\n                    .ok()\n                    .unwrap_or(0.5);",
      "description": null
    },
    {
      "key": "NO_COLOR",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 484,
      "context": "pub fn env_no_color() -> bool {\n    // if NO_COLOR is defined at all disable colors\n    std::env::var_os(\"NO_COLOR\").is_none()\n}",
      "description": null
    },
    {
      "key": "GOOSE_CLI_TOOL_PARAMS_TRUNCATION_MAX_LENGTH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 506,
      "context": "fn get_tool_params_max_length() -> usize {\n    Config::global()\n        .get_param::<usize>(\"GOOSE_CLI_TOOL_PARAMS_TRUNCATION_MAX_LENGTH\")\n        .ok()\n        .unwrap_or(40)",
      "description": null
    },
    {
      "key": "HOME",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/output.rs",
      "line_number": 885,
      "context": "fn test_home_directory_conversion() {\n        // Save the current home dir\n        let original_home = env::var(\"HOME\").ok();\n\n        // Set a test home directory",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/session/builder.rs",
      "line_number": 187,
      "context": ".and_then(|s| s.goose_provider.clone())\n        })\n        .or_else(|| config.get_param(\"GOOSE_PROVIDER\").ok())\n        .expect(\"No provider configured. Run 'goose configure' first\");",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/session/builder.rs",
      "line_number": 198,
      "context": ".and_then(|s| s.goose_model.clone())\n        })\n        .or_else(|| config.get_param(\"GOOSE_MODEL\").ok())\n        .expect(\"No model configured. Run 'goose configure' first\");",
      "description": null
    },
    {
      "key": "GOOSE_SYSTEM_PROMPT_FILE_PATH",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-cli/src/session/builder.rs",
      "line_number": 563,
      "context": "// Only override system prompt if a system override exists\n    let system_prompt_file: Option<String> = config.get_param(\"GOOSE_SYSTEM_PROMPT_FILE_PATH\").ok();\n    if let Some(ref path) = system_prompt_file {\n        let override_prompt =",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/builder.rs",
      "line_number": 187,
      "context": ".and_then(|s| s.goose_provider.clone())\n        })\n        .or_else(|| config.get_param(\"GOOSE_PROVIDER\").ok())\n        .expect(\"No provider configured. Run 'goose configure' first\");",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/builder.rs",
      "line_number": 198,
      "context": ".and_then(|s| s.goose_model.clone())\n        })\n        .or_else(|| config.get_param(\"GOOSE_MODEL\").ok())\n        .expect(\"No model configured. Run 'goose configure' first\");",
      "description": null
    },
    {
      "key": "EDIT_MODE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/builder.rs",
      "line_number": 395,
      "context": "// Determine editor mode\n    let edit_mode = config\n        .get_param::<String>(\"EDIT_MODE\")\n        .ok()\n        .and_then(|edit_mode| match edit_mode.to_lowercase().as_str() {",
      "description": null
    },
    {
      "key": "GOOSE_SYSTEM_PROMPT_FILE_PATH",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-cli/src/session/builder.rs",
      "line_number": 563,
      "context": "// Only override system prompt if a system override exists\n    let system_prompt_file: Option<String> = config.get_param(\"GOOSE_SYSTEM_PROMPT_FILE_PATH\").ok();\n    if let Some(ref path) = system_prompt_file {\n        let override_prompt =",
      "description": null
    },
    {
      "key": "CARGO_PKG_VERSION",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/mcp-server/src/router.rs",
      "line_number": 141,
      "context": "server_info: Implementation {\n                    name: self.name(),\n                    version: env!(\"CARGO_PKG_VERSION\").to_string(),\n                },\n                instructions: Some(self.instructions()),",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER__TYPE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/error.rs",
      "line_number": 35,
      "context": "#[test]\n    fn test_env_var_conversion() {\n        assert_eq!(to_env_var(\"type\"), \"GOOSE_PROVIDER__TYPE\");\n        assert_eq!(to_env_var(\"api_key\"), \"GOOSE_PROVIDER__API_KEY\");\n        assert_eq!(to_env_var(\"provider.host\"), \"GOOSE_PROVIDER__HOST\");",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER__API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/error.rs",
      "line_number": 36,
      "context": "fn test_env_var_conversion() {\n        assert_eq!(to_env_var(\"type\"), \"GOOSE_PROVIDER__TYPE\");\n        assert_eq!(to_env_var(\"api_key\"), \"GOOSE_PROVIDER__API_KEY\");\n        assert_eq!(to_env_var(\"provider.host\"), \"GOOSE_PROVIDER__HOST\");\n        assert_eq!(to_env_var(\"provider.api_key\"), \"GOOSE_PROVIDER__API_KEY\");",
      "description": null
    },
    {
      "key": "GOOSE_PROVIDER__HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/error.rs",
      "line_number": 37,
      "context": "assert_eq!(to_env_var(\"type\"), \"GOOSE_PROVIDER__TYPE\");\n        assert_eq!(to_env_var(\"api_key\"), \"GOOSE_PROVIDER__API_KEY\");\n        assert_eq!(to_env_var(\"provider.host\"), \"GOOSE_PROVIDER__HOST\");\n        assert_eq!(to_env_var(\"provider.api_key\"), \"GOOSE_PROVIDER__API_KEY\");\n    }",
      "description": null
    },
    {
      "key": "CARGO_MANIFEST_DIR",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-server/src/bin/generate_schema.rs",
      "line_number": 9,
      "context": "let schema = openapi::generate_schema();\n\n    let package_dir = env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n    let output_path = PathBuf::from(package_dir)\n        .join(\"..\")",
      "description": null
    },
    {
      "key": "CARGO_MANIFEST_DIR",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/bin/generate_schema.rs",
      "line_number": 9,
      "context": "let schema = openapi::generate_schema();\n\n    let package_dir = env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n    let output_path = PathBuf::from(package_dir)\n        .join(\"..\")",
      "description": null
    },
    {
      "key": "GOOSE_SERVER__SECRET_KEY",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-server/src/commands/agent.rs",
      "line_number": 31,
      "context": "let secret_key =\n        std::env::var(\"GOOSE_SERVER__SECRET_KEY\").unwrap_or_else(|_| \"test\".to_string());\n\n    let new_agent = Agent::new();",
      "description": null
    },
    {
      "key": "GOOSE_SERVER__SECRET_KEY",
      "usage_type": "env_var_unwrap",
      "method": "env_var_unwrap",
      "file_path": "crates/goose-server/src/commands/agent.rs",
      "line_number": 31,
      "context": "let secret_key =\n        std::env::var(\"GOOSE_SERVER__SECRET_KEY\").unwrap_or_else(|_| \"test\".to_string());\n\n    let new_agent = Agent::new();",
      "description": null
    },
    {
      "key": "GOOSE_SERVER__SECRET_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/commands/agent.rs",
      "line_number": 31,
      "context": "let secret_key =\n        std::env::var(\"GOOSE_SERVER__SECRET_KEY\").unwrap_or_else(|_| \"test\".to_string());\n\n    let new_agent = Agent::new();",
      "description": null
    },
    {
      "key": "ELEVENLABS_API_KEY",
      "usage_type": "config_delete",
      "method": "config_delete",
      "file_path": "crates/goose-server/src/routes/audio.rs",
      "line_number": 231,
      "context": "}\n                            // Delete the non-secret version\n                            let _ = config.delete(\"ELEVENLABS_API_KEY\");\n                            key\n                        }",
      "description": null
    },
    {
      "key": "ELEVENLABS_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose-server/src/routes/audio.rs",
      "line_number": 212,
      "context": "// First try to get it as a secret\n    let api_key: String = match config.get_secret(\"ELEVENLABS_API_KEY\") {\n        Ok(key) => key,\n        Err(_) => {",
      "description": null
    },
    {
      "key": "OPENAI_API_KEY",
      "usage_type": "secret_get",
      "method": "secret_get",
      "file_path": "crates/goose-server/src/routes/audio.rs",
      "line_number": 100,
      "context": "let config = goose::config::Config::global();\n    let api_key: String = config\n        .get_secret(\"OPENAI_API_KEY\")\n        .map_err(|_| StatusCode::PRECONDITION_FAILED)?;",
      "description": null
    },
    {
      "key": "OPENAI_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/routes/audio.rs",
      "line_number": 100,
      "context": "let config = goose::config::Config::global();\n    let api_key: String = config\n        .get_secret(\"OPENAI_API_KEY\")\n        .map_err(|_| StatusCode::PRECONDITION_FAILED)?;",
      "description": null
    },
    {
      "key": "OPENAI_HOST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/routes/audio.rs",
      "line_number": 104,
      "context": "// Get the OpenAI host from config (with default)\n    let openai_host = match config.get(\"OPENAI_HOST\", false) {\n        Ok(value) => value\n            .as_str()",
      "description": null
    },
    {
      "key": "ELEVENLABS_API_KEY",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/routes/audio.rs",
      "line_number": 212,
      "context": "// First try to get it as a secret\n    let api_key: String = match config.get_secret(\"ELEVENLABS_API_KEY\") {\n        Ok(key) => key,\n        Err(_) => {",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-server/src/routes/agent.rs",
      "line_number": 184,
      "context": "let config = Config::global();\n    let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n    let agent = state\n        .get_agent()",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "config_param_get",
      "method": "config_param_get",
      "file_path": "crates/goose-server/src/routes/agent.rs",
      "line_number": 249,
      "context": "let model = match payload\n        .model\n        .or_else(|| config.get_param(\"GOOSE_MODEL\").ok())\n    {\n        Some(m) => m,",
      "description": null
    },
    {
      "key": "GOOSE_MODE",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/routes/agent.rs",
      "line_number": 184,
      "context": "let config = Config::global();\n    let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n    let agent = state\n        .get_agent()",
      "description": null
    },
    {
      "key": "GOOSE_MODEL",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/routes/agent.rs",
      "line_number": 249,
      "context": "let model = match payload\n        .model\n        .or_else(|| config.get_param(\"GOOSE_MODEL\").ok())\n    {\n        Some(m) => m,",
      "description": null
    },
    {
      "key": "GOOSE_ALLOWLIST",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-server/src/routes/extension.rs",
      "line_number": 351,
      "context": "#[allow(dead_code)]\nfn fetch_allowed_extensions() -> Option<AllowedExtensions> {\n    match env::var(\"GOOSE_ALLOWLIST\") {\n        Err(_) => {\n            // Environment variable not set, no allowlist to enforce",
      "description": null
    },
    {
      "key": "GOOSE_ALLOWLIST_BYPASS",
      "usage_type": "env_var_std",
      "method": "env_var_std",
      "file_path": "crates/goose-server/src/routes/extension.rs",
      "line_number": 392,
      "context": "fn is_command_allowed(cmd: &str, args: &[String]) -> bool {\n    // Check if bypass is enabled\n    if let Ok(bypass_value) = env::var(\"GOOSE_ALLOWLIST_BYPASS\") {\n        if bypass_value.to_lowercase() == \"true\" {\n            // Bypass the allowlist check",
      "description": null
    },
    {
      "key": "GOOSE_ALLOWLIST",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-server/src/routes/extension.rs",
      "line_number": 1057,
      "context": "// Set the environment variable to point to our mock server\n        env::set_var(\"GOOSE_ALLOWLIST\", format!(\"{}{}\", server_url, server_path));\n\n        // Give the server a moment to start",
      "description": null
    },
    {
      "key": "GOOSE_ALLOWLIST_BYPASS",
      "usage_type": "env_set_var",
      "method": "env_set_var",
      "file_path": "crates/goose-server/src/routes/extension.rs",
      "line_number": 1096,
      "context": "// Set the bypass environment variable\n        env::set_var(\"GOOSE_ALLOWLIST_BYPASS\", \"true\");\n\n        // With bypass enabled, any command should be allowed regardless of allowlist",
      "description": null
    },
    {
      "key": "GOOSE_ALLOWLIST",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose-server/src/routes/extension.rs",
      "line_number": 1075,
      "context": "// Clean up\n        env::remove_var(\"GOOSE_ALLOWLIST\");\n\n        // Wait for the server thread to complete",
      "description": null
    },
    {
      "key": "GOOSE_ALLOWLIST_BYPASS",
      "usage_type": "env_remove_var",
      "method": "env_remove_var",
      "file_path": "crates/goose-server/src/routes/extension.rs",
      "line_number": 1112,
      "context": "// Clean up\n        env::remove_var(\"GOOSE_ALLOWLIST_BYPASS\");\n\n        // Create a mock function to test with allowlist and bypass",
      "description": null
    },
    {
      "key": "GOOSE_ALLOWLIST",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/routes/extension.rs",
      "line_number": 351,
      "context": "#[allow(dead_code)]\nfn fetch_allowed_extensions() -> Option<AllowedExtensions> {\n    match env::var(\"GOOSE_ALLOWLIST\") {\n        Err(_) => {\n            // Environment variable not set, no allowlist to enforce",
      "description": null
    },
    {
      "key": "GOOSE_ALLOWLIST_BYPASS",
      "usage_type": "potential_env_vars",
      "method": "potential_env_vars",
      "file_path": "crates/goose-server/src/routes/extension.rs",
      "line_number": 392,
      "context": "fn is_command_allowed(cmd: &str, args: &[String]) -> bool {\n    // Check if bypass is enabled\n    if let Ok(bypass_value) = env::var(\"GOOSE_ALLOWLIST_BYPASS\") {\n        if bypass_value.to_lowercase() == \"true\" {\n            // Bypass the allowlist check",
      "description": null
    }
  ]
}