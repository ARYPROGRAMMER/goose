# Configuration for cross-compiling using cross
[target.aarch64-unknown-linux-gnu]
xargo = false
pre-build = [
    # Add the ARM64 architecture and install necessary dependencies
    "dpkg --add-architecture arm64",
    """\
    apt-get update --fix-missing && apt-get install -y \
     pkg-config \
     libssl-dev:arm64 \
     libdbus-1-dev:arm64 \
     libxcb1-dev:arm64
    """
]

[target.x86_64-unknown-linux-gnu]
xargo = false
pre-build = [
    # Install necessary dependencies for x86_64
    # We don't need architecture-specific flags because x86_64 dependencies are installable on Ubuntu system
    """\
    apt-get update && apt-get install -y \
     pkg-config \
     libssl-dev \
     libdbus-1-dev \
     libxcb1-dev \
    """
]

[target.x86_64-pc-windows-gnu]
image = "dockcross/windows-static-x64:latest"
# CRITICAL FIX: The internal build environment uses RUSTFLAGS="-C target-cpu=native"
# which compiles for the build machine's specific CPU, potentially using AVX/AVX2
# instructions not available on all target machines. Force baseline compatibility.
env = { 
    "RUST_LOG" = "debug", 
    "RUST_BACKTRACE" = "1", 
    "CROSS_VERBOSE" = "1",
    # Override any target-cpu=native with explicit baseline compatibility
    "RUSTFLAGS" = "-C target-cpu=x86-64 -C target-feature=-avx -C target-feature=-avx2 -C target-feature=-fma -C target-feature=-bmi1 -C target-feature=-bmi2"
}
