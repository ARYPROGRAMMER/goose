# Configuration for cross-compiling using cross
[target.aarch64-unknown-linux-gnu]
xargo = false
pre-build = [
    # Add the ARM64 architecture and install necessary dependencies
    "dpkg --add-architecture arm64",
    """\
    apt-get update --fix-missing && apt-get install -y \
     pkg-config \
     libssl-dev:arm64 \
     libdbus-1-dev:arm64 \
     libxcb1-dev:arm64
    """
]

[target.x86_64-unknown-linux-gnu]
xargo = false
pre-build = [
    # Install necessary dependencies for x86_64
    # We don't need architecture-specific flags because x86_64 dependencies are installable on Ubuntu system
    """\
    apt-get update && apt-get install -y \
     pkg-config \
     libssl-dev \
     libdbus-1-dev \
     libxcb1-dev \
    """
]

[target.x86_64-pc-windows-gnu]
# Try a different base image that might be more compatible
image = "rust:latest"
pre-build = [
    "apt-get update && apt-get install -y mingw-w64"
]
# Enable verbose output for Windows builds and add CPU compatibility flags
env = { 
    "RUST_LOG" = "debug", 
    "RUST_BACKTRACE" = "1", 
    "CROSS_VERBOSE" = "1",
    # Use most conservative settings to avoid illegal instructions
    "RUSTFLAGS" = "-C target-cpu=x86-64 -C target-feature=-avx -C target-feature=-avx2 -C target-feature=-fma -C opt-level=1 -C debug-assertions=on"
}
