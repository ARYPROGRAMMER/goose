{
  "summary": {
    "total_usages": 584,
    "unique_keys": 139,
    "by_category": {
      "environment": 54,
      "config_file": 71,
      "secrets": 21,
      "cli_flags": 11
    },
    "by_method": {
      "env_remove": 46,
      "env_var": 128,
      "config_get": 137,
      "env_set": 61,
      "config_set": 117,
      "config_delete": 5,
      "secret_get": 47,
      "secret_set": 20,
      "secret_delete": 9,
      "clap_long": 9,
      "clap_short": 3,
      "env_var_os": 2
    },
    "files_analyzed": 58,
    "test_usages": 2
  },
  "configuration_items": {
    "DATABRICKS_TOKEN": {
      "key": "DATABRICKS_TOKEN",
      "category": "environment",
      "methods": [
        "secret_get",
        "env_remove"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose/examples/databricks_oauth.rs",
          "line": 16,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clear any token to force OAuth\n    std::env::remove_var(\"DATABRICKS_TOKEN\");\n\n    // Create the provider"
        },
        {
          "file": "crates/goose/examples/databricks_oauth.rs",
          "line": 16,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clear any token to force OAuth\n    std::env::remove_var(\"DATABRICKS_TOKEN\");\n\n    // Create the provider"
        },
        {
          "file": "crates/goose/src/providers/databricks.rs",
          "line": 128,
          "method": "secret_get",
          "is_test": false,
          "context": "let retry_config = Self::load_retry_config(config);\n\n        let auth = if let Ok(api_key) = config.get_secret(\"DATABRICKS_TOKEN\") {\n            DatabricksAuth::token(api_key)\n        } else {"
        },
        {
          "file": "crates/goose/src/providers/databricks.rs",
          "line": 128,
          "method": "secret_get",
          "is_test": false,
          "context": "let retry_config = Self::load_retry_config(config);\n\n        let auth = if let Ok(api_key) = config.get_secret(\"DATABRICKS_TOKEN\") {\n            DatabricksAuth::token(api_key)\n        } else {"
        }
      ]
    },
    "PORT": {
      "key": "PORT",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 6,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1413,
          "method": "env_set",
          "is_test": false,
          "context": "// Test number environment variable\n        std::env::set_var(\"PORT\", \"8080\");\n        let value: i32 = config.get_param(\"port\")?;\n        assert_eq!(value, 8080);"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1413,
          "method": "env_set",
          "is_test": false,
          "context": "// Test number environment variable\n        std::env::set_var(\"PORT\", \"8080\");\n        let value: i32 = config.get_param(\"port\")?;\n        assert_eq!(value, 8080);"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1435,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clean up\n        std::env::remove_var(\"PROVIDER\");\n        std::env::remove_var(\"PORT\");\n        std::env::remove_var(\"ENABLED\");\n        std::env::remove_var(\"CONFIG\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1435,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clean up\n        std::env::remove_var(\"PROVIDER\");\n        std::env::remove_var(\"PORT\");\n        std::env::remove_var(\"ENABLED\");\n        std::env::remove_var(\"CONFIG\");"
        },
        {
          "file": "crates/goose/src/temporal_scheduler.rs",
          "line": 127,
          "method": "env_var",
          "is_test": false,
          "context": "// Check PORT environment variable first\n        if let Ok(port_str) = std::env::var(\"PORT\") {\n            if let Ok(port) = port_str.parse::<u16>() {\n                if Self::is_temporal_service_running(http_client, port).await {"
        },
        {
          "file": "crates/goose/src/temporal_scheduler.rs",
          "line": 127,
          "method": "env_var",
          "is_test": false,
          "context": "// Check PORT environment variable first\n        if let Ok(port_str) = std::env::var(\"PORT\") {\n            if let Ok(port) = port_str.parse::<u16>() {\n                if Self::is_temporal_service_running(http_client, port).await {"
        }
      ]
    },
    "GOOSE_PROVIDER": {
      "key": "GOOSE_PROVIDER",
      "category": "config_file",
      "methods": [
        "env_set",
        "config_get",
        "config_set",
        "env_remove"
      ],
      "description": null,
      "usage_count": 18,
      "locations": [
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 297,
          "method": "config_get",
          "is_test": false,
          "context": "// Get current default provider if it exists\n    let current_provider: Option<String> = config.get_param(\"GOOSE_PROVIDER\").ok();\n    let default_provider = current_provider.unwrap_or_default();"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 297,
          "method": "config_get",
          "is_test": false,
          "context": "// Get current default provider if it exists\n    let current_provider: Option<String> = config.get_param(\"GOOSE_PROVIDER\").ok();\n    let default_provider = current_provider.unwrap_or_default();"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 502,
          "method": "config_set",
          "is_test": false,
          "context": "Ok((_message, _usage)) => {\n            // Update config with new values only if the test succeeds\n            config.set_param(\"GOOSE_PROVIDER\", Value::String(provider_name.to_string()))?;\n            config.set_param(\"GOOSE_MODEL\", Value::String(model.clone()))?;\n            cliclack::outro(\"Configuration saved successfully\")?;"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 502,
          "method": "config_set",
          "is_test": false,
          "context": "Ok((_message, _usage)) => {\n            // Update config with new values only if the test succeeds\n            config.set_param(\"GOOSE_PROVIDER\", Value::String(provider_name.to_string()))?;\n            config.set_param(\"GOOSE_MODEL\", Value::String(model.clone()))?;\n            cliclack::outro(\"Configuration saved successfully\")?;"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 502,
          "method": "config_set",
          "is_test": false,
          "context": "Ok((_message, _usage)) => {\n            // Update config with new values only if the test succeeds\n            config.set_param(\"GOOSE_PROVIDER\", Value::String(provider_name.to_string()))?;\n            config.set_param(\"GOOSE_MODEL\", Value::String(model.clone()))?;\n            cliclack::outro(\"Configuration saved successfully\")?;"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1310,
          "method": "config_get",
          "is_test": false,
          "context": "let provider_name: String = config\n        .get_param(\"GOOSE_PROVIDER\")\n        .expect(\"No provider configured. Please set model provider first\");"
        },
        {
          "file": "crates/goose-cli/src/commands/web.rs",
          "line": 87,
          "method": "config_get",
          "is_test": false,
          "context": "let config = goose::config::Config::global();\n\n    let provider_name: String = match config.get_param(\"GOOSE_PROVIDER\") {\n        Ok(p) => p,\n        Err(_) => {"
        },
        {
          "file": "crates/goose-cli/src/commands/web.rs",
          "line": 87,
          "method": "config_get",
          "is_test": false,
          "context": "let config = goose::config::Config::global();\n\n    let provider_name: String = match config.get_param(\"GOOSE_PROVIDER\") {\n        Ok(p) => p,\n        Err(_) => {"
        },
        {
          "file": "crates/goose-cli/src/session/builder.rs",
          "line": 187,
          "method": "config_get",
          "is_test": false,
          "context": ".and_then(|s| s.goose_provider.clone())\n        })\n        .or_else(|| config.get_param(\"GOOSE_PROVIDER\").ok())\n        .expect(\"No provider configured. Run 'goose configure' first\");"
        },
        {
          "file": "crates/goose-cli/src/session/builder.rs",
          "line": 187,
          "method": "config_get",
          "is_test": false,
          "context": ".and_then(|s| s.goose_provider.clone())\n        })\n        .or_else(|| config.get_param(\"GOOSE_PROVIDER\").ok())\n        .expect(\"No provider configured. Run 'goose configure' first\");"
        },
        {
          "file": "crates/goose/src/agents/agent.rs",
          "line": 1370,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n        let provider_name: String = config\n            .get_param(\"GOOSE_PROVIDER\")\n            .expect(\"No provider configured. Run 'goose configure' first\");"
        },
        {
          "file": "crates/goose/src/config/signup_openrouter/mod.rs",
          "line": 169,
          "method": "config_set",
          "is_test": false,
          "context": "pub fn configure_openrouter(config: &Config, api_key: String) -> Result<()> {\n    config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(\n        \"GOOSE_MODEL\","
        },
        {
          "file": "crates/goose/src/config/signup_openrouter/mod.rs",
          "line": 169,
          "method": "config_set",
          "is_test": false,
          "context": "pub fn configure_openrouter(config: &Config, api_key: String) -> Result<()> {\n    config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(\n        \"GOOSE_MODEL\","
        },
        {
          "file": "crates/goose/src/config/signup_openrouter/mod.rs",
          "line": 169,
          "method": "config_set",
          "is_test": false,
          "context": "pub fn configure_openrouter(config: &Config, api_key: String) -> Result<()> {\n    config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(\n        \"GOOSE_MODEL\","
        },
        {
          "file": "crates/goose/src/scheduler.rs",
          "line": 1125,
          "method": "config_get",
          "is_test": false,
          "context": "} else {\n        let global_config = Config::global();\n        let provider_name: String = match global_config.get_param(\"GOOSE_PROVIDER\") {\n            Ok(name) => name,\n            Err(_) => return Err(JobExecutionError {"
        },
        {
          "file": "crates/goose/src/scheduler.rs",
          "line": 1125,
          "method": "config_get",
          "is_test": false,
          "context": "} else {\n        let global_config = Config::global();\n        let provider_name: String = match global_config.get_param(\"GOOSE_PROVIDER\") {\n            Ok(name) => name,\n            Err(_) => return Err(JobExecutionError {"
        },
        {
          "file": "crates/goose/src/scheduler.rs",
          "line": 1427,
          "method": "env_set",
          "is_test": false,
          "context": "async fn test_scheduled_session_has_schedule_id() -> Result<(), Box<dyn std::error::Error>> {\n        // Set environment variables for the test\n        env::set_var(\"GOOSE_PROVIDER\", \"test_provider\");\n        env::set_var(\"GOOSE_MODEL\", \"test_model\");"
        },
        {
          "file": "crates/goose/src/scheduler.rs",
          "line": 1521,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clean up environment variables\n        env::remove_var(\"GOOSE_PROVIDER\");\n        env::remove_var(\"GOOSE_MODEL\");"
        }
      ]
    },
    "GOOSE_MODEL": {
      "key": "GOOSE_MODEL",
      "category": "environment",
      "methods": [
        "config_get",
        "env_remove",
        "env_var",
        "config_set",
        "env_set"
      ],
      "description": null,
      "usage_count": 21,
      "locations": [
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 442,
          "method": "env_var",
          "is_test": false,
          "context": "Ok(None) => {\n            let default_model =\n                std::env::var(\"GOOSE_MODEL\").unwrap_or(provider_meta.default_model.clone());\n            cliclack::input(\"Enter a model from that provider:\")\n                .default_input(&default_model)"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 442,
          "method": "env_var",
          "is_test": false,
          "context": "Ok(None) => {\n            let default_model =\n                std::env::var(\"GOOSE_MODEL\").unwrap_or(provider_meta.default_model.clone());\n            cliclack::input(\"Enter a model from that provider:\")\n                .default_input(&default_model)"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 503,
          "method": "config_set",
          "is_test": false,
          "context": "// Update config with new values only if the test succeeds\n            config.set_param(\"GOOSE_PROVIDER\", Value::String(provider_name.to_string()))?;\n            config.set_param(\"GOOSE_MODEL\", Value::String(model.clone()))?;\n            cliclack::outro(\"Configuration saved successfully\")?;\n            Ok(true)"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 503,
          "method": "config_set",
          "is_test": false,
          "context": "// Update config with new values only if the test succeeds\n            config.set_param(\"GOOSE_PROVIDER\", Value::String(provider_name.to_string()))?;\n            config.set_param(\"GOOSE_MODEL\", Value::String(model.clone()))?;\n            cliclack::outro(\"Configuration saved successfully\")?;\n            Ok(true)"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 503,
          "method": "config_set",
          "is_test": false,
          "context": "// Update config with new values only if the test succeeds\n            config.set_param(\"GOOSE_PROVIDER\", Value::String(provider_name.to_string()))?;\n            config.set_param(\"GOOSE_MODEL\", Value::String(model.clone()))?;\n            cliclack::outro(\"Configuration saved successfully\")?;\n            Ok(true)"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1314,
          "method": "config_get",
          "is_test": false,
          "context": "let model: String = config\n        .get_param(\"GOOSE_MODEL\")\n        .expect(\"No model configured. Please set model first\");\n    let model_config = goose::model::ModelConfig::new(&model)?;"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1578,
          "method": "config_get",
          "is_test": false,
          "context": "// Test configuration - get the model that was configured\n            println!(\"\\nTesting configuration...\");\n            let configured_model: String = config.get_param(\"GOOSE_MODEL\")?;\n            let model_config = match goose::model::ModelConfig::new(&configured_model) {\n                Ok(config) => config,"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1578,
          "method": "config_get",
          "is_test": false,
          "context": "// Test configuration - get the model that was configured\n            println!(\"\\nTesting configuration...\");\n            let configured_model: String = config.get_param(\"GOOSE_MODEL\")?;\n            let model_config = match goose::model::ModelConfig::new(&configured_model) {\n                Ok(config) => config,"
        },
        {
          "file": "crates/goose-cli/src/commands/web.rs",
          "line": 95,
          "method": "config_get",
          "is_test": false,
          "context": "};\n\n    let model: String = match config.get_param(\"GOOSE_MODEL\") {\n        Ok(m) => m,\n        Err(_) => {"
        },
        {
          "file": "crates/goose-cli/src/commands/web.rs",
          "line": 95,
          "method": "config_get",
          "is_test": false,
          "context": "};\n\n    let model: String = match config.get_param(\"GOOSE_MODEL\") {\n        Ok(m) => m,\n        Err(_) => {"
        },
        {
          "file": "crates/goose-cli/src/session/builder.rs",
          "line": 198,
          "method": "config_get",
          "is_test": false,
          "context": ".and_then(|s| s.goose_model.clone())\n        })\n        .or_else(|| config.get_param(\"GOOSE_MODEL\").ok())\n        .expect(\"No model configured. Run 'goose configure' first\");"
        },
        {
          "file": "crates/goose-cli/src/session/builder.rs",
          "line": 198,
          "method": "config_get",
          "is_test": false,
          "context": ".and_then(|s| s.goose_model.clone())\n        })\n        .or_else(|| config.get_param(\"GOOSE_MODEL\").ok())\n        .expect(\"No model configured. Run 'goose configure' first\");"
        },
        {
          "file": "crates/goose-server/src/routes/agent.rs",
          "line": 249,
          "method": "config_get",
          "is_test": false,
          "context": "let model = match payload\n        .model\n        .or_else(|| config.get_param(\"GOOSE_MODEL\").ok())\n    {\n        Some(m) => m,"
        },
        {
          "file": "crates/goose-server/src/routes/agent.rs",
          "line": 249,
          "method": "config_get",
          "is_test": false,
          "context": "let model = match payload\n        .model\n        .or_else(|| config.get_param(\"GOOSE_MODEL\").ok())\n    {\n        Some(m) => m,"
        },
        {
          "file": "crates/goose/src/config/signup_openrouter/mod.rs",
          "line": 170,
          "method": "config_set",
          "is_test": false,
          "context": "config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(\n        \"GOOSE_MODEL\",\n        Value::String(OPENROUTER_DEFAULT_MODEL.to_string()),"
        },
        {
          "file": "crates/goose/src/config/signup_openrouter/mod.rs",
          "line": 170,
          "method": "config_set",
          "is_test": false,
          "context": "config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(\n        \"GOOSE_MODEL\",\n        Value::String(OPENROUTER_DEFAULT_MODEL.to_string()),"
        },
        {
          "file": "crates/goose/src/config/signup_openrouter/mod.rs",
          "line": 170,
          "method": "config_set",
          "is_test": false,
          "context": "config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param(\n        \"GOOSE_MODEL\",\n        Value::String(OPENROUTER_DEFAULT_MODEL.to_string()),"
        },
        {
          "file": "crates/goose/src/scheduler.rs",
          "line": 1135,
          "method": "config_get",
          "is_test": false,
          "context": "};\n        let model_name: String =\n            match global_config.get_param(\"GOOSE_MODEL\") {\n                Ok(name) => name,\n                Err(_) => return Err(JobExecutionError {"
        },
        {
          "file": "crates/goose/src/scheduler.rs",
          "line": 1135,
          "method": "config_get",
          "is_test": false,
          "context": "};\n        let model_name: String =\n            match global_config.get_param(\"GOOSE_MODEL\") {\n                Ok(name) => name,\n                Err(_) => return Err(JobExecutionError {"
        },
        {
          "file": "crates/goose/src/scheduler.rs",
          "line": 1428,
          "method": "env_set",
          "is_test": false,
          "context": "// Set environment variables for the test\n        env::set_var(\"GOOSE_PROVIDER\", \"test_provider\");\n        env::set_var(\"GOOSE_MODEL\", \"test_model\");\n\n        let temp_dir = tempdir()?;"
        },
        {
          "file": "crates/goose/src/scheduler.rs",
          "line": 1522,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clean up environment variables\n        env::remove_var(\"GOOSE_PROVIDER\");\n        env::remove_var(\"GOOSE_MODEL\");\n\n        Ok(())"
        }
      ]
    },
    "GOOSE_CONTEXT_LIMIT": {
      "key": "GOOSE_CONTEXT_LIMIT",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 5,
      "locations": [
        {
          "file": "crates/goose/src/model.rs",
          "line": 115,
          "method": "env_var",
          "is_test": false,
          "context": "}\n        }\n        if let Ok(val) = std::env::var(\"GOOSE_CONTEXT_LIMIT\") {\n            return Self::validate_context_limit(&val, \"GOOSE_CONTEXT_LIMIT\").map(Some);\n        }"
        },
        {
          "file": "crates/goose/src/model.rs",
          "line": 115,
          "method": "env_var",
          "is_test": false,
          "context": "}\n        }\n        if let Ok(val) = std::env::var(\"GOOSE_CONTEXT_LIMIT\") {\n            return Self::validate_context_limit(&val, \"GOOSE_CONTEXT_LIMIT\").map(Some);\n        }"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 399,
          "method": "env_var",
          "is_test": false,
          "context": "env::var(\"GOOSE_WORKER_CONTEXT_LIMIT\").ok(),\n            ),\n            (\"GOOSE_CONTEXT_LIMIT\", env::var(\"GOOSE_CONTEXT_LIMIT\").ok()),\n        ];"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 423,
          "method": "env_set",
          "is_test": false,
          "context": "// Test case 3: With GOOSE_CONTEXT_LIMIT - should override original\n        env::set_var(\"GOOSE_CONTEXT_LIMIT\", \"64000\");\n        let _result = create_lead_worker_from_env(\"openai\", &default_model, \"gpt-4o\");\n        env::remove_var(\"GOOSE_CONTEXT_LIMIT\");"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 425,
          "method": "env_remove",
          "is_test": false,
          "context": "env::set_var(\"GOOSE_CONTEXT_LIMIT\", \"64000\");\n        let _result = create_lead_worker_from_env(\"openai\", &default_model, \"gpt-4o\");\n        env::remove_var(\"GOOSE_CONTEXT_LIMIT\");\n\n        // Restore env vars"
        }
      ]
    },
    "GOOSE_TOOLSHIM": {
      "key": "GOOSE_TOOLSHIM",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 454,
          "method": "env_var",
          "is_test": false,
          "context": "// Create model config with env var settings\n    let toolshim_enabled = std::env::var(\"GOOSE_TOOLSHIM\")\n        .map(|val| val == \"1\" || val.to_lowercase() == \"true\")\n        .unwrap_or(false);"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 454,
          "method": "env_var",
          "is_test": false,
          "context": "// Create model config with env var settings\n    let toolshim_enabled = std::env::var(\"GOOSE_TOOLSHIM\")\n        .map(|val| val == \"1\" || val.to_lowercase() == \"true\")\n        .unwrap_or(false);"
        },
        {
          "file": "crates/goose/src/model.rs",
          "line": 162,
          "method": "env_var",
          "is_test": false,
          "context": "fn parse_toolshim() -> Result<bool, ConfigError> {\n        if let Ok(val) = std::env::var(\"GOOSE_TOOLSHIM\") {\n            match val.to_lowercase().as_str() {\n                \"1\" | \"true\" | \"yes\" | \"on\" => Ok(true),"
        },
        {
          "file": "crates/goose/src/model.rs",
          "line": 162,
          "method": "env_var",
          "is_test": false,
          "context": "fn parse_toolshim() -> Result<bool, ConfigError> {\n        if let Ok(val) = std::env::var(\"GOOSE_TOOLSHIM\") {\n            match val.to_lowercase().as_str() {\n                \"1\" | \"true\" | \"yes\" | \"on\" => Ok(true),"
        }
      ]
    },
    "GOOSE_TOOLSHIM_OLLAMA_MODEL": {
      "key": "GOOSE_TOOLSHIM_OLLAMA_MODEL",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 6,
      "locations": [
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 461,
          "method": "env_var",
          "is_test": false,
          "context": ".with_max_tokens(Some(50))\n        .with_toolshim(toolshim_enabled)\n        .with_toolshim_model(std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\").ok());\n\n    let provider = create(provider_name, model_config)?;"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 461,
          "method": "env_var",
          "is_test": false,
          "context": ".with_max_tokens(Some(50))\n        .with_toolshim(toolshim_enabled)\n        .with_toolshim_model(std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\").ok());\n\n    let provider = create(provider_name, model_config)?;"
        },
        {
          "file": "crates/goose/src/model.rs",
          "line": 178,
          "method": "env_var",
          "is_test": false,
          "context": "fn parse_toolshim_model() -> Result<Option<String>, ConfigError> {\n        match std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\") {\n            Ok(val) if val.trim().is_empty() => Err(ConfigError::InvalidValue(\n                \"GOOSE_TOOLSHIM_OLLAMA_MODEL\".to_string(),"
        },
        {
          "file": "crates/goose/src/model.rs",
          "line": 178,
          "method": "env_var",
          "is_test": false,
          "context": "fn parse_toolshim_model() -> Result<Option<String>, ConfigError> {\n        match std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\") {\n            Ok(val) if val.trim().is_empty() => Err(ConfigError::InvalidValue(\n                \"GOOSE_TOOLSHIM_OLLAMA_MODEL\".to_string(),"
        },
        {
          "file": "crates/goose/src/providers/toolshim.rs",
          "line": 282,
          "method": "env_var",
          "is_test": false,
          "context": "// Determine which model to use for interpretation (from env var or default)\n        let interpreter_model = std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\")\n            .unwrap_or_else(|_| DEFAULT_INTERPRETER_MODEL_OLLAMA.to_string());"
        },
        {
          "file": "crates/goose/src/providers/toolshim.rs",
          "line": 282,
          "method": "env_var",
          "is_test": false,
          "context": "// Determine which model to use for interpretation (from env var or default)\n        let interpreter_model = std::env::var(\"GOOSE_TOOLSHIM_OLLAMA_MODEL\")\n            .unwrap_or_else(|_| DEFAULT_INTERPRETER_MODEL_OLLAMA.to_string());"
        }
      ]
    },
    "OTEL_EXPORTER_OTLP_ENDPOINT": {
      "key": "OTEL_EXPORTER_OTLP_ENDPOINT",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 8,
      "locations": [
        {
          "file": "crates/goose-cli/src/main.rs",
          "line": 13,
          "method": "env_var",
          "is_test": false,
          "context": "// Only wait for telemetry flush if OTLP is configured\n    if std::env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\").is_ok() {\n        // Use a shorter, dynamic wait with max timeout\n        let max_wait = tokio::time::Duration::from_millis(500);"
        },
        {
          "file": "crates/goose-cli/src/main.rs",
          "line": 13,
          "method": "env_var",
          "is_test": false,
          "context": "// Only wait for telemetry flush if OTLP is configured\n    if std::env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\").is_ok() {\n        // Use a shorter, dynamic wait with max timeout\n        let max_wait = tokio::time::Duration::from_millis(500);"
        },
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 35,
          "method": "env_var",
          "is_test": false,
          "context": "impl OtlpConfig {\n    pub fn from_env() -> Option<Self> {\n        if let Ok(endpoint) = env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\") {\n            let mut config = Self {\n                endpoint,"
        },
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 249,
          "method": "env_var",
          "is_test": false,
          "context": "#[test]\n    fn test_otlp_config_from_env() {\n        let original_endpoint = env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\").ok();\n        let original_timeout = env::var(\"OTEL_EXPORTER_OTLP_TIMEOUT\").ok();"
        },
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 252,
          "method": "env_remove",
          "is_test": false,
          "context": "let original_timeout = env::var(\"OTEL_EXPORTER_OTLP_TIMEOUT\").ok();\n\n        env::remove_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\");\n        assert!(OtlpConfig::from_env().is_none());"
        },
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 255,
          "method": "env_set",
          "is_test": false,
          "context": "assert!(OtlpConfig::from_env().is_none());\n\n        env::set_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\", \"http://test:4317\");\n        env::set_var(\"OTEL_EXPORTER_OTLP_TIMEOUT\", \"5000\");"
        },
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 263,
          "method": "env_set",
          "is_test": false,
          "context": "match original_endpoint {\n            Some(val) => env::set_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\", val),\n            None => env::remove_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\"),\n        }"
        },
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 264,
          "method": "env_remove",
          "is_test": false,
          "context": "match original_endpoint {\n            Some(val) => env::set_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\", val),\n            None => env::remove_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\"),\n        }\n        match original_timeout {"
        }
      ]
    },
    "OTEL_EXPORTER_OTLP_TIMEOUT": {
      "key": "OTEL_EXPORTER_OTLP_TIMEOUT",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 5,
      "locations": [
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 41,
          "method": "env_var",
          "is_test": false,
          "context": "};\n\n            if let Ok(timeout_str) = env::var(\"OTEL_EXPORTER_OTLP_TIMEOUT\") {\n                if let Ok(timeout_ms) = timeout_str.parse::<u64>() {\n                    config.timeout = Duration::from_millis(timeout_ms);"
        },
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 250,
          "method": "env_var",
          "is_test": false,
          "context": "fn test_otlp_config_from_env() {\n        let original_endpoint = env::var(\"OTEL_EXPORTER_OTLP_ENDPOINT\").ok();\n        let original_timeout = env::var(\"OTEL_EXPORTER_OTLP_TIMEOUT\").ok();\n\n        env::remove_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\");"
        },
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 256,
          "method": "env_set",
          "is_test": false,
          "context": "env::set_var(\"OTEL_EXPORTER_OTLP_ENDPOINT\", \"http://test:4317\");\n        env::set_var(\"OTEL_EXPORTER_OTLP_TIMEOUT\", \"5000\");\n\n        let config = OtlpConfig::from_env().unwrap();"
        },
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 267,
          "method": "env_set",
          "is_test": false,
          "context": "}\n        match original_timeout {\n            Some(val) => env::set_var(\"OTEL_EXPORTER_OTLP_TIMEOUT\", val),\n            None => env::remove_var(\"OTEL_EXPORTER_OTLP_TIMEOUT\"),\n        }"
        },
        {
          "file": "crates/goose/src/tracing/otlp_layer.rs",
          "line": 268,
          "method": "env_remove",
          "is_test": false,
          "context": "match original_timeout {\n            Some(val) => env::set_var(\"OTEL_EXPORTER_OTLP_TIMEOUT\", val),\n            None => env::remove_var(\"OTEL_EXPORTER_OTLP_TIMEOUT\"),\n        }\n    }"
        }
      ]
    },
    "LANGFUSE_PUBLIC_KEY": {
      "key": "LANGFUSE_PUBLIC_KEY",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 8,
      "locations": [
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 461,
          "method": "env_var",
          "is_test": false,
          "context": "// Store original environment variables (both sets)\n        let original_vars = [\n            (\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),"
        },
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 483,
          "method": "env_set",
          "is_test": false,
          "context": "// Test with standard Langfuse variables\n        env::set_var(\"LANGFUSE_PUBLIC_KEY\", \"test_public_key\");\n        env::set_var(\"LANGFUSE_SECRET_KEY\", \"test_secret_key\");\n        assert!(langfuse_layer::create_langfuse_observer().is_some());"
        },
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 488,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clear and test with init project variables\n        env::remove_var(\"LANGFUSE_PUBLIC_KEY\");\n        env::remove_var(\"LANGFUSE_SECRET_KEY\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test_public_key\");"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 156,
          "method": "env_var",
          "is_test": false,
          "context": "pub fn create_langfuse_observer() -> Option<ObservationLayer> {\n    let public_key = env::var(\"LANGFUSE_PUBLIC_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 413,
          "method": "env_set",
          "is_test": false,
          "context": "// Test 2: Only public key set (regular)\n        env::set_var(\"LANGFUSE_PUBLIC_KEY\", \"test-public-key\");\n        let observer = create_langfuse_observer();\n        assert!("
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 419,
          "method": "env_remove",
          "is_test": false,
          "context": "\"Observer should be None with only public key\"\n        );\n        env::remove_var(\"LANGFUSE_PUBLIC_KEY\");\n\n        // Test 3: Only secret key set (regular)"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 449,
          "method": "env_set",
          "is_test": false,
          "context": "// Test 6: Both regular keys set (should succeed)\n        env::set_var(\"LANGFUSE_PUBLIC_KEY\", \"test-public-key\");\n        env::set_var(\"LANGFUSE_SECRET_KEY\", \"test-secret-key\");\n        env::set_var(\"LANGFUSE_URL\", fixture.mock_server_uri());"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 459,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clean up regular keys\n        env::remove_var(\"LANGFUSE_PUBLIC_KEY\");\n        env::remove_var(\"LANGFUSE_SECRET_KEY\");"
        }
      ]
    },
    "LANGFUSE_INIT_PROJECT_PUBLIC_KEY": {
      "key": "LANGFUSE_INIT_PROJECT_PUBLIC_KEY",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 7,
      "locations": [
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 466,
          "method": "env_var",
          "is_test": false,
          "context": "(\n                \"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\",\n                env::var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\").ok(),\n            ),\n            ("
        },
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 490,
          "method": "env_set",
          "is_test": false,
          "context": "env::remove_var(\"LANGFUSE_PUBLIC_KEY\");\n        env::remove_var(\"LANGFUSE_SECRET_KEY\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test_public_key\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\", \"test_secret_key\");\n        assert!(langfuse_layer::create_langfuse_observer().is_some());"
        },
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 495,
          "method": "env_remove",
          "is_test": false,
          "context": "// Test fallback behavior\n        env::remove_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\");\n        assert!(langfuse_layer::create_langfuse_observer().is_none());"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 157,
          "method": "env_var",
          "is_test": false,
          "context": "pub fn create_langfuse_observer() -> Option<ObservationLayer> {\n    let public_key = env::var(\"LANGFUSE_PUBLIC_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 431,
          "method": "env_set",
          "is_test": false,
          "context": "// Test 4: Only public key set (init project)\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test-public-key\");\n        let observer = create_langfuse_observer();\n        assert!("
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 437,
          "method": "env_remove",
          "is_test": false,
          "context": "\"Observer should be None with only init project public key\"\n        );\n        env::remove_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\");\n\n        // Test 5: Only secret key set (init project)"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 463,
          "method": "env_set",
          "is_test": false,
          "context": "// Test 7: Both init project keys set (should succeed)\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test-public-key\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\", \"test-secret-key\");\n        let observer = create_langfuse_observer();"
        }
      ]
    },
    "LANGFUSE_SECRET_KEY": {
      "key": "LANGFUSE_SECRET_KEY",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 8,
      "locations": [
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 462,
          "method": "env_var",
          "is_test": false,
          "context": "let original_vars = [\n            (\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),\n            ("
        },
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 484,
          "method": "env_set",
          "is_test": false,
          "context": "// Test with standard Langfuse variables\n        env::set_var(\"LANGFUSE_PUBLIC_KEY\", \"test_public_key\");\n        env::set_var(\"LANGFUSE_SECRET_KEY\", \"test_secret_key\");\n        assert!(langfuse_layer::create_langfuse_observer().is_some());"
        },
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 489,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clear and test with init project variables\n        env::remove_var(\"LANGFUSE_PUBLIC_KEY\");\n        env::remove_var(\"LANGFUSE_SECRET_KEY\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test_public_key\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\", \"test_secret_key\");"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 160,
          "method": "env_var",
          "is_test": false,
          "context": ".unwrap_or_default(); // Use empty string if not found\n\n    let secret_key = env::var(\"LANGFUSE_SECRET_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 422,
          "method": "env_set",
          "is_test": false,
          "context": "// Test 3: Only secret key set (regular)\n        env::set_var(\"LANGFUSE_SECRET_KEY\", \"test-secret-key\");\n        let observer = create_langfuse_observer();\n        assert!("
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 428,
          "method": "env_remove",
          "is_test": false,
          "context": "\"Observer should be None with only secret key\"\n        );\n        env::remove_var(\"LANGFUSE_SECRET_KEY\");\n\n        // Test 4: Only public key set (init project)"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 450,
          "method": "env_set",
          "is_test": false,
          "context": "// Test 6: Both regular keys set (should succeed)\n        env::set_var(\"LANGFUSE_PUBLIC_KEY\", \"test-public-key\");\n        env::set_var(\"LANGFUSE_SECRET_KEY\", \"test-secret-key\");\n        env::set_var(\"LANGFUSE_URL\", fixture.mock_server_uri());\n        let observer = create_langfuse_observer();"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 460,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clean up regular keys\n        env::remove_var(\"LANGFUSE_PUBLIC_KEY\");\n        env::remove_var(\"LANGFUSE_SECRET_KEY\");\n\n        // Test 7: Both init project keys set (should succeed)"
        }
      ]
    },
    "LANGFUSE_INIT_PROJECT_SECRET_KEY": {
      "key": "LANGFUSE_INIT_PROJECT_SECRET_KEY",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 6,
      "locations": [
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 470,
          "method": "env_var",
          "is_test": false,
          "context": "(\n                \"LANGFUSE_INIT_PROJECT_SECRET_KEY\",\n                env::var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\").ok(),\n            ),\n        ];"
        },
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 491,
          "method": "env_set",
          "is_test": false,
          "context": "env::remove_var(\"LANGFUSE_SECRET_KEY\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test_public_key\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\", \"test_secret_key\");\n        assert!(langfuse_layer::create_langfuse_observer().is_some());"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 161,
          "method": "env_var",
          "is_test": false,
          "context": "let secret_key = env::var(\"LANGFUSE_SECRET_KEY\")\n        .or_else(|_| env::var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\"))\n        .unwrap_or_default(); // Use empty string if not found"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 440,
          "method": "env_set",
          "is_test": false,
          "context": "// Test 5: Only secret key set (init project)\n        env::set_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\", \"test-secret-key\");\n        let observer = create_langfuse_observer();\n        assert!("
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 446,
          "method": "env_remove",
          "is_test": false,
          "context": "\"Observer should be None with only init project secret key\"\n        );\n        env::remove_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\");\n\n        // Test 6: Both regular keys set (should succeed)"
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 464,
          "method": "env_set",
          "is_test": false,
          "context": "// Test 7: Both init project keys set (should succeed)\n        env::set_var(\"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\", \"test-public-key\");\n        env::set_var(\"LANGFUSE_INIT_PROJECT_SECRET_KEY\", \"test-secret-key\");\n        let observer = create_langfuse_observer();\n        assert!("
        }
      ]
    },
    "LANGFUSE_URL": {
      "key": "LANGFUSE_URL",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var"
      ],
      "description": null,
      "usage_count": 3,
      "locations": [
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 463,
          "method": "env_var",
          "is_test": false,
          "context": "(\"LANGFUSE_PUBLIC_KEY\", env::var(\"LANGFUSE_PUBLIC_KEY\").ok()),\n            (\"LANGFUSE_SECRET_KEY\", env::var(\"LANGFUSE_SECRET_KEY\").ok()),\n            (\"LANGFUSE_URL\", env::var(\"LANGFUSE_URL\").ok()),\n            (\n                \"LANGFUSE_INIT_PROJECT_PUBLIC_KEY\","
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 169,
          "method": "env_var",
          "is_test": false,
          "context": "}\n\n    let base_url = env::var(\"LANGFUSE_URL\").unwrap_or_else(|_| DEFAULT_LANGFUSE_URL.to_string());\n\n    let batch_manager = Arc::new(Mutex::new(LangfuseBatchManager::new("
        },
        {
          "file": "crates/goose/src/tracing/langfuse_layer.rs",
          "line": 451,
          "method": "env_set",
          "is_test": false,
          "context": "env::set_var(\"LANGFUSE_PUBLIC_KEY\", \"test-public-key\");\n        env::set_var(\"LANGFUSE_SECRET_KEY\", \"test-secret-key\");\n        env::set_var(\"LANGFUSE_URL\", fixture.mock_server_uri());\n        let observer = create_langfuse_observer();\n        assert!("
        }
      ]
    },
    "OPENAI_API_KEY": {
      "key": "OPENAI_API_KEY",
      "category": "secrets",
      "methods": [
        "config_get",
        "secret_get"
      ],
      "description": null,
      "usage_count": 5,
      "locations": [
        {
          "file": "crates/goose-server/src/routes/audio.rs",
          "line": 100,
          "method": "secret_get",
          "is_test": false,
          "context": "let config = goose::config::Config::global();\n    let api_key: String = config\n        .get_secret(\"OPENAI_API_KEY\")\n        .map_err(|_| StatusCode::PRECONDITION_FAILED)?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 88,
          "method": "config_get",
          "is_test": false,
          "context": "/// // Get a string value\n/// let config = Config::global();\n/// let api_key: String = config.get_param(\"OPENAI_API_KEY\").unwrap();\n///\n/// // Get a complex type"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 88,
          "method": "config_get",
          "is_test": false,
          "context": "/// // Get a string value\n/// let config = Config::global();\n/// let api_key: String = config.get_param(\"OPENAI_API_KEY\").unwrap();\n///\n/// // Get a complex type"
        },
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 61,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"OPENAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENAI_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 61,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"OPENAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENAI_HOST\")"
        }
      ]
    },
    "server": {
      "key": "server",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 97,
          "method": "config_get",
          "is_test": false,
          "context": "/// }\n///\n/// let server_config: ServerConfig = config.get_param(\"server\").unwrap();\n/// ```\n///"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 97,
          "method": "config_get",
          "is_test": false,
          "context": "/// }\n///\n/// let server_config: ServerConfig = config.get_param(\"server\").unwrap();\n/// ```\n///"
        }
      ]
    },
    "test_key": {
      "key": "test_key",
      "category": "config_file",
      "methods": [
        "config_get",
        "config_set"
      ],
      "description": null,
      "usage_count": 7,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 807,
          "method": "config_set",
          "is_test": false,
          "context": "// Set a simple string value\n        config.set_param(\"test_key\", Value::String(\"test_value\".to_string()))?;\n\n        // Test simple string retrieval"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 807,
          "method": "config_set",
          "is_test": false,
          "context": "// Set a simple string value\n        config.set_param(\"test_key\", Value::String(\"test_value\".to_string()))?;\n\n        // Test simple string retrieval"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 807,
          "method": "config_set",
          "is_test": false,
          "context": "// Set a simple string value\n        config.set_param(\"test_key\", Value::String(\"test_value\".to_string()))?;\n\n        // Test simple string retrieval"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 810,
          "method": "config_get",
          "is_test": false,
          "context": "// Test simple string retrieval\n        let value: String = config.get_param(\"test_key\")?;\n        assert_eq!(value, \"test_value\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 810,
          "method": "config_get",
          "is_test": false,
          "context": "// Test simple string retrieval\n        let value: String = config.get_param(\"test_key\")?;\n        assert_eq!(value, \"test_value\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 815,
          "method": "config_get",
          "is_test": false,
          "context": "// Test with environment variable override\n        std::env::set_var(\"TEST_KEY\", \"env_value\");\n        let value: String = config.get_param(\"test_key\")?;\n        assert_eq!(value, \"env_value\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 815,
          "method": "config_get",
          "is_test": false,
          "context": "// Test with environment variable override\n        std::env::set_var(\"TEST_KEY\", \"env_value\");\n        let value: String = config.get_param(\"test_key\")?;\n        assert_eq!(value, \"env_value\");"
        }
      ]
    },
    "complex_key": {
      "key": "complex_key",
      "category": "config_file",
      "methods": [
        "config_get",
        "config_set"
      ],
      "description": null,
      "usage_count": 5,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 833,
          "method": "config_set",
          "is_test": false,
          "context": "// Set a complex value\n        config.set_param(\n            \"complex_key\",\n            serde_json::json!({"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 833,
          "method": "config_set",
          "is_test": false,
          "context": "// Set a complex value\n        config.set_param(\n            \"complex_key\",\n            serde_json::json!({"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 833,
          "method": "config_set",
          "is_test": false,
          "context": "// Set a complex value\n        config.set_param(\n            \"complex_key\",\n            serde_json::json!({"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 841,
          "method": "config_get",
          "is_test": false,
          "context": ")?;\n\n        let value: TestStruct = config.get_param(\"complex_key\")?;\n        assert_eq!(value.field1, \"hello\");\n        assert_eq!(value.field2, 42);"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 841,
          "method": "config_get",
          "is_test": false,
          "context": ")?;\n\n        let value: TestStruct = config.get_param(\"complex_key\")?;\n        assert_eq!(value.field1, \"hello\");\n        assert_eq!(value.field2, 42);"
        }
      ]
    },
    "nonexistent_key": {
      "key": "nonexistent_key",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 853,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE).unwrap();\n\n        let result: Result<String, ConfigError> = config.get_param(\"nonexistent_key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));\n    }"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 853,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE).unwrap();\n\n        let result: Result<String, ConfigError> = config.get_param(\"nonexistent_key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));\n    }"
        }
      ]
    },
    "key": {
      "key": "key",
      "category": "config_file",
      "methods": [
        "config_get",
        "secret_delete",
        "secret_set",
        "config_delete",
        "config_set",
        "secret_get"
      ],
      "description": null,
      "usage_count": 19,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 878,
          "method": "config_set",
          "is_test": false,
          "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE)?;\n\n        config.set_param(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_param(\"key\")?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 878,
          "method": "config_set",
          "is_test": false,
          "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE)?;\n\n        config.set_param(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_param(\"key\")?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 878,
          "method": "config_set",
          "is_test": false,
          "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE)?;\n\n        config.set_param(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_param(\"key\")?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 880,
          "method": "config_get",
          "is_test": false,
          "context": "config.set_param(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_param(\"key\")?;\n        assert_eq!(value, \"value\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 880,
          "method": "config_get",
          "is_test": false,
          "context": "config.set_param(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_param(\"key\")?;\n        assert_eq!(value, \"value\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 883,
          "method": "config_delete",
          "is_test": false,
          "context": "assert_eq!(value, \"value\");\n\n        config.delete(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_param(\"key\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 883,
          "method": "config_delete",
          "is_test": false,
          "context": "assert_eq!(value, \"value\");\n\n        config.delete(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_param(\"key\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 885,
          "method": "config_get",
          "is_test": false,
          "context": "config.delete(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_param(\"key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 885,
          "method": "config_get",
          "is_test": false,
          "context": "config.delete(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_param(\"key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 897,
          "method": "secret_set",
          "is_test": false,
          "context": "let config = Config::new_with_file_secrets(config_file.path(), secrets_file.path())?;\n\n        config.set_secret(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_secret(\"key\")?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 897,
          "method": "secret_set",
          "is_test": false,
          "context": "let config = Config::new_with_file_secrets(config_file.path(), secrets_file.path())?;\n\n        config.set_secret(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_secret(\"key\")?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 897,
          "method": "secret_set",
          "is_test": false,
          "context": "let config = Config::new_with_file_secrets(config_file.path(), secrets_file.path())?;\n\n        config.set_secret(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_secret(\"key\")?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 899,
          "method": "secret_get",
          "is_test": false,
          "context": "config.set_secret(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_secret(\"key\")?;\n        assert_eq!(value, \"value\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 899,
          "method": "secret_get",
          "is_test": false,
          "context": "config.set_secret(\"key\", Value::String(\"value\".to_string()))?;\n\n        let value: String = config.get_secret(\"key\")?;\n        assert_eq!(value, \"value\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 902,
          "method": "secret_delete",
          "is_test": false,
          "context": "assert_eq!(value, \"value\");\n\n        config.delete_secret(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_secret(\"key\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 902,
          "method": "secret_delete",
          "is_test": false,
          "context": "assert_eq!(value, \"value\");\n\n        config.delete_secret(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_secret(\"key\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 902,
          "method": "secret_delete",
          "is_test": false,
          "context": "assert_eq!(value, \"value\");\n\n        config.delete_secret(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_secret(\"key\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 904,
          "method": "secret_get",
          "is_test": false,
          "context": "config.delete_secret(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_secret(\"key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 904,
          "method": "secret_get",
          "is_test": false,
          "context": "config.delete_secret(\"key\")?;\n\n        let result: Result<String, ConfigError> = config.get_secret(\"key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));"
        }
      ]
    },
    "provider": {
      "key": "provider",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1409,
          "method": "config_get",
          "is_test": false,
          "context": "// Test string environment variable (the original issue case)\n        std::env::set_var(\"PROVIDER\", \"ANTHROPIC\");\n        let value: String = config.get_param(\"provider\")?;\n        assert_eq!(value, \"ANTHROPIC\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1409,
          "method": "config_get",
          "is_test": false,
          "context": "// Test string environment variable (the original issue case)\n        std::env::set_var(\"PROVIDER\", \"ANTHROPIC\");\n        let value: String = config.get_param(\"provider\")?;\n        assert_eq!(value, \"ANTHROPIC\");"
        }
      ]
    },
    "port": {
      "key": "port",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1414,
          "method": "config_get",
          "is_test": false,
          "context": "// Test number environment variable\n        std::env::set_var(\"PORT\", \"8080\");\n        let value: i32 = config.get_param(\"port\")?;\n        assert_eq!(value, 8080);"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1414,
          "method": "config_get",
          "is_test": false,
          "context": "// Test number environment variable\n        std::env::set_var(\"PORT\", \"8080\");\n        let value: i32 = config.get_param(\"port\")?;\n        assert_eq!(value, 8080);"
        }
      ]
    },
    "enabled": {
      "key": "enabled",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1419,
          "method": "config_get",
          "is_test": false,
          "context": "// Test boolean environment variable\n        std::env::set_var(\"ENABLED\", \"true\");\n        let value: bool = config.get_param(\"enabled\")?;\n        assert_eq!(value, true);"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1419,
          "method": "config_get",
          "is_test": false,
          "context": "// Test boolean environment variable\n        std::env::set_var(\"ENABLED\", \"true\");\n        let value: bool = config.get_param(\"enabled\")?;\n        assert_eq!(value, true);"
        }
      ]
    },
    "config": {
      "key": "config",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1429,
          "method": "config_get",
          "is_test": false,
          "context": "level: i32,\n        }\n        let value: TestConfig = config.get_param(\"config\")?;\n        assert_eq!(value.debug, true);\n        assert_eq!(value.level, 5);"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1429,
          "method": "config_get",
          "is_test": false,
          "context": "level: i32,\n        }\n        let value: TestConfig = config.get_param(\"config\")?;\n        assert_eq!(value.debug, true);\n        assert_eq!(value.level, 5);"
        }
      ]
    },
    "test_precedence": {
      "key": "test_precedence",
      "category": "config_file",
      "methods": [
        "config_get",
        "config_set"
      ],
      "description": null,
      "usage_count": 7,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1448,
          "method": "config_set",
          "is_test": false,
          "context": "// Set value in config file\n        config.set_param(\"test_precedence\", Value::String(\"file_value\".to_string()))?;\n\n        // Verify file value is returned when no env var"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1448,
          "method": "config_set",
          "is_test": false,
          "context": "// Set value in config file\n        config.set_param(\"test_precedence\", Value::String(\"file_value\".to_string()))?;\n\n        // Verify file value is returned when no env var"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1448,
          "method": "config_set",
          "is_test": false,
          "context": "// Set value in config file\n        config.set_param(\"test_precedence\", Value::String(\"file_value\".to_string()))?;\n\n        // Verify file value is returned when no env var"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1451,
          "method": "config_get",
          "is_test": false,
          "context": "// Verify file value is returned when no env var\n        let value: String = config.get_param(\"test_precedence\")?;\n        assert_eq!(value, \"file_value\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1451,
          "method": "config_get",
          "is_test": false,
          "context": "// Verify file value is returned when no env var\n        let value: String = config.get_param(\"test_precedence\")?;\n        assert_eq!(value, \"file_value\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1458,
          "method": "config_get",
          "is_test": false,
          "context": "// Environment variable should take precedence\n        let value: String = config.get_param(\"test_precedence\")?;\n        assert_eq!(value, \"env_value\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1458,
          "method": "config_get",
          "is_test": false,
          "context": "// Environment variable should take precedence\n        let value: String = config.get_param(\"test_precedence\")?;\n        assert_eq!(value, \"env_value\");"
        }
      ]
    },
    "key1": {
      "key": "key1",
      "category": "config_file",
      "methods": [
        "secret_delete",
        "secret_set",
        "config_set",
        "secret_get"
      ],
      "description": null,
      "usage_count": 19,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 862,
          "method": "config_set",
          "is_test": false,
          "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE)?;\n\n        config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n        config.set_param(\"key2\", Value::Number(42.into()))?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 862,
          "method": "config_set",
          "is_test": false,
          "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE)?;\n\n        config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n        config.set_param(\"key2\", Value::Number(42.into()))?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 862,
          "method": "config_set",
          "is_test": false,
          "context": "let config = Config::new(temp_file.path(), TEST_KEYRING_SERVICE)?;\n\n        config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n        config.set_param(\"key2\", Value::Number(42.into()))?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 945,
          "method": "secret_set",
          "is_test": false,
          "context": "// Set multiple secrets\n        config.set_secret(\"key1\", Value::String(\"secret1\".to_string()))?;\n        config.set_secret(\"key2\", Value::String(\"secret2\".to_string()))?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 945,
          "method": "secret_set",
          "is_test": false,
          "context": "// Set multiple secrets\n        config.set_secret(\"key1\", Value::String(\"secret1\".to_string()))?;\n        config.set_secret(\"key2\", Value::String(\"secret2\".to_string()))?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 945,
          "method": "secret_set",
          "is_test": false,
          "context": "// Set multiple secrets\n        config.set_secret(\"key1\", Value::String(\"secret1\".to_string()))?;\n        config.set_secret(\"key2\", Value::String(\"secret2\".to_string()))?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 949,
          "method": "secret_get",
          "is_test": false,
          "context": "// Verify both exist\n        let value1: String = config.get_secret(\"key1\")?;\n        let value2: String = config.get_secret(\"key2\")?;\n        assert_eq!(value1, \"secret1\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 949,
          "method": "secret_get",
          "is_test": false,
          "context": "// Verify both exist\n        let value1: String = config.get_secret(\"key1\")?;\n        let value2: String = config.get_secret(\"key2\")?;\n        assert_eq!(value1, \"secret1\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 955,
          "method": "secret_delete",
          "is_test": false,
          "context": "// Delete one secret\n        config.delete_secret(\"key1\")?;\n\n        // Verify key1 is gone but key2 remains"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 955,
          "method": "secret_delete",
          "is_test": false,
          "context": "// Delete one secret\n        config.delete_secret(\"key1\")?;\n\n        // Verify key1 is gone but key2 remains"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 955,
          "method": "secret_delete",
          "is_test": false,
          "context": "// Delete one secret\n        config.delete_secret(\"key1\")?;\n\n        // Verify key1 is gone but key2 remains"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 958,
          "method": "secret_get",
          "is_test": false,
          "context": "// Verify key1 is gone but key2 remains\n        let result1: Result<String, ConfigError> = config.get_secret(\"key1\");\n        let value2: String = config.get_secret(\"key2\")?;\n        assert!(matches!(result1, Err(ConfigError::NotFound(_))));"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 958,
          "method": "secret_get",
          "is_test": false,
          "context": "// Verify key1 is gone but key2 remains\n        let result1: Result<String, ConfigError> = config.get_secret(\"key1\");\n        let value2: String = config.get_secret(\"key2\")?;\n        assert!(matches!(result1, Err(ConfigError::NotFound(_))));"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1044,
          "method": "config_set",
          "is_test": false,
          "context": "// Create a valid config first\n        config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n\n        // Verify the backup was created by the first write"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1044,
          "method": "config_set",
          "is_test": false,
          "context": "// Create a valid config first\n        config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n\n        // Verify the backup was created by the first write"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1044,
          "method": "config_set",
          "is_test": false,
          "context": "// Create a valid config first\n        config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n\n        // Verify the backup was created by the first write"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1192,
          "method": "config_set",
          "is_test": false,
          "context": "// Set initial values\n        config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n\n        // Verify the config file exists and is valid"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1192,
          "method": "config_set",
          "is_test": false,
          "context": "// Set initial values\n        config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n\n        // Verify the config file exists and is valid"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1192,
          "method": "config_set",
          "is_test": false,
          "context": "// Set initial values\n        config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n\n        // Verify the config file exists and is valid"
        }
      ]
    },
    "key2": {
      "key": "key2",
      "category": "config_file",
      "methods": [
        "secret_set",
        "config_set",
        "secret_get"
      ],
      "description": null,
      "usage_count": 13,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 863,
          "method": "config_set",
          "is_test": false,
          "context": "config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n        config.set_param(\"key2\", Value::Number(42.into()))?;\n\n        // Read the file directly to check YAML formatting"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 863,
          "method": "config_set",
          "is_test": false,
          "context": "config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n        config.set_param(\"key2\", Value::Number(42.into()))?;\n\n        // Read the file directly to check YAML formatting"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 863,
          "method": "config_set",
          "is_test": false,
          "context": "config.set_param(\"key1\", Value::String(\"value1\".to_string()))?;\n        config.set_param(\"key2\", Value::Number(42.into()))?;\n\n        // Read the file directly to check YAML formatting"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 946,
          "method": "secret_set",
          "is_test": false,
          "context": "// Set multiple secrets\n        config.set_secret(\"key1\", Value::String(\"secret1\".to_string()))?;\n        config.set_secret(\"key2\", Value::String(\"secret2\".to_string()))?;\n\n        // Verify both exist"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 946,
          "method": "secret_set",
          "is_test": false,
          "context": "// Set multiple secrets\n        config.set_secret(\"key1\", Value::String(\"secret1\".to_string()))?;\n        config.set_secret(\"key2\", Value::String(\"secret2\".to_string()))?;\n\n        // Verify both exist"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 946,
          "method": "secret_set",
          "is_test": false,
          "context": "// Set multiple secrets\n        config.set_secret(\"key1\", Value::String(\"secret1\".to_string()))?;\n        config.set_secret(\"key2\", Value::String(\"secret2\".to_string()))?;\n\n        // Verify both exist"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 950,
          "method": "secret_get",
          "is_test": false,
          "context": "// Verify both exist\n        let value1: String = config.get_secret(\"key1\")?;\n        let value2: String = config.get_secret(\"key2\")?;\n        assert_eq!(value1, \"secret1\");\n        assert_eq!(value2, \"secret2\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 950,
          "method": "secret_get",
          "is_test": false,
          "context": "// Verify both exist\n        let value1: String = config.get_secret(\"key1\")?;\n        let value2: String = config.get_secret(\"key2\")?;\n        assert_eq!(value1, \"secret1\");\n        assert_eq!(value2, \"secret2\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 959,
          "method": "secret_get",
          "is_test": false,
          "context": "// Verify key1 is gone but key2 remains\n        let result1: Result<String, ConfigError> = config.get_secret(\"key1\");\n        let value2: String = config.get_secret(\"key2\")?;\n        assert!(matches!(result1, Err(ConfigError::NotFound(_))));\n        assert_eq!(value2, \"secret2\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 959,
          "method": "secret_get",
          "is_test": false,
          "context": "// Verify key1 is gone but key2 remains\n        let result1: Result<String, ConfigError> = config.get_secret(\"key1\");\n        let value2: String = config.get_secret(\"key2\")?;\n        assert!(matches!(result1, Err(ConfigError::NotFound(_))));\n        assert_eq!(value2, \"secret2\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1054,
          "method": "config_set",
          "is_test": false,
          "context": "// Make another write to ensure backup is created\n        config.set_param(\"key2\", Value::Number(42.into()))?;\n\n        // Check again"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1054,
          "method": "config_set",
          "is_test": false,
          "context": "// Make another write to ensure backup is created\n        config.set_param(\"key2\", Value::Number(42.into()))?;\n\n        // Check again"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1054,
          "method": "config_set",
          "is_test": false,
          "context": "// Make another write to ensure backup is created\n        config.set_param(\"key2\", Value::Number(42.into()))?;\n\n        // Check again"
        }
      ]
    },
    "test_key_backup": {
      "key": "test_key_backup",
      "category": "config_file",
      "methods": [
        "config_set"
      ],
      "description": null,
      "usage_count": 3,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1148,
          "method": "config_set",
          "is_test": false,
          "context": "// First, create a config with some data\n        config.set_param(\"test_key_backup\", Value::String(\"backup_value\".to_string()))?;\n        config.set_param(\"another_key\", Value::Number(42.into()))?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1148,
          "method": "config_set",
          "is_test": false,
          "context": "// First, create a config with some data\n        config.set_param(\"test_key_backup\", Value::String(\"backup_value\".to_string()))?;\n        config.set_param(\"another_key\", Value::Number(42.into()))?;"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1148,
          "method": "config_set",
          "is_test": false,
          "context": "// First, create a config with some data\n        config.set_param(\"test_key_backup\", Value::String(\"backup_value\".to_string()))?;\n        config.set_param(\"another_key\", Value::Number(42.into()))?;"
        }
      ]
    },
    "another_key": {
      "key": "another_key",
      "category": "config_file",
      "methods": [
        "config_set"
      ],
      "description": null,
      "usage_count": 3,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1149,
          "method": "config_set",
          "is_test": false,
          "context": "// First, create a config with some data\n        config.set_param(\"test_key_backup\", Value::String(\"backup_value\".to_string()))?;\n        config.set_param(\"another_key\", Value::Number(42.into()))?;\n\n        // Verify the backup was created"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1149,
          "method": "config_set",
          "is_test": false,
          "context": "// First, create a config with some data\n        config.set_param(\"test_key_backup\", Value::String(\"backup_value\".to_string()))?;\n        config.set_param(\"another_key\", Value::Number(42.into()))?;\n\n        // Verify the backup was created"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1149,
          "method": "config_set",
          "is_test": false,
          "context": "// First, create a config with some data\n        config.set_param(\"test_key_backup\", Value::String(\"backup_value\".to_string()))?;\n        config.set_param(\"another_key\", Value::Number(42.into()))?;\n\n        // Verify the backup was created"
        }
      ]
    },
    "third_key": {
      "key": "third_key",
      "category": "config_file",
      "methods": [
        "config_set"
      ],
      "description": null,
      "usage_count": 3,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1156,
          "method": "config_set",
          "is_test": false,
          "context": "// Make sure we have a backup by doing another write\n        config.set_param(\"third_key\", Value::Bool(true))?;\n        assert!(primary_backup.exists(), \"Backup should exist after writes\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1156,
          "method": "config_set",
          "is_test": false,
          "context": "// Make sure we have a backup by doing another write\n        config.set_param(\"third_key\", Value::Bool(true))?;\n        assert!(primary_backup.exists(), \"Backup should exist after writes\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1156,
          "method": "config_set",
          "is_test": false,
          "context": "// Make sure we have a backup by doing another write\n        config.set_param(\"third_key\", Value::Bool(true))?;\n        assert!(primary_backup.exists(), \"Backup should exist after writes\");"
        }
      ]
    },
    "version": {
      "key": "version",
      "category": "config_file",
      "methods": [
        "config_set"
      ],
      "description": null,
      "usage_count": 3,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1213,
          "method": "config_set",
          "is_test": false,
          "context": "// Create multiple versions to test rotation\n        for i in 1..=7 {\n            config.set_param(\"version\", Value::Number(i.into()))?;\n        }"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1213,
          "method": "config_set",
          "is_test": false,
          "context": "// Create multiple versions to test rotation\n        for i in 1..=7 {\n            config.set_param(\"version\", Value::Number(i.into()))?;\n        }"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 1213,
          "method": "config_set",
          "is_test": false,
          "context": "// Create multiple versions to test rotation\n        for i in 1..=7 {\n            config.set_param(\"version\", Value::Number(i.into()))?;\n        }"
        }
      ]
    },
    "api_key": {
      "key": "api_key",
      "category": "secrets",
      "methods": [
        "secret_delete",
        "secret_set",
        "secret_get"
      ],
      "description": null,
      "usage_count": 12,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 918,
          "method": "secret_set",
          "is_test": false,
          "context": "// Test setting and getting a simple secret\n        config.set_secret(\"api_key\", Value::String(\"secret123\".to_string()))?;\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"secret123\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 918,
          "method": "secret_set",
          "is_test": false,
          "context": "// Test setting and getting a simple secret\n        config.set_secret(\"api_key\", Value::String(\"secret123\".to_string()))?;\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"secret123\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 918,
          "method": "secret_set",
          "is_test": false,
          "context": "// Test setting and getting a simple secret\n        config.set_secret(\"api_key\", Value::String(\"secret123\".to_string()))?;\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"secret123\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 919,
          "method": "secret_get",
          "is_test": false,
          "context": "// Test setting and getting a simple secret\n        config.set_secret(\"api_key\", Value::String(\"secret123\".to_string()))?;\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"secret123\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 919,
          "method": "secret_get",
          "is_test": false,
          "context": "// Test setting and getting a simple secret\n        config.set_secret(\"api_key\", Value::String(\"secret123\".to_string()))?;\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"secret123\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 924,
          "method": "secret_get",
          "is_test": false,
          "context": "// Test environment variable override\n        std::env::set_var(\"API_KEY\", \"env_secret\");\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"env_secret\");\n        std::env::remove_var(\"API_KEY\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 924,
          "method": "secret_get",
          "is_test": false,
          "context": "// Test environment variable override\n        std::env::set_var(\"API_KEY\", \"env_secret\");\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"env_secret\");\n        std::env::remove_var(\"API_KEY\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 929,
          "method": "secret_delete",
          "is_test": false,
          "context": "// Test deleting a secret\n        config.delete_secret(\"api_key\")?;\n        let result: Result<String, ConfigError> = config.get_secret(\"api_key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 929,
          "method": "secret_delete",
          "is_test": false,
          "context": "// Test deleting a secret\n        config.delete_secret(\"api_key\")?;\n        let result: Result<String, ConfigError> = config.get_secret(\"api_key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 929,
          "method": "secret_delete",
          "is_test": false,
          "context": "// Test deleting a secret\n        config.delete_secret(\"api_key\")?;\n        let result: Result<String, ConfigError> = config.get_secret(\"api_key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 930,
          "method": "secret_get",
          "is_test": false,
          "context": "// Test deleting a secret\n        config.delete_secret(\"api_key\")?;\n        let result: Result<String, ConfigError> = config.get_secret(\"api_key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 930,
          "method": "secret_get",
          "is_test": false,
          "context": "// Test deleting a secret\n        config.delete_secret(\"api_key\")?;\n        let result: Result<String, ConfigError> = config.get_secret(\"api_key\");\n        assert!(matches!(result, Err(ConfigError::NotFound(_))));"
        }
      ]
    },
    "GOOSE_DISABLE_KEYRING": {
      "key": "GOOSE_DISABLE_KEYRING",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 132,
          "method": "env_var",
          "is_test": false,
          "context": "let config_path = config_dir.join(\"config.yaml\");\n\n        let secrets = match env::var(\"GOOSE_DISABLE_KEYRING\") {\n            Ok(_) => SecretStorage::File {\n                path: config_dir.join(\"secrets.yaml\"),"
        }
      ]
    },
    "API_KEY": {
      "key": "API_KEY",
      "category": "environment",
      "methods": [
        "env_set",
        "env_remove"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 923,
          "method": "env_set",
          "is_test": false,
          "context": "// Test environment variable override\n        std::env::set_var(\"API_KEY\", \"env_secret\");\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"env_secret\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 923,
          "method": "env_set",
          "is_test": false,
          "context": "// Test environment variable override\n        std::env::set_var(\"API_KEY\", \"env_secret\");\n        let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"env_secret\");"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 926,
          "method": "env_remove",
          "is_test": false,
          "context": "let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"env_secret\");\n        std::env::remove_var(\"API_KEY\");\n\n        // Test deleting a secret"
        },
        {
          "file": "crates/goose/src/config/base.rs",
          "line": 926,
          "method": "env_remove",
          "is_test": false,
          "context": "let value: String = config.get_secret(\"api_key\")?;\n        assert_eq!(value, \"env_secret\");\n        std::env::remove_var(\"API_KEY\");\n\n        // Test deleting a secret"
        }
      ]
    },
    "extensions": {
      "key": "extensions",
      "category": "config_file",
      "methods": [
        "config_get",
        "config_set"
      ],
      "description": null,
      "usage_count": 23,
      "locations": [
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 36,
          "method": "config_get",
          "is_test": false,
          "context": "// Try to get the extension entry\n        let extensions: HashMap<String, ExtensionEntry> = match config.get_param(\"extensions\") {\n            Ok(exts) => exts,\n            Err(super::ConfigError::NotFound(_)) => {"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 36,
          "method": "config_get",
          "is_test": false,
          "context": "// Try to get the extension entry\n        let extensions: HashMap<String, ExtensionEntry> = match config.get_param(\"extensions\") {\n            Ok(exts) => exts,\n            Err(super::ConfigError::NotFound(_)) => {"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 53,
          "method": "config_set",
          "is_test": false,
          "context": "},\n                )]);\n                config.set_param(\"extensions\", serde_json::to_value(&defaults)?)?;\n                defaults\n            }"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 53,
          "method": "config_set",
          "is_test": false,
          "context": "},\n                )]);\n                config.set_param(\"extensions\", serde_json::to_value(&defaults)?)?;\n                defaults\n            }"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 53,
          "method": "config_set",
          "is_test": false,
          "context": "},\n                )]);\n                config.set_param(\"extensions\", serde_json::to_value(&defaults)?)?;\n                defaults\n            }"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 72,
          "method": "config_get",
          "is_test": false,
          "context": "// Try to get the extension entry\n        let extensions: HashMap<String, ExtensionEntry> = match config.get_param(\"extensions\") {\n            Ok(exts) => exts,\n            Err(super::ConfigError::NotFound(_)) => HashMap::new(),"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 72,
          "method": "config_get",
          "is_test": false,
          "context": "// Try to get the extension entry\n        let extensions: HashMap<String, ExtensionEntry> = match config.get_param(\"extensions\") {\n            Ok(exts) => exts,\n            Err(super::ConfigError::NotFound(_)) => HashMap::new(),"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 89,
          "method": "config_get",
          "is_test": false,
          "context": "let mut extensions: HashMap<String, ExtensionEntry> = config\n            .get_param(\"extensions\")\n            .unwrap_or_else(|_| HashMap::new());"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 95,
          "method": "config_set",
          "is_test": false,
          "context": "extensions.insert(key, entry);\n        config.set_param(\"extensions\", serde_json::to_value(extensions)?)?;\n        Ok(())\n    }"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 95,
          "method": "config_set",
          "is_test": false,
          "context": "extensions.insert(key, entry);\n        config.set_param(\"extensions\", serde_json::to_value(extensions)?)?;\n        Ok(())\n    }"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 95,
          "method": "config_set",
          "is_test": false,
          "context": "extensions.insert(key, entry);\n        config.set_param(\"extensions\", serde_json::to_value(extensions)?)?;\n        Ok(())\n    }"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 104,
          "method": "config_get",
          "is_test": false,
          "context": "let mut extensions: HashMap<String, ExtensionEntry> = config\n            .get_param(\"extensions\")\n            .unwrap_or_else(|_| HashMap::new());"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 108,
          "method": "config_set",
          "is_test": false,
          "context": "extensions.remove(key);\n        config.set_param(\"extensions\", serde_json::to_value(extensions)?)?;\n        Ok(())\n    }"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 108,
          "method": "config_set",
          "is_test": false,
          "context": "extensions.remove(key);\n        config.set_param(\"extensions\", serde_json::to_value(extensions)?)?;\n        Ok(())\n    }"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 108,
          "method": "config_set",
          "is_test": false,
          "context": "extensions.remove(key);\n        config.set_param(\"extensions\", serde_json::to_value(extensions)?)?;\n        Ok(())\n    }"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 117,
          "method": "config_get",
          "is_test": false,
          "context": "let mut extensions: HashMap<String, ExtensionEntry> = config\n            .get_param(\"extensions\")\n            .unwrap_or_else(|_| HashMap::new());"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 122,
          "method": "config_set",
          "is_test": false,
          "context": "if let Some(entry) = extensions.get_mut(key) {\n            entry.enabled = enabled;\n            config.set_param(\"extensions\", serde_json::to_value(extensions)?)?;\n        }\n        Ok(())"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 122,
          "method": "config_set",
          "is_test": false,
          "context": "if let Some(entry) = extensions.get_mut(key) {\n            entry.enabled = enabled;\n            config.set_param(\"extensions\", serde_json::to_value(extensions)?)?;\n        }\n        Ok(())"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 122,
          "method": "config_set",
          "is_test": false,
          "context": "if let Some(entry) = extensions.get_mut(key) {\n            entry.enabled = enabled;\n            config.set_param(\"extensions\", serde_json::to_value(extensions)?)?;\n        }\n        Ok(())"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 130,
          "method": "config_get",
          "is_test": false,
          "context": "pub fn get_all() -> Result<Vec<ExtensionEntry>> {\n        let config = Config::global();\n        let extensions: HashMap<String, ExtensionEntry> = match config.get_param(\"extensions\") {\n            Ok(exts) => exts,\n            Err(super::ConfigError::NotFound(_)) => HashMap::new(),"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 130,
          "method": "config_get",
          "is_test": false,
          "context": "pub fn get_all() -> Result<Vec<ExtensionEntry>> {\n        let config = Config::global();\n        let extensions: HashMap<String, ExtensionEntry> = match config.get_param(\"extensions\") {\n            Ok(exts) => exts,\n            Err(super::ConfigError::NotFound(_)) => HashMap::new(),"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 142,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n        Ok(config\n            .get_param(\"extensions\")\n            .unwrap_or_else(|_| get_keys(Default::default())))\n    }"
        },
        {
          "file": "crates/goose/src/config/extensions.rs",
          "line": 150,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n        let extensions: HashMap<String, ExtensionEntry> = config\n            .get_param(\"extensions\")\n            .unwrap_or_else(|_| HashMap::new());"
        }
      ]
    },
    "experiments": {
      "key": "experiments",
      "category": "config_file",
      "methods": [
        "config_get",
        "config_set"
      ],
      "description": null,
      "usage_count": 6,
      "locations": [
        {
          "file": "crates/goose/src/config/experiments.rs",
          "line": 23,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n        let mut experiments: HashMap<String, bool> =\n            config.get_param(\"experiments\").unwrap_or_default();\n        Self::refresh_experiments(&mut experiments);"
        },
        {
          "file": "crates/goose/src/config/experiments.rs",
          "line": 23,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n        let mut experiments: HashMap<String, bool> =\n            config.get_param(\"experiments\").unwrap_or_default();\n        Self::refresh_experiments(&mut experiments);"
        },
        {
          "file": "crates/goose/src/config/experiments.rs",
          "line": 33,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n        let mut experiments: HashMap<String, bool> = config\n            .get_param(\"experiments\")\n            .unwrap_or_else(|_| HashMap::new());\n        Self::refresh_experiments(&mut experiments);"
        },
        {
          "file": "crates/goose/src/config/experiments.rs",
          "line": 38,
          "method": "config_set",
          "is_test": false,
          "context": "experiments.insert(name.to_string(), enabled);\n\n        config.set_param(\"experiments\", serde_json::to_value(experiments)?)?;\n        Ok(())\n    }"
        },
        {
          "file": "crates/goose/src/config/experiments.rs",
          "line": 38,
          "method": "config_set",
          "is_test": false,
          "context": "experiments.insert(name.to_string(), enabled);\n\n        config.set_param(\"experiments\", serde_json::to_value(experiments)?)?;\n        Ok(())\n    }"
        },
        {
          "file": "crates/goose/src/config/experiments.rs",
          "line": 38,
          "method": "config_set",
          "is_test": false,
          "context": "experiments.insert(name.to_string(), enabled);\n\n        config.set_param(\"experiments\", serde_json::to_value(experiments)?)?;\n        Ok(())\n    }"
        }
      ]
    },
    "GCP_PROJECT_ID": {
      "key": "GCP_PROJECT_ID",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/gcpvertexai.rs",
          "line": 108,
          "method": "config_get",
          "is_test": false,
          "context": "async fn new_async(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let project_id = config.get_param(\"GCP_PROJECT_ID\")?;\n        let location = Self::determine_location(config)?;\n        let host = format!(\"https://{}-aiplatform.googleapis.com\", location);"
        },
        {
          "file": "crates/goose/src/providers/gcpvertexai.rs",
          "line": 108,
          "method": "config_get",
          "is_test": false,
          "context": "async fn new_async(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let project_id = config.get_param(\"GCP_PROJECT_ID\")?;\n        let location = Self::determine_location(config)?;\n        let host = format!(\"https://{}-aiplatform.googleapis.com\", location);"
        }
      ]
    },
    "GCP_MAX_RETRIES": {
      "key": "GCP_MAX_RETRIES",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/gcpvertexai.rs",
          "line": 136,
          "method": "config_get",
          "is_test": false,
          "context": "// Load max retries for 429 rate limit errors\n        let max_retries = config\n            .get_param(\"GCP_MAX_RETRIES\")\n            .ok()\n            .and_then(|v: String| v.parse::<usize>().ok())"
        }
      ]
    },
    "GCP_INITIAL_RETRY_INTERVAL_MS": {
      "key": "GCP_INITIAL_RETRY_INTERVAL_MS",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/gcpvertexai.rs",
          "line": 142,
          "method": "config_get",
          "is_test": false,
          "context": "let initial_interval_ms = config\n            .get_param(\"GCP_INITIAL_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())"
        }
      ]
    },
    "GCP_BACKOFF_MULTIPLIER": {
      "key": "GCP_BACKOFF_MULTIPLIER",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/gcpvertexai.rs",
          "line": 148,
          "method": "config_get",
          "is_test": false,
          "context": "let backoff_multiplier = config\n            .get_param(\"GCP_BACKOFF_MULTIPLIER\")\n            .ok()\n            .and_then(|v: String| v.parse::<f64>().ok())"
        }
      ]
    },
    "GCP_MAX_RETRY_INTERVAL_MS": {
      "key": "GCP_MAX_RETRY_INTERVAL_MS",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/gcpvertexai.rs",
          "line": 154,
          "method": "config_get",
          "is_test": false,
          "context": "let max_interval_ms = config\n            .get_param(\"GCP_MAX_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())"
        }
      ]
    },
    "GCP_LOCATION": {
      "key": "GCP_LOCATION",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/gcpvertexai.rs",
          "line": 174,
          "method": "config_get",
          "is_test": false,
          "context": "fn determine_location(config: &crate::config::Config) -> Result<String> {\n        Ok(config\n            .get_param(\"GCP_LOCATION\")\n            .ok()\n            .filter(|location: &String| !location.trim().is_empty())"
        }
      ]
    },
    "GOOGLE_HOST": {
      "key": "GOOGLE_HOST",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/google.rs",
          "line": 61,
          "method": "config_get",
          "is_test": false,
          "context": "let api_key: String = config.get_secret(\"GOOGLE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GOOGLE_HOST\")\n            .unwrap_or_else(|_| GOOGLE_API_HOST.to_string());"
        }
      ]
    },
    "GOOGLE_API_KEY": {
      "key": "GOOGLE_API_KEY",
      "category": "secrets",
      "methods": [
        "secret_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/google.rs",
          "line": 59,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"GOOGLE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GOOGLE_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/google.rs",
          "line": 59,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"GOOGLE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GOOGLE_HOST\")"
        }
      ]
    },
    "OLLAMA_HOST": {
      "key": "OLLAMA_HOST",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/ollama.rs",
          "line": 41,
          "method": "config_get",
          "is_test": false,
          "context": "let config = crate::config::Config::global();\n        let host: String = config\n            .get_param(\"OLLAMA_HOST\")\n            .unwrap_or_else(|_| OLLAMA_HOST.to_string());"
        },
        {
          "file": "crates/goose/src/providers/toolshim.rs",
          "line": 88,
          "method": "config_get",
          "is_test": false,
          "context": "let config = crate::config::Config::global();\n        let host: String = config\n            .get_param(\"OLLAMA_HOST\")\n            .unwrap_or_else(|_| OLLAMA_HOST.to_string());"
        }
      ]
    },
    "GOOSE_LEAD_MODEL": {
      "key": "GOOSE_LEAD_MODEL",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 11,
      "locations": [
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 236,
          "method": "env_var",
          "is_test": false,
          "context": "fn test_create_lead_worker_provider() {\n        // Save current env vars\n        let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 241,
          "method": "env_set",
          "is_test": false,
          "context": "// Test with basic lead model configuration\n        env::set_var(\"GOOSE_LEAD_MODEL\", \"gpt-4o\");\n\n        // This will try to create a lead/worker provider"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 269,
          "method": "env_set",
          "is_test": false,
          "context": "// Restore env vars\n        match saved_lead {\n            Some(val) => env::set_var(\"GOOSE_LEAD_MODEL\", val),\n            None => env::remove_var(\"GOOSE_LEAD_MODEL\"),\n        }"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 270,
          "method": "env_remove",
          "is_test": false,
          "context": "match saved_lead {\n            Some(val) => env::set_var(\"GOOSE_LEAD_MODEL\", val),\n            None => env::remove_var(\"GOOSE_LEAD_MODEL\"),\n        }\n        match saved_provider {"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 286,
          "method": "env_var",
          "is_test": false,
          "context": "// Save current env vars\n        let saved_vars = [\n            (\"GOOSE_LEAD_MODEL\", env::var(\"GOOSE_LEAD_MODEL\").ok()),\n            (\"GOOSE_LEAD_PROVIDER\", env::var(\"GOOSE_LEAD_PROVIDER\").ok()),\n            (\"GOOSE_LEAD_TURNS\", env::var(\"GOOSE_LEAD_TURNS\").ok()),"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 305,
          "method": "env_set",
          "is_test": false,
          "context": "// Set only the required lead model\n        env::set_var(\"GOOSE_LEAD_MODEL\", \"grok-3\");\n\n        // This should use defaults for all other values"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 342,
          "method": "env_var",
          "is_test": false,
          "context": "fn test_create_regular_provider_without_lead_config() {\n        // Save current env vars\n        let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 349,
          "method": "env_remove",
          "is_test": false,
          "context": "// Ensure all GOOSE_LEAD_* variables are not set\n        env::remove_var(\"GOOSE_LEAD_MODEL\");\n        env::remove_var(\"GOOSE_LEAD_PROVIDER\");\n        env::remove_var(\"GOOSE_LEAD_TURNS\");"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 372,
          "method": "env_set",
          "is_test": false,
          "context": "if let Some(val) = saved_lead {\n            env::set_var(\"GOOSE_LEAD_MODEL\", val);\n        }\n        if let Some(val) = saved_provider {"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 394,
          "method": "env_var",
          "is_test": false,
          "context": "// Save current env vars\n        let saved_vars = [\n            (\"GOOSE_LEAD_MODEL\", env::var(\"GOOSE_LEAD_MODEL\").ok()),\n            (\n                \"GOOSE_WORKER_CONTEXT_LIMIT\","
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 408,
          "method": "env_set",
          "is_test": false,
          "context": "// Set up lead model to trigger lead/worker mode\n        env::set_var(\"GOOSE_LEAD_MODEL\", \"gpt-4o\");\n\n        // Create a default model with explicit context_limit"
        }
      ]
    },
    "GOOSE_LEAD_PROVIDER": {
      "key": "GOOSE_LEAD_PROVIDER",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 8,
      "locations": [
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 237,
          "method": "env_var",
          "is_test": false,
          "context": "// Save current env vars\n        let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 261,
          "method": "env_set",
          "is_test": false,
          "context": "// Test with different lead provider\n        env::set_var(\"GOOSE_LEAD_PROVIDER\", \"anthropic\");\n        env::set_var(\"GOOSE_LEAD_TURNS\", \"5\");"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 273,
          "method": "env_set",
          "is_test": false,
          "context": "}\n        match saved_provider {\n            Some(val) => env::set_var(\"GOOSE_LEAD_PROVIDER\", val),\n            None => env::remove_var(\"GOOSE_LEAD_PROVIDER\"),\n        }"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 274,
          "method": "env_remove",
          "is_test": false,
          "context": "match saved_provider {\n            Some(val) => env::set_var(\"GOOSE_LEAD_PROVIDER\", val),\n            None => env::remove_var(\"GOOSE_LEAD_PROVIDER\"),\n        }\n        match saved_turns {"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 287,
          "method": "env_var",
          "is_test": false,
          "context": "let saved_vars = [\n            (\"GOOSE_LEAD_MODEL\", env::var(\"GOOSE_LEAD_MODEL\").ok()),\n            (\"GOOSE_LEAD_PROVIDER\", env::var(\"GOOSE_LEAD_PROVIDER\").ok()),\n            (\"GOOSE_LEAD_TURNS\", env::var(\"GOOSE_LEAD_TURNS\").ok()),\n            ("
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 343,
          "method": "env_var",
          "is_test": false,
          "context": "// Save current env vars\n        let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();\n        let saved_threshold = env::var(\"GOOSE_LEAD_FAILURE_THRESHOLD\").ok();"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 350,
          "method": "env_remove",
          "is_test": false,
          "context": "// Ensure all GOOSE_LEAD_* variables are not set\n        env::remove_var(\"GOOSE_LEAD_MODEL\");\n        env::remove_var(\"GOOSE_LEAD_PROVIDER\");\n        env::remove_var(\"GOOSE_LEAD_TURNS\");\n        env::remove_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\");"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 375,
          "method": "env_set",
          "is_test": false,
          "context": "}\n        if let Some(val) = saved_provider {\n            env::set_var(\"GOOSE_LEAD_PROVIDER\", val);\n        }\n        if let Some(val) = saved_turns {"
        }
      ]
    },
    "GOOSE_LEAD_TURNS": {
      "key": "GOOSE_LEAD_TURNS",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 9,
      "locations": [
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 238,
          "method": "env_var",
          "is_test": false,
          "context": "let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();\n\n        // Test with basic lead model configuration"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 262,
          "method": "env_set",
          "is_test": false,
          "context": "// Test with different lead provider\n        env::set_var(\"GOOSE_LEAD_PROVIDER\", \"anthropic\");\n        env::set_var(\"GOOSE_LEAD_TURNS\", \"5\");\n\n        let _result = create(\"openai\", gpt4mini_config);"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 277,
          "method": "env_set",
          "is_test": false,
          "context": "}\n        match saved_turns {\n            Some(val) => env::set_var(\"GOOSE_LEAD_TURNS\", val),\n            None => env::remove_var(\"GOOSE_LEAD_TURNS\"),\n        }"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 278,
          "method": "env_remove",
          "is_test": false,
          "context": "match saved_turns {\n            Some(val) => env::set_var(\"GOOSE_LEAD_TURNS\", val),\n            None => env::remove_var(\"GOOSE_LEAD_TURNS\"),\n        }\n    }"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 288,
          "method": "env_var",
          "is_test": false,
          "context": "(\"GOOSE_LEAD_MODEL\", env::var(\"GOOSE_LEAD_MODEL\").ok()),\n            (\"GOOSE_LEAD_PROVIDER\", env::var(\"GOOSE_LEAD_PROVIDER\").ok()),\n            (\"GOOSE_LEAD_TURNS\", env::var(\"GOOSE_LEAD_TURNS\").ok()),\n            (\n                \"GOOSE_LEAD_FAILURE_THRESHOLD\","
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 323,
          "method": "env_set",
          "is_test": false,
          "context": "// Test with custom values\n        env::set_var(\"GOOSE_LEAD_TURNS\", \"7\");\n        env::set_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\", \"4\");\n        env::set_var(\"GOOSE_LEAD_FALLBACK_TURNS\", \"3\");"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 344,
          "method": "env_var",
          "is_test": false,
          "context": "let saved_lead = env::var(\"GOOSE_LEAD_MODEL\").ok();\n        let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();\n        let saved_threshold = env::var(\"GOOSE_LEAD_FAILURE_THRESHOLD\").ok();\n        let saved_fallback = env::var(\"GOOSE_LEAD_FALLBACK_TURNS\").ok();"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 351,
          "method": "env_remove",
          "is_test": false,
          "context": "env::remove_var(\"GOOSE_LEAD_MODEL\");\n        env::remove_var(\"GOOSE_LEAD_PROVIDER\");\n        env::remove_var(\"GOOSE_LEAD_TURNS\");\n        env::remove_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\");\n        env::remove_var(\"GOOSE_LEAD_FALLBACK_TURNS\");"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 378,
          "method": "env_set",
          "is_test": false,
          "context": "}\n        if let Some(val) = saved_turns {\n            env::set_var(\"GOOSE_LEAD_TURNS\", val);\n        }\n        if let Some(val) = saved_threshold {"
        }
      ]
    },
    "GOOSE_LEAD_FAILURE_THRESHOLD": {
      "key": "GOOSE_LEAD_FAILURE_THRESHOLD",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 5,
      "locations": [
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 291,
          "method": "env_var",
          "is_test": false,
          "context": "(\n                \"GOOSE_LEAD_FAILURE_THRESHOLD\",\n                env::var(\"GOOSE_LEAD_FAILURE_THRESHOLD\").ok(),\n            ),\n            ("
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 324,
          "method": "env_set",
          "is_test": false,
          "context": "// Test with custom values\n        env::set_var(\"GOOSE_LEAD_TURNS\", \"7\");\n        env::set_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\", \"4\");\n        env::set_var(\"GOOSE_LEAD_FALLBACK_TURNS\", \"3\");"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 345,
          "method": "env_var",
          "is_test": false,
          "context": "let saved_provider = env::var(\"GOOSE_LEAD_PROVIDER\").ok();\n        let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();\n        let saved_threshold = env::var(\"GOOSE_LEAD_FAILURE_THRESHOLD\").ok();\n        let saved_fallback = env::var(\"GOOSE_LEAD_FALLBACK_TURNS\").ok();"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 352,
          "method": "env_remove",
          "is_test": false,
          "context": "env::remove_var(\"GOOSE_LEAD_PROVIDER\");\n        env::remove_var(\"GOOSE_LEAD_TURNS\");\n        env::remove_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\");\n        env::remove_var(\"GOOSE_LEAD_FALLBACK_TURNS\");"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 381,
          "method": "env_set",
          "is_test": false,
          "context": "}\n        if let Some(val) = saved_threshold {\n            env::set_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\", val);\n        }\n        if let Some(val) = saved_fallback {"
        }
      ]
    },
    "GOOSE_LEAD_FALLBACK_TURNS": {
      "key": "GOOSE_LEAD_FALLBACK_TURNS",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 5,
      "locations": [
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 295,
          "method": "env_var",
          "is_test": false,
          "context": "(\n                \"GOOSE_LEAD_FALLBACK_TURNS\",\n                env::var(\"GOOSE_LEAD_FALLBACK_TURNS\").ok(),\n            ),\n        ];"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 325,
          "method": "env_set",
          "is_test": false,
          "context": "env::set_var(\"GOOSE_LEAD_TURNS\", \"7\");\n        env::set_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\", \"4\");\n        env::set_var(\"GOOSE_LEAD_FALLBACK_TURNS\", \"3\");\n\n        let _result = create(\"openai\", ModelConfig::new_or_fail(\"gpt-4o-mini\"));"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 346,
          "method": "env_var",
          "is_test": false,
          "context": "let saved_turns = env::var(\"GOOSE_LEAD_TURNS\").ok();\n        let saved_threshold = env::var(\"GOOSE_LEAD_FAILURE_THRESHOLD\").ok();\n        let saved_fallback = env::var(\"GOOSE_LEAD_FALLBACK_TURNS\").ok();\n\n        // Ensure all GOOSE_LEAD_* variables are not set"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 353,
          "method": "env_remove",
          "is_test": false,
          "context": "env::remove_var(\"GOOSE_LEAD_TURNS\");\n        env::remove_var(\"GOOSE_LEAD_FAILURE_THRESHOLD\");\n        env::remove_var(\"GOOSE_LEAD_FALLBACK_TURNS\");\n\n        // This should try to create a regular provider"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 384,
          "method": "env_set",
          "is_test": false,
          "context": "}\n        if let Some(val) = saved_fallback {\n            env::set_var(\"GOOSE_LEAD_FALLBACK_TURNS\", val);\n        }\n    }"
        }
      ]
    },
    "GOOSE_WORKER_CONTEXT_LIMIT": {
      "key": "GOOSE_WORKER_CONTEXT_LIMIT",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 3,
      "locations": [
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 397,
          "method": "env_var",
          "is_test": false,
          "context": "(\n                \"GOOSE_WORKER_CONTEXT_LIMIT\",\n                env::var(\"GOOSE_WORKER_CONTEXT_LIMIT\").ok(),\n            ),\n            (\"GOOSE_CONTEXT_LIMIT\", env::var(\"GOOSE_CONTEXT_LIMIT\").ok()),"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 418,
          "method": "env_set",
          "is_test": false,
          "context": "// Test case 2: With GOOSE_WORKER_CONTEXT_LIMIT - should override original\n        env::set_var(\"GOOSE_WORKER_CONTEXT_LIMIT\", \"32000\");\n        let _result = create_lead_worker_from_env(\"openai\", &default_model, \"gpt-4o\");\n        env::remove_var(\"GOOSE_WORKER_CONTEXT_LIMIT\");"
        },
        {
          "file": "crates/goose/src/providers/factory.rs",
          "line": 420,
          "method": "env_remove",
          "is_test": false,
          "context": "env::set_var(\"GOOSE_WORKER_CONTEXT_LIMIT\", \"32000\");\n        let _result = create_lead_worker_from_env(\"openai\", &default_model, \"gpt-4o\");\n        env::remove_var(\"GOOSE_WORKER_CONTEXT_LIMIT\");\n\n        // Test case 3: With GOOSE_CONTEXT_LIMIT - should override original"
        }
      ]
    },
    "OPENROUTER_HOST": {
      "key": "OPENROUTER_HOST",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/openrouter.rs",
          "line": 48,
          "method": "config_get",
          "is_test": false,
          "context": "let api_key: String = config.get_secret(\"OPENROUTER_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENROUTER_HOST\")\n            .unwrap_or_else(|_| \"https://openrouter.ai\".to_string());"
        }
      ]
    },
    "OPENROUTER_API_KEY": {
      "key": "OPENROUTER_API_KEY",
      "category": "secrets",
      "methods": [
        "secret_set",
        "secret_get"
      ],
      "description": null,
      "usage_count": 5,
      "locations": [
        {
          "file": "crates/goose/src/config/signup_openrouter/mod.rs",
          "line": 168,
          "method": "secret_set",
          "is_test": false,
          "context": "pub fn configure_openrouter(config: &Config, api_key: String) -> Result<()> {\n    config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param("
        },
        {
          "file": "crates/goose/src/config/signup_openrouter/mod.rs",
          "line": 168,
          "method": "secret_set",
          "is_test": false,
          "context": "pub fn configure_openrouter(config: &Config, api_key: String) -> Result<()> {\n    config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param("
        },
        {
          "file": "crates/goose/src/config/signup_openrouter/mod.rs",
          "line": 168,
          "method": "secret_set",
          "is_test": false,
          "context": "pub fn configure_openrouter(config: &Config, api_key: String) -> Result<()> {\n    config.set_secret(\"OPENROUTER_API_KEY\", Value::String(api_key))?;\n    config.set_param(\"GOOSE_PROVIDER\", Value::String(\"openrouter\".to_string()))?;\n    config.set_param("
        },
        {
          "file": "crates/goose/src/providers/openrouter.rs",
          "line": 46,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"OPENROUTER_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENROUTER_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/openrouter.rs",
          "line": 46,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"OPENROUTER_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENROUTER_HOST\")"
        }
      ]
    },
    "AZURE_OPENAI_ENDPOINT": {
      "key": "AZURE_OPENAI_ENDPOINT",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/azure.rs",
          "line": 76,
          "method": "config_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let endpoint: String = config.get_param(\"AZURE_OPENAI_ENDPOINT\")?;\n        let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config"
        },
        {
          "file": "crates/goose/src/providers/azure.rs",
          "line": 76,
          "method": "config_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let endpoint: String = config.get_param(\"AZURE_OPENAI_ENDPOINT\")?;\n        let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config"
        }
      ]
    },
    "AZURE_OPENAI_DEPLOYMENT_NAME": {
      "key": "AZURE_OPENAI_DEPLOYMENT_NAME",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/azure.rs",
          "line": 77,
          "method": "config_get",
          "is_test": false,
          "context": "let config = crate::config::Config::global();\n        let endpoint: String = config.get_param(\"AZURE_OPENAI_ENDPOINT\")?;\n        let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config\n            .get_param(\"AZURE_OPENAI_API_VERSION\")"
        },
        {
          "file": "crates/goose/src/providers/azure.rs",
          "line": 77,
          "method": "config_get",
          "is_test": false,
          "context": "let config = crate::config::Config::global();\n        let endpoint: String = config.get_param(\"AZURE_OPENAI_ENDPOINT\")?;\n        let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config\n            .get_param(\"AZURE_OPENAI_API_VERSION\")"
        }
      ]
    },
    "AZURE_OPENAI_API_VERSION": {
      "key": "AZURE_OPENAI_API_VERSION",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/azure.rs",
          "line": 79,
          "method": "config_get",
          "is_test": false,
          "context": "let deployment_name: String = config.get_param(\"AZURE_OPENAI_DEPLOYMENT_NAME\")?;\n        let api_version: String = config\n            .get_param(\"AZURE_OPENAI_API_VERSION\")\n            .unwrap_or_else(|_| AZURE_DEFAULT_API_VERSION.to_string());"
        }
      ]
    },
    "AZURE_OPENAI_API_KEY": {
      "key": "AZURE_OPENAI_API_KEY",
      "category": "secrets",
      "methods": [
        "secret_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/azure.rs",
          "line": 83,
          "method": "secret_get",
          "is_test": false,
          "context": "let api_key = config\n            .get_secret(\"AZURE_OPENAI_API_KEY\")\n            .ok()\n            .filter(|key: &String| !key.is_empty());"
        }
      ]
    },
    "GITHUB_COPILOT_TOKEN": {
      "key": "GITHUB_COPILOT_TOKEN",
      "category": "secrets",
      "methods": [
        "secret_set"
      ],
      "description": null,
      "usage_count": 5,
      "locations": [
        {
          "file": "crates/goose/src/providers/githubcopilot.rs",
          "line": 239,
          "method": "secret_set",
          "is_test": false,
          "context": ".await\n                        .context(\"unable to login into github\")?;\n                    config.set_secret(\"GITHUB_COPILOT_TOKEN\", Value::String(token.clone()))?;\n                    token\n                }"
        },
        {
          "file": "crates/goose/src/providers/githubcopilot.rs",
          "line": 239,
          "method": "secret_set",
          "is_test": false,
          "context": ".await\n                        .context(\"unable to login into github\")?;\n                    config.set_secret(\"GITHUB_COPILOT_TOKEN\", Value::String(token.clone()))?;\n                    token\n                }"
        },
        {
          "file": "crates/goose/src/providers/githubcopilot.rs",
          "line": 239,
          "method": "secret_set",
          "is_test": false,
          "context": ".await\n                        .context(\"unable to login into github\")?;\n                    config.set_secret(\"GITHUB_COPILOT_TOKEN\", Value::String(token.clone()))?;\n                    token\n                }"
        },
        {
          "file": "crates/goose/src/providers/githubcopilot.rs",
          "line": 498,
          "method": "secret_set",
          "is_test": false,
          "context": "// Save the token\n        config\n            .set_secret(\"GITHUB_COPILOT_TOKEN\", Value::String(token))\n            .map_err(|e| ProviderError::ExecutionError(format!(\"Failed to save token: {}\", e)))?;"
        },
        {
          "file": "crates/goose/src/providers/githubcopilot.rs",
          "line": 498,
          "method": "secret_set",
          "is_test": false,
          "context": "// Save the token\n        config\n            .set_secret(\"GITHUB_COPILOT_TOKEN\", Value::String(token))\n            .map_err(|e| ProviderError::ExecutionError(format!(\"Failed to save token: {}\", e)))?;"
        }
      ]
    },
    "SAGEMAKER_ENDPOINT_NAME": {
      "key": "SAGEMAKER_ENDPOINT_NAME",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/sagemaker_tgi.rs",
          "line": 40,
          "method": "config_get",
          "is_test": false,
          "context": "// Get SageMaker endpoint name (just the name, not full URL)\n        let endpoint_name: String = config.get_param(\"SAGEMAKER_ENDPOINT_NAME\").map_err(|_| {\n            anyhow::anyhow!(\"SAGEMAKER_ENDPOINT_NAME is required for SageMaker TGI provider\")\n        })?;"
        },
        {
          "file": "crates/goose/src/providers/sagemaker_tgi.rs",
          "line": 40,
          "method": "config_get",
          "is_test": false,
          "context": "// Get SageMaker endpoint name (just the name, not full URL)\n        let endpoint_name: String = config.get_param(\"SAGEMAKER_ENDPOINT_NAME\").map_err(|_| {\n            anyhow::anyhow!(\"SAGEMAKER_ENDPOINT_NAME is required for SageMaker TGI provider\")\n        })?;"
        }
      ]
    },
    "GOOSE_MODE": {
      "key": "GOOSE_MODE",
      "category": "environment",
      "methods": [
        "config_get",
        "env_remove",
        "env_var",
        "config_set",
        "env_set"
      ],
      "description": null,
      "usage_count": 35,
      "locations": [
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1121,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if GOOSE_MODE is set as an environment variable\n    if std::env::var(\"GOOSE_MODE\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_MODE environment variable is set and will override the configuration here.\");\n    }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1121,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if GOOSE_MODE is set as an environment variable\n    if std::env::var(\"GOOSE_MODE\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_MODE environment variable is set and will override the configuration here.\");\n    }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1150,
          "method": "config_set",
          "is_test": false,
          "context": "match mode {\n        \"auto\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"auto\".to_string()))?;\n            cliclack::outro(\"Set to Auto Mode - full file modification enabled\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1150,
          "method": "config_set",
          "is_test": false,
          "context": "match mode {\n        \"auto\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"auto\".to_string()))?;\n            cliclack::outro(\"Set to Auto Mode - full file modification enabled\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1150,
          "method": "config_set",
          "is_test": false,
          "context": "match mode {\n        \"auto\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"auto\".to_string()))?;\n            cliclack::outro(\"Set to Auto Mode - full file modification enabled\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1154,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"approve\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"approve\".to_string()))?;\n            cliclack::outro(\"Set to Approve Mode - all tools and modifications require approval\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1154,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"approve\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"approve\".to_string()))?;\n            cliclack::outro(\"Set to Approve Mode - all tools and modifications require approval\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1154,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"approve\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"approve\".to_string()))?;\n            cliclack::outro(\"Set to Approve Mode - all tools and modifications require approval\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1158,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"smart_approve\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"smart_approve\".to_string()))?;\n            cliclack::outro(\"Set to Smart Approve Mode - modifications require approval\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1158,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"smart_approve\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"smart_approve\".to_string()))?;\n            cliclack::outro(\"Set to Smart Approve Mode - modifications require approval\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1158,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"smart_approve\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"smart_approve\".to_string()))?;\n            cliclack::outro(\"Set to Smart Approve Mode - modifications require approval\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1162,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"chat\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"chat\".to_string()))?;\n            cliclack::outro(\"Set to Chat Mode - no tools or modifications enabled\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1162,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"chat\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"chat\".to_string()))?;\n            cliclack::outro(\"Set to Chat Mode - no tools or modifications enabled\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1162,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"chat\" => {\n            config.set_param(\"GOOSE_MODE\", Value::String(\"chat\".to_string()))?;\n            cliclack::outro(\"Set to Chat Mode - no tools or modifications enabled\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/session/mod.rs",
          "line": 621,
          "method": "config_set",
          "is_test": false,
          "context": "config\n                        .set_param(\"GOOSE_MODE\", Value::String(mode.to_string()))\n                        .unwrap();\n                    output::goose_mode_message(&format!(\"Goose mode set to '{}'\", mode));"
        },
        {
          "file": "crates/goose-cli/src/session/mod.rs",
          "line": 621,
          "method": "config_set",
          "is_test": false,
          "context": "config\n                        .set_param(\"GOOSE_MODE\", Value::String(mode.to_string()))\n                        .unwrap();\n                    output::goose_mode_message(&format!(\"Goose mode set to '{}'\", mode));"
        },
        {
          "file": "crates/goose-cli/src/session/mod.rs",
          "line": 814,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n                    let curr_goose_mode =\n                        config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n                    if curr_goose_mode != \"auto\" {\n                        config"
        },
        {
          "file": "crates/goose-cli/src/session/mod.rs",
          "line": 814,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n                    let curr_goose_mode =\n                        config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n                    if curr_goose_mode != \"auto\" {\n                        config"
        },
        {
          "file": "crates/goose-cli/src/session/mod.rs",
          "line": 817,
          "method": "config_set",
          "is_test": false,
          "context": "if curr_goose_mode != \"auto\" {\n                        config\n                            .set_param(\"GOOSE_MODE\", Value::String(\"auto\".to_string()))\n                            .unwrap();\n                    }"
        },
        {
          "file": "crates/goose-cli/src/session/mod.rs",
          "line": 817,
          "method": "config_set",
          "is_test": false,
          "context": "if curr_goose_mode != \"auto\" {\n                        config\n                            .set_param(\"GOOSE_MODE\", Value::String(\"auto\".to_string()))\n                            .unwrap();\n                    }"
        },
        {
          "file": "crates/goose-cli/src/session/mod.rs",
          "line": 835,
          "method": "config_set",
          "is_test": false,
          "context": "if curr_goose_mode != \"auto\" {\n                        config\n                            .set_param(\"GOOSE_MODE\", Value::String(curr_goose_mode.to_string()))\n                            .unwrap();\n                    }"
        },
        {
          "file": "crates/goose-cli/src/session/mod.rs",
          "line": 835,
          "method": "config_set",
          "is_test": false,
          "context": "if curr_goose_mode != \"auto\" {\n                        config\n                            .set_param(\"GOOSE_MODE\", Value::String(curr_goose_mode.to_string()))\n                            .unwrap();\n                    }"
        },
        {
          "file": "crates/goose-server/src/routes/agent.rs",
          "line": 184,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n    let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n    let agent = state\n        .get_agent()"
        },
        {
          "file": "crates/goose-server/src/routes/agent.rs",
          "line": 184,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n    let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n    let agent = state\n        .get_agent()"
        },
        {
          "file": "crates/goose/src/agents/agent.rs",
          "line": 1150,
          "method": "config_get",
          "is_test": false,
          "context": "Some(\"background\") => \"auto\".to_string(),\n            _ => config\n                .get_param(\"GOOSE_MODE\")\n                .unwrap_or_else(|_| \"auto\".to_string()),\n        }"
        },
        {
          "file": "crates/goose/src/agents/prompt_manager.rs",
          "line": 141,
          "method": "config_get",
          "is_test": false,
          "context": "let mut system_prompt_extras = self.system_prompt_extras.clone();\n        let config = Config::global();\n        let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n        if goose_mode == \"chat\" {\n            system_prompt_extras.push("
        },
        {
          "file": "crates/goose/src/agents/prompt_manager.rs",
          "line": 141,
          "method": "config_get",
          "is_test": false,
          "context": "let mut system_prompt_extras = self.system_prompt_extras.clone();\n        let config = Config::global();\n        let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n        if goose_mode == \"chat\" {\n            system_prompt_extras.push("
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 535,
          "method": "env_set",
          "is_test": false,
          "context": "fn test_permission_mode_flag_construction() {\n        // Test that in auto mode, the --permission-mode acceptEdits flag is added\n        std::env::set_var(\"GOOSE_MODE\", \"auto\");\n\n        let config = Config::global();"
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 535,
          "method": "env_set",
          "is_test": false,
          "context": "fn test_permission_mode_flag_construction() {\n        // Test that in auto mode, the --permission-mode acceptEdits flag is added\n        std::env::set_var(\"GOOSE_MODE\", \"auto\");\n\n        let config = Config::global();"
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 538,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n        let goose_mode: String = config.get_param(\"GOOSE_MODE\").unwrap();\n        assert_eq!(goose_mode, \"auto\");"
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 538,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n        let goose_mode: String = config.get_param(\"GOOSE_MODE\").unwrap();\n        assert_eq!(goose_mode, \"auto\");"
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 541,
          "method": "env_remove",
          "is_test": false,
          "context": "assert_eq!(goose_mode, \"auto\");\n\n        std::env::remove_var(\"GOOSE_MODE\");\n    }"
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 541,
          "method": "env_remove",
          "is_test": false,
          "context": "assert_eq!(goose_mode, \"auto\");\n\n        std::env::remove_var(\"GOOSE_MODE\");\n    }"
        },
        {
          "file": "crates/goose/src/providers/ollama.rs",
          "line": 134,
          "method": "config_get",
          "is_test": false,
          "context": ") -> Result<(Message, ProviderUsage), ProviderError> {\n        let config = crate::config::Config::global();\n        let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n        let filtered_tools = if goose_mode == \"chat\" { &[] } else { tools };"
        },
        {
          "file": "crates/goose/src/providers/ollama.rs",
          "line": 134,
          "method": "config_get",
          "is_test": false,
          "context": ") -> Result<(Message, ProviderUsage), ProviderError> {\n        let config = crate::config::Config::global();\n        let goose_mode = config.get_param(\"GOOSE_MODE\").unwrap_or(\"auto\".to_string());\n        let filtered_tools = if goose_mode == \"chat\" { &[] } else { tools };"
        }
      ]
    },
    "CLAUDE_CODE_COMMAND": {
      "key": "CLAUDE_CODE_COMMAND",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 36,
          "method": "config_get",
          "is_test": false,
          "context": "let config = crate::config::Config::global();\n        let command: String = config\n            .get_param(\"CLAUDE_CODE_COMMAND\")\n            .unwrap_or_else(|_| \"claude\".to_string());"
        }
      ]
    },
    "HOME": {
      "key": "HOME",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 10,
      "locations": [
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 206,
          "method": "env_set",
          "is_test": false,
          "context": "env::set_var(\"USERPROFILE\", temp_dir.path());\n        } else {\n            env::set_var(\"HOME\", temp_dir.path());\n        }\n        temp_dir"
        },
        {
          "file": "crates/goose-cli/src/logging.rs",
          "line": 258,
          "method": "env_set",
          "is_test": false,
          "context": "env::set_var(\"USERPROFILE\", test_dir);\n        } else {\n            env::set_var(\"HOME\", test_dir);\n            // Also set TMPDIR to prevent temp directory sharing between tests\n            env::set_var(\"TMPDIR\", test_dir);"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 885,
          "method": "env_var",
          "is_test": false,
          "context": "fn test_home_directory_conversion() {\n        // Save the current home dir\n        let original_home = env::var(\"HOME\").ok();\n\n        // Set a test home directory"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 888,
          "method": "env_set",
          "is_test": false,
          "context": "// Set a test home directory\n        env::set_var(\"HOME\", \"/Users/testuser\");\n\n        assert_eq!("
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 903,
          "method": "env_set",
          "is_test": false,
          "context": "// Restore the original home dir\n        if let Some(home) = original_home {\n            env::set_var(\"HOME\", home);\n        } else {\n            env::remove_var(\"HOME\");"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 905,
          "method": "env_remove",
          "is_test": false,
          "context": "env::set_var(\"HOME\", home);\n        } else {\n            env::remove_var(\"HOME\");\n        }\n    }"
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 53,
          "method": "env_var",
          "is_test": false,
          "context": "/// Search for claude executable in common installation locations\n    fn find_claude_executable(command_name: &str) -> Option<String> {\n        let home = std::env::var(\"HOME\").ok()?;\n\n        let search_paths = vec!["
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 53,
          "method": "env_var",
          "is_test": false,
          "context": "/// Search for claude executable in common installation locations\n    fn find_claude_executable(command_name: &str) -> Option<String> {\n        let home = std::env::var(\"HOME\").ok()?;\n\n        let search_paths = vec!["
        },
        {
          "file": "crates/goose/src/providers/gemini_cli.rs",
          "line": 52,
          "method": "env_var",
          "is_test": false,
          "context": "/// Search for gemini executable in common installation locations\n    fn find_gemini_executable(command_name: &str) -> Option<String> {\n        let home = std::env::var(\"HOME\").ok()?;\n\n        // Common locations where gemini might be installed"
        },
        {
          "file": "crates/goose/src/providers/gemini_cli.rs",
          "line": 52,
          "method": "env_var",
          "is_test": false,
          "context": "/// Search for gemini executable in common installation locations\n    fn find_gemini_executable(command_name: &str) -> Option<String> {\n        let home = std::env::var(\"HOME\").ok()?;\n\n        // Common locations where gemini might be installed"
        }
      ]
    },
    "PATH": {
      "key": "PATH",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 86,
          "method": "env_var",
          "is_test": false,
          "context": "}\n\n        if let Ok(path_var) = std::env::var(\"PATH\") {\n            #[cfg(unix)]\n            let path_separator = ':';"
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 86,
          "method": "env_var",
          "is_test": false,
          "context": "}\n\n        if let Ok(path_var) = std::env::var(\"PATH\") {\n            #[cfg(unix)]\n            let path_separator = ':';"
        },
        {
          "file": "crates/goose/src/providers/gemini_cli.rs",
          "line": 90,
          "method": "env_var",
          "is_test": false,
          "context": "// If not found in common locations, check if it's in PATH\n        if let Ok(path_var) = std::env::var(\"PATH\") {\n            for dir in path_var.split(':') {\n                let full_path = format!(\"{}/{}\", dir, command_name);"
        },
        {
          "file": "crates/goose/src/providers/gemini_cli.rs",
          "line": 90,
          "method": "env_var",
          "is_test": false,
          "context": "// If not found in common locations, check if it's in PATH\n        if let Ok(path_var) = std::env::var(\"PATH\") {\n            for dir in path_var.split(':') {\n                let full_path = format!(\"{}/{}\", dir, command_name);"
        }
      ]
    },
    "GOOSE_CLAUDE_CODE_DEBUG": {
      "key": "GOOSE_CLAUDE_CODE_DEBUG",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 310,
          "method": "env_var",
          "is_test": false,
          "context": "let filtered_system = self.filter_extensions_from_system_prompt(system);\n\n        if std::env::var(\"GOOSE_CLAUDE_CODE_DEBUG\").is_ok() {\n            println!(\"=== CLAUDE CODE PROVIDER DEBUG ===\");\n            println!(\"Command: {}\", self.command);"
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 310,
          "method": "env_var",
          "is_test": false,
          "context": "let filtered_system = self.filter_extensions_from_system_prompt(system);\n\n        if std::env::var(\"GOOSE_CLAUDE_CODE_DEBUG\").is_ok() {\n            println!(\"=== CLAUDE CODE PROVIDER DEBUG ===\");\n            println!(\"Command: {}\", self.command);"
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 429,
          "method": "env_var",
          "is_test": false,
          "context": ".unwrap_or_else(|| \"Simple task\".to_string());\n\n        if std::env::var(\"GOOSE_CLAUDE_CODE_DEBUG\").is_ok() {\n            println!(\"=== CLAUDE CODE PROVIDER DEBUG ===\");\n            println!(\"Generated simple session description: {}\", description);"
        },
        {
          "file": "crates/goose/src/providers/claude_code.rs",
          "line": 429,
          "method": "env_var",
          "is_test": false,
          "context": ".unwrap_or_else(|| \"Simple task\".to_string());\n\n        if std::env::var(\"GOOSE_CLAUDE_CODE_DEBUG\").is_ok() {\n            println!(\"=== CLAUDE CODE PROVIDER DEBUG ===\");\n            println!(\"Generated simple session description: {}\", description);"
        }
      ]
    },
    "OLLAMA_TIMEOUT": {
      "key": "OLLAMA_TIMEOUT",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/ollama.rs",
          "line": 45,
          "method": "config_get",
          "is_test": false,
          "context": "let timeout: Duration =\n            Duration::from_secs(config.get_param(\"OLLAMA_TIMEOUT\").unwrap_or(OLLAMA_TIMEOUT));\n\n        // OLLAMA_HOST is sometimes just the 'host' or 'host:port' without a scheme"
        },
        {
          "file": "crates/goose/src/providers/ollama.rs",
          "line": 45,
          "method": "config_get",
          "is_test": false,
          "context": "let timeout: Duration =\n            Duration::from_secs(config.get_param(\"OLLAMA_TIMEOUT\").unwrap_or(OLLAMA_TIMEOUT));\n\n        // OLLAMA_HOST is sometimes just the 'host' or 'host:port' without a scheme"
        }
      ]
    },
    "DATABRICKS_HOST": {
      "key": "DATABRICKS_HOST",
      "category": "config_file",
      "methods": [
        "config_get",
        "secret_get"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose/src/providers/databricks.rs",
          "line": 113,
          "method": "config_get",
          "is_test": false,
          "context": "let config = crate::config::Config::global();\n\n        let mut host: Result<String, ConfigError> = config.get_param(\"DATABRICKS_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"DATABRICKS_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/databricks.rs",
          "line": 113,
          "method": "config_get",
          "is_test": false,
          "context": "let config = crate::config::Config::global();\n\n        let mut host: Result<String, ConfigError> = config.get_param(\"DATABRICKS_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"DATABRICKS_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/databricks.rs",
          "line": 115,
          "method": "secret_get",
          "is_test": false,
          "context": "let mut host: Result<String, ConfigError> = config.get_param(\"DATABRICKS_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"DATABRICKS_HOST\")\n        }"
        },
        {
          "file": "crates/goose/src/providers/databricks.rs",
          "line": 115,
          "method": "secret_get",
          "is_test": false,
          "context": "let mut host: Result<String, ConfigError> = config.get_param(\"DATABRICKS_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"DATABRICKS_HOST\")\n        }"
        }
      ]
    },
    "DATABRICKS_MAX_RETRIES": {
      "key": "DATABRICKS_MAX_RETRIES",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/databricks.rs",
          "line": 151,
          "method": "config_get",
          "is_test": false,
          "context": "fn load_retry_config(config: &crate::config::Config) -> RetryConfig {\n        let max_retries = config\n            .get_param(\"DATABRICKS_MAX_RETRIES\")\n            .ok()\n            .and_then(|v: String| v.parse::<usize>().ok())"
        }
      ]
    },
    "DATABRICKS_INITIAL_RETRY_INTERVAL_MS": {
      "key": "DATABRICKS_INITIAL_RETRY_INTERVAL_MS",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/databricks.rs",
          "line": 157,
          "method": "config_get",
          "is_test": false,
          "context": "let initial_interval_ms = config\n            .get_param(\"DATABRICKS_INITIAL_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())"
        }
      ]
    },
    "DATABRICKS_BACKOFF_MULTIPLIER": {
      "key": "DATABRICKS_BACKOFF_MULTIPLIER",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/databricks.rs",
          "line": 163,
          "method": "config_get",
          "is_test": false,
          "context": "let backoff_multiplier = config\n            .get_param(\"DATABRICKS_BACKOFF_MULTIPLIER\")\n            .ok()\n            .and_then(|v: String| v.parse::<f64>().ok())"
        }
      ]
    },
    "DATABRICKS_MAX_RETRY_INTERVAL_MS": {
      "key": "DATABRICKS_MAX_RETRY_INTERVAL_MS",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/databricks.rs",
          "line": 169,
          "method": "config_get",
          "is_test": false,
          "context": "let max_interval_ms = config\n            .get_param(\"DATABRICKS_MAX_RETRY_INTERVAL_MS\")\n            .ok()\n            .and_then(|v: String| v.parse::<u64>().ok())"
        }
      ]
    },
    "GEMINI_CLI_COMMAND": {
      "key": "GEMINI_CLI_COMMAND",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/gemini_cli.rs",
          "line": 35,
          "method": "config_get",
          "is_test": false,
          "context": "let config = crate::config::Config::global();\n        let command: String = config\n            .get_param(\"GEMINI_CLI_COMMAND\")\n            .unwrap_or_else(|_| \"gemini\".to_string());"
        }
      ]
    },
    "GOOSE_GEMINI_CLI_DEBUG": {
      "key": "GOOSE_GEMINI_CLI_DEBUG",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose/src/providers/gemini_cli.rs",
          "line": 161,
          "method": "env_var",
          "is_test": false,
          "context": "full_prompt.push_str(\"Assistant: \");\n\n        if std::env::var(\"GOOSE_GEMINI_CLI_DEBUG\").is_ok() {\n            println!(\"=== GEMINI CLI PROVIDER DEBUG ===\");\n            println!(\"Command: {}\", self.command);"
        },
        {
          "file": "crates/goose/src/providers/gemini_cli.rs",
          "line": 161,
          "method": "env_var",
          "is_test": false,
          "context": "full_prompt.push_str(\"Assistant: \");\n\n        if std::env::var(\"GOOSE_GEMINI_CLI_DEBUG\").is_ok() {\n            println!(\"=== GEMINI CLI PROVIDER DEBUG ===\");\n            println!(\"Command: {}\", self.command);"
        },
        {
          "file": "crates/goose/src/providers/gemini_cli.rs",
          "line": 280,
          "method": "env_var",
          "is_test": false,
          "context": ".unwrap_or_else(|| \"Simple task\".to_string());\n\n        if std::env::var(\"GOOSE_GEMINI_CLI_DEBUG\").is_ok() {\n            println!(\"=== GEMINI CLI PROVIDER DEBUG ===\");\n            println!(\"Generated simple session description: {}\", description);"
        },
        {
          "file": "crates/goose/src/providers/gemini_cli.rs",
          "line": 280,
          "method": "env_var",
          "is_test": false,
          "context": ".unwrap_or_else(|| \"Simple task\".to_string());\n\n        if std::env::var(\"GOOSE_GEMINI_CLI_DEBUG\").is_ok() {\n            println!(\"=== GEMINI CLI PROVIDER DEBUG ===\");\n            println!(\"Generated simple session description: {}\", description);"
        }
      ]
    },
    "GOOSE_CACHE_DIR": {
      "key": "GOOSE_CACHE_DIR",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/pricing.rs",
          "line": 16,
          "method": "env_var",
          "is_test": false,
          "context": "/// Get the cache directory path\nfn get_cache_dir() -> Result<PathBuf> {\n    let cache_dir = if let Ok(goose_dir) = std::env::var(\"GOOSE_CACHE_DIR\") {\n        PathBuf::from(goose_dir)\n    } else {"
        },
        {
          "file": "crates/goose/src/providers/pricing.rs",
          "line": 16,
          "method": "env_var",
          "is_test": false,
          "context": "/// Get the cache directory path\nfn get_cache_dir() -> Result<PathBuf> {\n    let cache_dir = if let Ok(goose_dir) = std::env::var(\"GOOSE_CACHE_DIR\") {\n        PathBuf::from(goose_dir)\n    } else {"
        }
      ]
    },
    "SNOWFLAKE_HOST": {
      "key": "SNOWFLAKE_HOST",
      "category": "config_file",
      "methods": [
        "config_get",
        "secret_get"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose/src/providers/snowflake.rs",
          "line": 48,
          "method": "config_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let mut host: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"SNOWFLAKE_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/snowflake.rs",
          "line": 48,
          "method": "config_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let mut host: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"SNOWFLAKE_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/snowflake.rs",
          "line": 50,
          "method": "secret_get",
          "is_test": false,
          "context": "let mut host: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"SNOWFLAKE_HOST\")\n        }\n        if host.is_err() {"
        },
        {
          "file": "crates/goose/src/providers/snowflake.rs",
          "line": 50,
          "method": "secret_get",
          "is_test": false,
          "context": "let mut host: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_HOST\");\n        if host.is_err() {\n            host = config.get_secret(\"SNOWFLAKE_HOST\")\n        }\n        if host.is_err() {"
        }
      ]
    },
    "SNOWFLAKE_TOKEN": {
      "key": "SNOWFLAKE_TOKEN",
      "category": "config_file",
      "methods": [
        "config_get",
        "secret_get"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose/src/providers/snowflake.rs",
          "line": 69,
          "method": "config_get",
          "is_test": false,
          "context": "}\n\n        let mut token: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_TOKEN\");\n\n        if token.is_err() {"
        },
        {
          "file": "crates/goose/src/providers/snowflake.rs",
          "line": 69,
          "method": "config_get",
          "is_test": false,
          "context": "}\n\n        let mut token: Result<String, ConfigError> = config.get_param(\"SNOWFLAKE_TOKEN\");\n\n        if token.is_err() {"
        },
        {
          "file": "crates/goose/src/providers/snowflake.rs",
          "line": 72,
          "method": "secret_get",
          "is_test": false,
          "context": "if token.is_err() {\n            token = config.get_secret(\"SNOWFLAKE_TOKEN\")\n        }"
        },
        {
          "file": "crates/goose/src/providers/snowflake.rs",
          "line": 72,
          "method": "secret_get",
          "is_test": false,
          "context": "if token.is_err() {\n            token = config.get_secret(\"SNOWFLAKE_TOKEN\")\n        }"
        }
      ]
    },
    "XAI_HOST": {
      "key": "XAI_HOST",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/xai.rs",
          "line": 53,
          "method": "config_get",
          "is_test": false,
          "context": "let api_key: String = config.get_secret(\"XAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"XAI_HOST\")\n            .unwrap_or_else(|_| XAI_API_HOST.to_string());"
        }
      ]
    },
    "XAI_API_KEY": {
      "key": "XAI_API_KEY",
      "category": "secrets",
      "methods": [
        "secret_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/xai.rs",
          "line": 51,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"XAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"XAI_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/xai.rs",
          "line": 51,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"XAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"XAI_HOST\")"
        }
      ]
    },
    "ANTHROPIC_HOST": {
      "key": "ANTHROPIC_HOST",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/anthropic.rs",
          "line": 54,
          "method": "config_get",
          "is_test": false,
          "context": "let api_key: String = config.get_secret(\"ANTHROPIC_API_KEY\")?;\n        let host: String = config\n            .get_param(\"ANTHROPIC_HOST\")\n            .unwrap_or_else(|_| \"https://api.anthropic.com\".to_string());"
        }
      ]
    },
    "ANTHROPIC_API_KEY": {
      "key": "ANTHROPIC_API_KEY",
      "category": "secrets",
      "methods": [
        "secret_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/anthropic.rs",
          "line": 52,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"ANTHROPIC_API_KEY\")?;\n        let host: String = config\n            .get_param(\"ANTHROPIC_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/anthropic.rs",
          "line": 52,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"ANTHROPIC_API_KEY\")?;\n        let host: String = config\n            .get_param(\"ANTHROPIC_HOST\")"
        }
      ]
    },
    "CLAUDE_THINKING_ENABLED": {
      "key": "CLAUDE_THINKING_ENABLED",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 14,
      "locations": [
        {
          "file": "crates/goose/src/providers/anthropic.rs",
          "line": 71,
          "method": "env_var",
          "is_test": false,
          "context": "let mut headers = Vec::new();\n\n        let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n        if self.model.model_name.starts_with(\"claude-3-7-sonnet-\") {\n            if is_thinking_enabled {"
        },
        {
          "file": "crates/goose/src/providers/anthropic.rs",
          "line": 71,
          "method": "env_var",
          "is_test": false,
          "context": "let mut headers = Vec::new();\n\n        let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n        if self.model.model_name.starts_with(\"claude-3-7-sonnet-\") {\n            if is_thinking_enabled {"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 416,
          "method": "env_var",
          "is_test": false,
          "context": "// Add thinking parameters for claude-3-7-sonnet model\n    let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n    if model_config.model_name.starts_with(\"claude-3-7-sonnet-\") && is_thinking_enabled {\n        // Minimum budget_tokens is 1024"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 416,
          "method": "env_var",
          "is_test": false,
          "context": "// Add thinking parameters for claude-3-7-sonnet model\n    let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n    if model_config.model_name.starts_with(\"claude-3-7-sonnet-\") && is_thinking_enabled {\n        // Minimum budget_tokens is 1024"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 915,
          "method": "env_var",
          "is_test": false,
          "context": "#[test]\n    fn test_create_request_with_thinking() -> Result<()> {\n        let original_value = std::env::var(\"CLAUDE_THINKING_ENABLED\").ok();\n        std::env::set_var(\"CLAUDE_THINKING_ENABLED\", \"true\");"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 915,
          "method": "env_var",
          "is_test": false,
          "context": "#[test]\n    fn test_create_request_with_thinking() -> Result<()> {\n        let original_value = std::env::var(\"CLAUDE_THINKING_ENABLED\").ok();\n        std::env::set_var(\"CLAUDE_THINKING_ENABLED\", \"true\");"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 916,
          "method": "env_set",
          "is_test": false,
          "context": "fn test_create_request_with_thinking() -> Result<()> {\n        let original_value = std::env::var(\"CLAUDE_THINKING_ENABLED\").ok();\n        std::env::set_var(\"CLAUDE_THINKING_ENABLED\", \"true\");\n\n        let result = (|| {"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 916,
          "method": "env_set",
          "is_test": false,
          "context": "fn test_create_request_with_thinking() -> Result<()> {\n        let original_value = std::env::var(\"CLAUDE_THINKING_ENABLED\").ok();\n        std::env::set_var(\"CLAUDE_THINKING_ENABLED\", \"true\");\n\n        let result = (|| {"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 944,
          "method": "env_set",
          "is_test": false,
          "context": "// Restore the original env var state\n        match original_value {\n            Some(val) => std::env::set_var(\"CLAUDE_THINKING_ENABLED\", val),\n            None => std::env::remove_var(\"CLAUDE_THINKING_ENABLED\"),\n        }"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 944,
          "method": "env_set",
          "is_test": false,
          "context": "// Restore the original env var state\n        match original_value {\n            Some(val) => std::env::set_var(\"CLAUDE_THINKING_ENABLED\", val),\n            None => std::env::remove_var(\"CLAUDE_THINKING_ENABLED\"),\n        }"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 945,
          "method": "env_remove",
          "is_test": false,
          "context": "match original_value {\n            Some(val) => std::env::set_var(\"CLAUDE_THINKING_ENABLED\", val),\n            None => std::env::remove_var(\"CLAUDE_THINKING_ENABLED\"),\n        }"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 945,
          "method": "env_remove",
          "is_test": false,
          "context": "match original_value {\n            Some(val) => std::env::set_var(\"CLAUDE_THINKING_ENABLED\", val),\n            None => std::env::remove_var(\"CLAUDE_THINKING_ENABLED\"),\n        }"
        },
        {
          "file": "crates/goose/src/providers/formats/databricks.rs",
          "line": 560,
          "method": "env_var",
          "is_test": false,
          "context": "// Add thinking parameters for Claude 3.7 Sonnet model when requested\n    let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n    if is_claude_sonnet && is_thinking_enabled {\n        // Minimum budget_tokens is 1024"
        },
        {
          "file": "crates/goose/src/providers/formats/databricks.rs",
          "line": 560,
          "method": "env_var",
          "is_test": false,
          "context": "// Add thinking parameters for Claude 3.7 Sonnet model when requested\n    let is_thinking_enabled = std::env::var(\"CLAUDE_THINKING_ENABLED\").is_ok();\n    if is_claude_sonnet && is_thinking_enabled {\n        // Minimum budget_tokens is 1024"
        }
      ]
    },
    "GROQ_HOST": {
      "key": "GROQ_HOST",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/groq.rs",
          "line": 40,
          "method": "config_get",
          "is_test": false,
          "context": "let api_key: String = config.get_secret(\"GROQ_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GROQ_HOST\")\n            .unwrap_or_else(|_| GROQ_API_HOST.to_string());"
        }
      ]
    },
    "GROQ_API_KEY": {
      "key": "GROQ_API_KEY",
      "category": "secrets",
      "methods": [
        "secret_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/groq.rs",
          "line": 38,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"GROQ_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GROQ_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/groq.rs",
          "line": 38,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"GROQ_API_KEY\")?;\n        let host: String = config\n            .get_param(\"GROQ_HOST\")"
        }
      ]
    },
    "LITELLM_CUSTOM_HEADERS": {
      "key": "LITELLM_CUSTOM_HEADERS",
      "category": "secrets",
      "methods": [
        "config_get",
        "secret_get"
      ],
      "description": null,
      "usage_count": 3,
      "locations": [
        {
          "file": "crates/goose/src/providers/litellm.rs",
          "line": 43,
          "method": "secret_get",
          "is_test": false,
          "context": ".unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"LITELLM_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"LITELLM_CUSTOM_HEADERS\"))\n            .ok()"
        },
        {
          "file": "crates/goose/src/providers/litellm.rs",
          "line": 44,
          "method": "config_get",
          "is_test": false,
          "context": "let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"LITELLM_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"LITELLM_CUSTOM_HEADERS\"))\n            .ok()\n            .map(parse_custom_headers);"
        },
        {
          "file": "crates/goose/src/providers/litellm.rs",
          "line": 44,
          "method": "config_get",
          "is_test": false,
          "context": "let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"LITELLM_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"LITELLM_CUSTOM_HEADERS\"))\n            .ok()\n            .map(parse_custom_headers);"
        }
      ]
    },
    "LITELLM_TIMEOUT": {
      "key": "LITELLM_TIMEOUT",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/litellm.rs",
          "line": 47,
          "method": "config_get",
          "is_test": false,
          "context": ".ok()\n            .map(parse_custom_headers);\n        let timeout_secs: u64 = config.get_param(\"LITELLM_TIMEOUT\").unwrap_or(600);\n\n        let auth = if api_key.is_empty() {"
        },
        {
          "file": "crates/goose/src/providers/litellm.rs",
          "line": 47,
          "method": "config_get",
          "is_test": false,
          "context": ".ok()\n            .map(parse_custom_headers);\n        let timeout_secs: u64 = config.get_param(\"LITELLM_TIMEOUT\").unwrap_or(600);\n\n        let auth = if api_key.is_empty() {"
        }
      ]
    },
    "LITELLM_HOST": {
      "key": "LITELLM_HOST",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/litellm.rs",
          "line": 37,
          "method": "config_get",
          "is_test": false,
          "context": ".unwrap_or_else(|_| String::new());\n        let host: String = config\n            .get_param(\"LITELLM_HOST\")\n            .unwrap_or_else(|_| \"https://api.litellm.ai\".to_string());\n        let base_path: String = config"
        }
      ]
    },
    "LITELLM_BASE_PATH": {
      "key": "LITELLM_BASE_PATH",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/litellm.rs",
          "line": 40,
          "method": "config_get",
          "is_test": false,
          "context": ".unwrap_or_else(|_| \"https://api.litellm.ai\".to_string());\n        let base_path: String = config\n            .get_param(\"LITELLM_BASE_PATH\")\n            .unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let custom_headers: Option<HashMap<String, String>> = config"
        }
      ]
    },
    "LITELLM_API_KEY": {
      "key": "LITELLM_API_KEY",
      "category": "secrets",
      "methods": [
        "secret_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/litellm.rs",
          "line": 34,
          "method": "secret_get",
          "is_test": false,
          "context": "let config = crate::config::Config::global();\n        let api_key: String = config\n            .get_secret(\"LITELLM_API_KEY\")\n            .unwrap_or_else(|_| String::new());\n        let host: String = config"
        }
      ]
    },
    "GOOSE_EMBEDDING_MODEL": {
      "key": "GOOSE_EMBEDDING_MODEL",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 5,
      "locations": [
        {
          "file": "crates/goose/src/agents/router_tool_selector.rs",
          "line": 48,
          "method": "env_var",
          "is_test": false,
          "context": "// If env var is set, create a new provider for embeddings\n            // Get embedding model and provider from environment variables\n            let embedding_model = env::var(\"GOOSE_EMBEDDING_MODEL\")\n                .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());\n            let embedding_provider_name ="
        },
        {
          "file": "crates/goose/src/providers/litellm.rs",
          "line": 229,
          "method": "env_var",
          "is_test": false,
          "context": "impl EmbeddingCapable for LiteLLMProvider {\n    async fn create_embeddings(&self, texts: Vec<String>) -> Result<Vec<Vec<f32>>, anyhow::Error> {\n        let embedding_model = std::env::var(\"GOOSE_EMBEDDING_MODEL\")\n            .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());"
        },
        {
          "file": "crates/goose/src/providers/litellm.rs",
          "line": 229,
          "method": "env_var",
          "is_test": false,
          "context": "impl EmbeddingCapable for LiteLLMProvider {\n    async fn create_embeddings(&self, texts: Vec<String>) -> Result<Vec<Vec<f32>>, anyhow::Error> {\n        let embedding_model = std::env::var(\"GOOSE_EMBEDDING_MODEL\")\n            .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());"
        },
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 268,
          "method": "env_var",
          "is_test": false,
          "context": "}\n\n        let embedding_model = std::env::var(\"GOOSE_EMBEDDING_MODEL\")\n            .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());"
        },
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 268,
          "method": "env_var",
          "is_test": false,
          "context": "}\n\n        let embedding_model = std::env::var(\"GOOSE_EMBEDDING_MODEL\")\n            .unwrap_or_else(|_| \"text-embedding-3-small\".to_string());"
        }
      ]
    },
    "OPENAI_ORGANIZATION": {
      "key": "OPENAI_ORGANIZATION",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 68,
          "method": "config_get",
          "is_test": false,
          "context": ".get_param(\"OPENAI_BASE_PATH\")\n            .unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();\n        let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config"
        },
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 68,
          "method": "config_get",
          "is_test": false,
          "context": ".get_param(\"OPENAI_BASE_PATH\")\n            .unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();\n        let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config"
        }
      ]
    },
    "OPENAI_PROJECT": {
      "key": "OPENAI_PROJECT",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 69,
          "method": "config_get",
          "is_test": false,
          "context": ".unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();\n        let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"OPENAI_CUSTOM_HEADERS\")"
        },
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 69,
          "method": "config_get",
          "is_test": false,
          "context": ".unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();\n        let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"OPENAI_CUSTOM_HEADERS\")"
        }
      ]
    },
    "OPENAI_CUSTOM_HEADERS": {
      "key": "OPENAI_CUSTOM_HEADERS",
      "category": "secrets",
      "methods": [
        "config_get",
        "secret_get"
      ],
      "description": null,
      "usage_count": 3,
      "locations": [
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 71,
          "method": "secret_get",
          "is_test": false,
          "context": "let project: Option<String> = config.get_param(\"OPENAI_PROJECT\").ok();\n        let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"OPENAI_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"OPENAI_CUSTOM_HEADERS\"))\n            .ok()"
        },
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 72,
          "method": "config_get",
          "is_test": false,
          "context": "let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"OPENAI_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"OPENAI_CUSTOM_HEADERS\"))\n            .ok()\n            .map(parse_custom_headers);"
        },
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 72,
          "method": "config_get",
          "is_test": false,
          "context": "let custom_headers: Option<HashMap<String, String>> = config\n            .get_secret(\"OPENAI_CUSTOM_HEADERS\")\n            .or_else(|_| config.get_param(\"OPENAI_CUSTOM_HEADERS\"))\n            .ok()\n            .map(parse_custom_headers);"
        }
      ]
    },
    "OPENAI_TIMEOUT": {
      "key": "OPENAI_TIMEOUT",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 75,
          "method": "config_get",
          "is_test": false,
          "context": ".ok()\n            .map(parse_custom_headers);\n        let timeout_secs: u64 = config.get_param(\"OPENAI_TIMEOUT\").unwrap_or(600);\n\n        let auth = AuthMethod::BearerToken(api_key);"
        },
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 75,
          "method": "config_get",
          "is_test": false,
          "context": ".ok()\n            .map(parse_custom_headers);\n        let timeout_secs: u64 = config.get_param(\"OPENAI_TIMEOUT\").unwrap_or(600);\n\n        let auth = AuthMethod::BearerToken(api_key);"
        }
      ]
    },
    "OPENAI_HOST": {
      "key": "OPENAI_HOST",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 63,
          "method": "config_get",
          "is_test": false,
          "context": "let api_key: String = config.get_secret(\"OPENAI_API_KEY\")?;\n        let host: String = config\n            .get_param(\"OPENAI_HOST\")\n            .unwrap_or_else(|_| \"https://api.openai.com\".to_string());\n        let base_path: String = config"
        }
      ]
    },
    "OPENAI_BASE_PATH": {
      "key": "OPENAI_BASE_PATH",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/openai.rs",
          "line": 66,
          "method": "config_get",
          "is_test": false,
          "context": ".unwrap_or_else(|_| \"https://api.openai.com\".to_string());\n        let base_path: String = config\n            .get_param(\"OPENAI_BASE_PATH\")\n            .unwrap_or_else(|_| \"v1/chat/completions\".to_string());\n        let organization: Option<String> = config.get_param(\"OPENAI_ORGANIZATION\").ok();"
        }
      ]
    },
    "VENICE_HOST": {
      "key": "VENICE_HOST",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/venice.rs",
          "line": 90,
          "method": "config_get",
          "is_test": false,
          "context": "let api_key: String = config.get_secret(\"VENICE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"VENICE_HOST\")\n            .unwrap_or_else(|_| VENICE_DEFAULT_HOST.to_string());\n        let base_path: String = config"
        }
      ]
    },
    "VENICE_BASE_PATH": {
      "key": "VENICE_BASE_PATH",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/venice.rs",
          "line": 93,
          "method": "config_get",
          "is_test": false,
          "context": ".unwrap_or_else(|_| VENICE_DEFAULT_HOST.to_string());\n        let base_path: String = config\n            .get_param(\"VENICE_BASE_PATH\")\n            .unwrap_or_else(|_| VENICE_DEFAULT_BASE_PATH.to_string());\n        let models_path: String = config"
        }
      ]
    },
    "VENICE_MODELS_PATH": {
      "key": "VENICE_MODELS_PATH",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/providers/venice.rs",
          "line": 96,
          "method": "config_get",
          "is_test": false,
          "context": ".unwrap_or_else(|_| VENICE_DEFAULT_BASE_PATH.to_string());\n        let models_path: String = config\n            .get_param(\"VENICE_MODELS_PATH\")\n            .unwrap_or_else(|_| VENICE_DEFAULT_MODELS_PATH.to_string());"
        }
      ]
    },
    "VENICE_API_KEY": {
      "key": "VENICE_API_KEY",
      "category": "secrets",
      "methods": [
        "secret_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/providers/venice.rs",
          "line": 88,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(mut model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"VENICE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"VENICE_HOST\")"
        },
        {
          "file": "crates/goose/src/providers/venice.rs",
          "line": 88,
          "method": "secret_get",
          "is_test": false,
          "context": "pub fn from_env(mut model: ModelConfig) -> Result<Self> {\n        let config = crate::config::Config::global();\n        let api_key: String = config.get_secret(\"VENICE_API_KEY\")?;\n        let host: String = config\n            .get_param(\"VENICE_HOST\")"
        }
      ]
    },
    "1=1": {
      "key": "1=1",
      "category": "config_file",
      "methods": [
        "config_delete"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose/src/agents/tool_vectordb.rs",
          "line": 165,
          "method": "config_delete",
          "is_test": false,
          "context": "// Delete all records instead of dropping the table\n                table\n                    .delete(\"1=1\") // This will match all records\n                    .await\n                    .context(\"Failed to delete all records\")?;"
        }
      ]
    },
    "GOOSE_VECTOR_DB_PATH": {
      "key": "GOOSE_VECTOR_DB_PATH",
      "category": "environment",
      "methods": [
        "env_set",
        "env_remove"
      ],
      "description": null,
      "usage_count": 5,
      "locations": [
        {
          "file": "crates/goose/src/agents/tool_vectordb.rs",
          "line": 554,
          "method": "env_set",
          "is_test": false,
          "context": "let custom_path = temp_dir.path().join(\"custom_vector_db\");\n\n        env::set_var(\"GOOSE_VECTOR_DB_PATH\", custom_path.to_str().unwrap());\n\n        let db_path = ToolVectorDB::get_db_path()?;"
        },
        {
          "file": "crates/goose/src/agents/tool_vectordb.rs",
          "line": 559,
          "method": "env_remove",
          "is_test": false,
          "context": "assert_eq!(db_path, custom_path);\n\n        env::remove_var(\"GOOSE_VECTOR_DB_PATH\");\n        Ok(())\n    }"
        },
        {
          "file": "crates/goose/src/agents/tool_vectordb.rs",
          "line": 568,
          "method": "env_set",
          "is_test": false,
          "context": "use std::env;\n\n        env::set_var(\"GOOSE_VECTOR_DB_PATH\", \"relative/path\");\n\n        let result = ToolVectorDB::get_db_path();"
        },
        {
          "file": "crates/goose/src/agents/tool_vectordb.rs",
          "line": 581,
          "method": "env_remove",
          "is_test": false,
          "context": ".contains(\"must be an absolute path\"));\n\n        env::remove_var(\"GOOSE_VECTOR_DB_PATH\");\n    }"
        },
        {
          "file": "crates/goose/src/agents/tool_vectordb.rs",
          "line": 589,
          "method": "env_remove",
          "is_test": false,
          "context": "use std::env;\n\n        env::remove_var(\"GOOSE_VECTOR_DB_PATH\");\n\n        let db_path = ToolVectorDB::get_db_path()?;"
        }
      ]
    },
    "GOOSE_ROUTER_TOOL_SELECTION_STRATEGY": {
      "key": "GOOSE_ROUTER_TOOL_SELECTION_STRATEGY",
      "category": "environment",
      "methods": [
        "config_get",
        "env_var",
        "config_set"
      ],
      "description": null,
      "usage_count": 9,
      "locations": [
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1174,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if GOOSE_ROUTER_STRATEGY is set as an environment variable\n    if std::env::var(\"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_ROUTER_TOOL_SELECTION_STRATEGY environment variable is set. Configuration will override this.\");\n    }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1174,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if GOOSE_ROUTER_STRATEGY is set as an environment variable\n    if std::env::var(\"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_ROUTER_TOOL_SELECTION_STRATEGY environment variable is set. Configuration will override this.\");\n    }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1193,
          "method": "config_set",
          "is_test": false,
          "context": "match strategy {\n        \"vector\" => {\n            config.set_param(\n                \"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\",\n                Value::String(\"vector\".to_string()),"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1193,
          "method": "config_set",
          "is_test": false,
          "context": "match strategy {\n        \"vector\" => {\n            config.set_param(\n                \"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\",\n                Value::String(\"vector\".to_string()),"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1193,
          "method": "config_set",
          "is_test": false,
          "context": "match strategy {\n        \"vector\" => {\n            config.set_param(\n                \"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\",\n                Value::String(\"vector\".to_string()),"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1202,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"default\" => {\n            config.set_param(\n                \"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\",\n                Value::String(\"default\".to_string()),"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1202,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"default\" => {\n            config.set_param(\n                \"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\",\n                Value::String(\"default\".to_string()),"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1202,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"default\" => {\n            config.set_param(\n                \"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\",\n                Value::String(\"default\".to_string()),"
        },
        {
          "file": "crates/goose/src/agents/tool_route_manager.rs",
          "line": 78,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n        let router_tool_selection_strategy = config\n            .get_param(\"GOOSE_ROUTER_TOOL_SELECTION_STRATEGY\")\n            .unwrap_or_else(|_| \"default\".to_string());"
        }
      ]
    },
    "GOOSE_EMBEDDING_MODEL_PROVIDER": {
      "key": "GOOSE_EMBEDDING_MODEL_PROVIDER",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/agents/router_tool_selector.rs",
          "line": 45,
          "method": "env_var",
          "is_test": false,
          "context": "let vector_db = ToolVectorDB::new(Some(table_name)).await?;\n\n        let embedding_provider = if env::var(\"GOOSE_EMBEDDING_MODEL_PROVIDER\").is_ok() {\n            // If env var is set, create a new provider for embeddings\n            // Get embedding model and provider from environment variables"
        },
        {
          "file": "crates/goose/src/agents/router_tool_selector.rs",
          "line": 51,
          "method": "env_var",
          "is_test": false,
          "context": ".unwrap_or_else(|_| \"text-embedding-3-small\".to_string());\n            let embedding_provider_name =\n                env::var(\"GOOSE_EMBEDDING_MODEL_PROVIDER\").unwrap_or_else(|_| \"openai\".to_string());\n\n            // Create the provider using the factory"
        }
      ]
    },
    "GOOSE_MAX_TURNS": {
      "key": "GOOSE_MAX_TURNS",
      "category": "config_file",
      "methods": [
        "config_get",
        "config_set"
      ],
      "description": null,
      "usage_count": 7,
      "locations": [
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1522,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n\n    let current_max_turns: u32 = config.get_param(\"GOOSE_MAX_TURNS\").unwrap_or(1000);\n\n    let max_turns_input: String ="
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1522,
          "method": "config_get",
          "is_test": false,
          "context": "let config = Config::global();\n\n    let current_max_turns: u32 = config.get_param(\"GOOSE_MAX_TURNS\").unwrap_or(1000);\n\n    let max_turns_input: String ="
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1541,
          "method": "config_set",
          "is_test": false,
          "context": "let max_turns: u32 = max_turns_input.parse()?;\n    config.set_param(\"GOOSE_MAX_TURNS\", Value::from(max_turns))?;\n\n    cliclack::outro(format!("
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1541,
          "method": "config_set",
          "is_test": false,
          "context": "let max_turns: u32 = max_turns_input.parse()?;\n    config.set_param(\"GOOSE_MAX_TURNS\", Value::from(max_turns))?;\n\n    cliclack::outro(format!("
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1541,
          "method": "config_set",
          "is_test": false,
          "context": "let max_turns: u32 = max_turns_input.parse()?;\n    config.set_param(\"GOOSE_MAX_TURNS\", Value::from(max_turns))?;\n\n    cliclack::outro(format!("
        },
        {
          "file": "crates/goose/src/agents/agent.rs",
          "line": 884,
          "method": "config_get",
          "is_test": false,
          "context": ".and_then(|s| s.max_turns)\n                .unwrap_or_else(|| {\n                    config.get_param(\"GOOSE_MAX_TURNS\").unwrap_or(DEFAULT_MAX_TURNS)\n                });"
        },
        {
          "file": "crates/goose/src/agents/agent.rs",
          "line": 884,
          "method": "config_get",
          "is_test": false,
          "context": ".and_then(|s| s.max_turns)\n                .unwrap_or_else(|| {\n                    config.get_param(\"GOOSE_MAX_TURNS\").unwrap_or(DEFAULT_MAX_TURNS)\n                });"
        }
      ]
    },
    "USER": {
      "key": "USER",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose/src/agents/agent.rs",
          "line": 1360,
          "method": "env_var",
          "is_test": false,
          "context": "let author = Author {\n            contact: std::env::var(\"USER\")\n                .or_else(|_| std::env::var(\"USERNAME\"))\n                .ok(),"
        },
        {
          "file": "crates/goose/src/agents/agent.rs",
          "line": 1360,
          "method": "env_var",
          "is_test": false,
          "context": "let author = Author {\n            contact: std::env::var(\"USER\")\n                .or_else(|_| std::env::var(\"USERNAME\"))\n                .ok(),"
        }
      ]
    },
    "GOOSE_AUTO_COMPACT_THRESHOLD": {
      "key": "GOOSE_AUTO_COMPACT_THRESHOLD",
      "category": "config_file",
      "methods": [
        "config_set"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose/src/context_mgmt/auto_compact.rs",
          "line": 546,
          "method": "config_set",
          "is_test": false,
          "context": "let config = Config::global();\n        config\n            .set_param(\"GOOSE_AUTO_COMPACT_THRESHOLD\", serde_json::Value::from(0.1))\n            .unwrap();"
        },
        {
          "file": "crates/goose/src/context_mgmt/auto_compact.rs",
          "line": 546,
          "method": "config_set",
          "is_test": false,
          "context": "let config = Config::global();\n        config\n            .set_param(\"GOOSE_AUTO_COMPACT_THRESHOLD\", serde_json::Value::from(0.1))\n            .unwrap();"
        },
        {
          "file": "crates/goose/src/context_mgmt/auto_compact.rs",
          "line": 576,
          "method": "config_set",
          "is_test": false,
          "context": "// Clean up config\n        config\n            .set_param(\"GOOSE_AUTO_COMPACT_THRESHOLD\", serde_json::Value::from(0.3))\n            .unwrap();\n    }"
        },
        {
          "file": "crates/goose/src/context_mgmt/auto_compact.rs",
          "line": 576,
          "method": "config_set",
          "is_test": false,
          "context": "// Clean up config\n        config\n            .set_param(\"GOOSE_AUTO_COMPACT_THRESHOLD\", serde_json::Value::from(0.3))\n            .unwrap();\n    }"
        }
      ]
    },
    "CLAUDE_THINKING_BUDGET": {
      "key": "CLAUDE_THINKING_BUDGET",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 419,
          "method": "env_var",
          "is_test": false,
          "context": "if model_config.model_name.starts_with(\"claude-3-7-sonnet-\") && is_thinking_enabled {\n        // Minimum budget_tokens is 1024\n        let budget_tokens = std::env::var(\"CLAUDE_THINKING_BUDGET\")\n            .unwrap_or_else(|_| \"16000\".to_string())\n            .parse()"
        },
        {
          "file": "crates/goose/src/providers/formats/anthropic.rs",
          "line": 419,
          "method": "env_var",
          "is_test": false,
          "context": "if model_config.model_name.starts_with(\"claude-3-7-sonnet-\") && is_thinking_enabled {\n        // Minimum budget_tokens is 1024\n        let budget_tokens = std::env::var(\"CLAUDE_THINKING_BUDGET\")\n            .unwrap_or_else(|_| \"16000\".to_string())\n            .parse()"
        },
        {
          "file": "crates/goose/src/providers/formats/databricks.rs",
          "line": 563,
          "method": "env_var",
          "is_test": false,
          "context": "if is_claude_sonnet && is_thinking_enabled {\n        // Minimum budget_tokens is 1024\n        let budget_tokens = std::env::var(\"CLAUDE_THINKING_BUDGET\")\n            .unwrap_or_else(|_| \"16000\".to_string())\n            .parse()"
        },
        {
          "file": "crates/goose/src/providers/formats/databricks.rs",
          "line": 563,
          "method": "env_var",
          "is_test": false,
          "context": "if is_claude_sonnet && is_thinking_enabled {\n        // Minimum budget_tokens is 1024\n        let budget_tokens = std::env::var(\"CLAUDE_THINKING_BUDGET\")\n            .unwrap_or_else(|_| \"16000\".to_string())\n            .parse()"
        }
      ]
    },
    "CONTEXT_FILE_NAMES": {
      "key": "CONTEXT_FILE_NAMES",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 10,
      "locations": [
        {
          "file": "crates/goose-mcp/src/developer/mod.rs",
          "line": 406,
          "method": "env_var",
          "is_test": false,
          "context": "};\n\n        let hints_filenames: Vec<String> = std::env::var(\"CONTEXT_FILE_NAMES\")\n            .ok()\n            .and_then(|s| serde_json::from_str(&s).ok())"
        },
        {
          "file": "crates/goose-mcp/src/developer/mod.rs",
          "line": 406,
          "method": "env_var",
          "is_test": false,
          "context": "};\n\n        let hints_filenames: Vec<String> = std::env::var(\"CONTEXT_FILE_NAMES\")\n            .ok()\n            .and_then(|s| serde_json::from_str(&s).ok())"
        },
        {
          "file": "crates/goose-mcp/src/developer/mod.rs",
          "line": 1714,
          "method": "env_set",
          "is_test": false,
          "context": "let dir = TempDir::new().unwrap();\n        std::env::set_current_dir(dir.path()).unwrap();\n        std::env::set_var(\"CONTEXT_FILE_NAMES\", r#\"[\"CLAUDE.md\", \".goosehints\"]\"#);\n\n        fs::write(\"CLAUDE.md\", \"Custom hints file content from CLAUDE.md\").unwrap();"
        },
        {
          "file": "crates/goose-mcp/src/developer/mod.rs",
          "line": 1714,
          "method": "env_set",
          "is_test": false,
          "context": "let dir = TempDir::new().unwrap();\n        std::env::set_current_dir(dir.path()).unwrap();\n        std::env::set_var(\"CONTEXT_FILE_NAMES\", r#\"[\"CLAUDE.md\", \".goosehints\"]\"#);\n\n        fs::write(\"CLAUDE.md\", \"Custom hints file content from CLAUDE.md\").unwrap();"
        },
        {
          "file": "crates/goose-mcp/src/developer/mod.rs",
          "line": 1723,
          "method": "env_remove",
          "is_test": false,
          "context": "assert!(instructions.contains(\"Custom hints file content from CLAUDE.md\"));\n        assert!(instructions.contains(\"Custom hints file content from .goosehints\"));\n        std::env::remove_var(\"CONTEXT_FILE_NAMES\");\n    }"
        },
        {
          "file": "crates/goose-mcp/src/developer/mod.rs",
          "line": 1723,
          "method": "env_remove",
          "is_test": false,
          "context": "assert!(instructions.contains(\"Custom hints file content from CLAUDE.md\"));\n        assert!(instructions.contains(\"Custom hints file content from .goosehints\"));\n        std::env::remove_var(\"CONTEXT_FILE_NAMES\");\n    }"
        },
        {
          "file": "crates/goose-mcp/src/developer/mod.rs",
          "line": 1731,
          "method": "env_set",
          "is_test": false,
          "context": "let dir = TempDir::new().unwrap();\n        std::env::set_current_dir(dir.path()).unwrap();\n        std::env::set_var(\"CONTEXT_FILE_NAMES\", r#\"[\"CLAUDE.md\"]\"#);\n\n        fs::write(\"CLAUDE.md\", \"Custom hints file content\").unwrap();"
        },
        {
          "file": "crates/goose-mcp/src/developer/mod.rs",
          "line": 1731,
          "method": "env_set",
          "is_test": false,
          "context": "let dir = TempDir::new().unwrap();\n        std::env::set_current_dir(dir.path()).unwrap();\n        std::env::set_var(\"CONTEXT_FILE_NAMES\", r#\"[\"CLAUDE.md\"]\"#);\n\n        fs::write(\"CLAUDE.md\", \"Custom hints file content\").unwrap();"
        },
        {
          "file": "crates/goose-mcp/src/developer/mod.rs",
          "line": 1739,
          "method": "env_remove",
          "is_test": false,
          "context": "assert!(instructions.contains(\"Custom hints file content\"));\n        assert!(!instructions.contains(\".goosehints\")); // Make sure it's not loading the default\n        std::env::remove_var(\"CONTEXT_FILE_NAMES\");\n    }"
        },
        {
          "file": "crates/goose-mcp/src/developer/mod.rs",
          "line": 1739,
          "method": "env_remove",
          "is_test": false,
          "context": "assert!(instructions.contains(\"Custom hints file content\"));\n        assert!(!instructions.contains(\".goosehints\")); // Make sure it's not loading the default\n        std::env::remove_var(\"CONTEXT_FILE_NAMES\");\n    }"
        }
      ]
    },
    "GOOSE_WORKING_DIR": {
      "key": "GOOSE_WORKING_DIR",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-mcp/src/memory/mod.rs",
          "line": 228,
          "method": "env_var",
          "is_test": false,
          "context": "// Check for .goose/memory in current directory\n        let local_memory_dir = std::env::var(\"GOOSE_WORKING_DIR\")\n            .map(PathBuf::from)\n            .unwrap_or_else(|_| std::env::current_dir().unwrap())"
        },
        {
          "file": "crates/goose-mcp/src/memory/mod.rs",
          "line": 228,
          "method": "env_var",
          "is_test": false,
          "context": "// Check for .goose/memory in current directory\n        let local_memory_dir = std::env::var(\"GOOSE_WORKING_DIR\")\n            .map(PathBuf::from)\n            .unwrap_or_else(|_| std::env::current_dir().unwrap())"
        }
      ]
    },
    "GOOGLE_DRIVE_OAUTH_PATH": {
      "key": "GOOGLE_DRIVE_OAUTH_PATH",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-mcp/src/google_drive/mod.rs",
          "line": 102,
          "method": "env_var",
          "is_test": false,
          "context": "Arc<CredentialsManager>,\n    ) {\n        let keyfile_path_str = env::var(\"GOOGLE_DRIVE_OAUTH_PATH\")\n            .unwrap_or_else(|_| \"./gcp-oauth.keys.json\".to_string());\n        let credentials_path_str = env::var(\"GOOGLE_DRIVE_CREDENTIALS_PATH\")"
        }
      ]
    },
    "GOOGLE_DRIVE_CREDENTIALS_PATH": {
      "key": "GOOGLE_DRIVE_CREDENTIALS_PATH",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-mcp/src/google_drive/mod.rs",
          "line": 104,
          "method": "env_var",
          "is_test": false,
          "context": "let keyfile_path_str = env::var(\"GOOGLE_DRIVE_OAUTH_PATH\")\n            .unwrap_or_else(|_| \"./gcp-oauth.keys.json\".to_string());\n        let credentials_path_str = env::var(\"GOOGLE_DRIVE_CREDENTIALS_PATH\")\n            .unwrap_or_else(|_| \"./gdrive-server-credentials.json\".to_string());"
        }
      ]
    },
    "GOOGLE_DRIVE_OAUTH_CONFIG": {
      "key": "GOOGLE_DRIVE_OAUTH_CONFIG",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-mcp/src/google_drive/mod.rs",
          "line": 119,
          "method": "env_var",
          "is_test": false,
          "context": ");\n\n        if let Ok(oauth_config) = env::var(\"GOOGLE_DRIVE_OAUTH_CONFIG\") {\n            // Ensure the parent directory exists (create_dir_all is idempotent)\n            if let Some(parent) = keyfile_path.parent() {"
        }
      ]
    },
    "WAYLAND_DISPLAY": {
      "key": "WAYLAND_DISPLAY",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-mcp/src/computercontroller/platform/linux.rs",
          "line": 44,
          "method": "env_var",
          "is_test": false,
          "context": "fn detect_display_server() -> DisplayServer {\n        if let Ok(wayland_display) = std::env::var(\"WAYLAND_DISPLAY\") {\n            if !wayland_display.is_empty() {\n                return DisplayServer::Wayland;"
        },
        {
          "file": "crates/goose-mcp/src/computercontroller/platform/linux.rs",
          "line": 44,
          "method": "env_var",
          "is_test": false,
          "context": "fn detect_display_server() -> DisplayServer {\n        if let Ok(wayland_display) = std::env::var(\"WAYLAND_DISPLAY\") {\n            if !wayland_display.is_empty() {\n                return DisplayServer::Wayland;"
        }
      ]
    },
    "GOOSE_EDITOR_API_KEY": {
      "key": "GOOSE_EDITOR_API_KEY",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-mcp/src/developer/editor_models/mod.rs",
          "line": 78,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if basic editor API variables are set\n    let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;"
        },
        {
          "file": "crates/goose-mcp/src/developer/editor_models/mod.rs",
          "line": 78,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if basic editor API variables are set\n    let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;"
        }
      ]
    },
    "GOOSE_EDITOR_HOST": {
      "key": "GOOSE_EDITOR_HOST",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-mcp/src/developer/editor_models/mod.rs",
          "line": 79,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if basic editor API variables are set\n    let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;"
        },
        {
          "file": "crates/goose-mcp/src/developer/editor_models/mod.rs",
          "line": 79,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if basic editor API variables are set\n    let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;"
        }
      ]
    },
    "GOOSE_EDITOR_MODEL": {
      "key": "GOOSE_EDITOR_MODEL",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-mcp/src/developer/editor_models/mod.rs",
          "line": 80,
          "method": "env_var",
          "is_test": false,
          "context": "let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;\n\n    if api_key.is_empty() || host.is_empty() || model.is_empty() {"
        },
        {
          "file": "crates/goose-mcp/src/developer/editor_models/mod.rs",
          "line": 80,
          "method": "env_var",
          "is_test": false,
          "context": "let api_key = std::env::var(\"GOOSE_EDITOR_API_KEY\").ok()?;\n    let host = std::env::var(\"GOOSE_EDITOR_HOST\").ok()?;\n    let model = std::env::var(\"GOOSE_EDITOR_MODEL\").ok()?;\n\n    if api_key.is_empty() || host.is_empty() || model.is_empty() {"
        }
      ]
    },
    "--max-tool-repetitions": {
      "key": "--max-tool-repetitions",
      "category": "cli_flags",
      "methods": [
        "clap_long"
      ],
      "description": "Maximum number of consecutive identical tool calls allowed",
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 327,
          "method": "clap_long",
          "is_test": false,
          "context": "debug: bool,\n\n        /// Maximum number of consecutive identical tool calls allowed\n        #[arg(\n            long = \"max-tool-repetitions\",\n            value_name = \"NUMBER\",\n            help = \"Maximum number of consecutive identical tool calls allowed\","
        },
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 483,
          "method": "clap_long",
          "is_test": false,
          "context": "render_recipe: bool,\n\n        /// Maximum number of consecutive identical tool calls allowed\n        #[arg(\n            long = \"max-tool-repetitions\",\n            value_name = \"NUMBER\",\n            help = \"Maximum number of consecutive identical tool calls allowed\","
        }
      ]
    },
    "--text": {
      "key": "--text",
      "category": "cli_flags",
      "methods": [
        "clap_long"
      ],
      "description": "Input text to provide to Goose directly",
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 408,
          "method": "clap_long",
          "is_test": false,
          "context": "instructions: Option<String>,\n\n        /// Input text containing commands\n        #[arg(\n            short = 't',\n            long = \"text\",\n            value_name = \"TEXT\","
        }
      ]
    },
    "-t": {
      "key": "-t",
      "category": "cli_flags",
      "methods": [
        "clap_short"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 408,
          "method": "clap_short",
          "is_test": false,
          "context": "instructions: Option<String>,\n\n        /// Input text containing commands\n        #[arg(\n            short = 't',\n            long = \"text\",\n            value_name = \"TEXT\","
        }
      ]
    },
    "--system": {
      "key": "--system",
      "category": "cli_flags",
      "methods": [
        "clap_long"
      ],
      "description": "Additional system prompt to customize agent behavior",
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 420,
          "method": "clap_long",
          "is_test": false,
          "context": "input_text: Option<String>,\n\n        /// Additional system prompt to customize agent behavior\n        #[arg(\n            long = \"system\",\n            value_name = \"TEXT\",\n            help = \"Additional system prompt to customize agent behavior\","
        }
      ]
    },
    "--interactive": {
      "key": "--interactive",
      "category": "cli_flags",
      "methods": [
        "clap_long"
      ],
      "description": "Continue in interactive mode after processing initial input",
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 452,
          "method": "clap_long",
          "is_test": false,
          "context": "params: Vec<(String, String)>,\n\n        /// Continue in interactive mode after processing input\n        #[arg(\n            short = 's',\n            long = \"interactive\",\n            help = \"Continue in interactive mode after processing initial input\""
        }
      ]
    },
    "-s": {
      "key": "-s",
      "category": "cli_flags",
      "methods": [
        "clap_short"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 452,
          "method": "clap_short",
          "is_test": false,
          "context": "params: Vec<(String, String)>,\n\n        /// Continue in interactive mode after processing input\n        #[arg(\n            short = 's',\n            long = \"interactive\",\n            help = \"Continue in interactive mode after processing initial input\""
        }
      ]
    },
    "--no-session": {
      "key": "--no-session",
      "category": "cli_flags",
      "methods": [
        "clap_long"
      ],
      "description": "Run without storing a session file",
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 460,
          "method": "clap_long",
          "is_test": false,
          "context": "interactive: bool,\n\n        /// Run without storing a session file\n        #[arg(\n            long = \"no-session\",\n            help = \"Run without storing a session file\",\n            long_help = \"Execute commands without creating or using a session file. Useful for automated runs.\","
        }
      ]
    },
    "--explain": {
      "key": "--explain",
      "category": "cli_flags",
      "methods": [
        "clap_long"
      ],
      "description": "Show the recipe title, description, and parameters",
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 469,
          "method": "clap_long",
          "is_test": false,
          "context": "no_session: bool,\n\n        /// Show the recipe title, description, and parameters\n        #[arg(\n            long = \"explain\",\n            help = \"Show the recipe title, description, and parameters\"\n        )]"
        }
      ]
    },
    "--render-recipe": {
      "key": "--render-recipe",
      "category": "cli_flags",
      "methods": [
        "clap_long"
      ],
      "description": "Print the rendered recipe instead of running it.",
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 476,
          "method": "clap_long",
          "is_test": false,
          "context": "explain: bool,\n\n        /// Print the rendered recipe instead of running it\n        #[arg(\n            long = \"render-recipe\",\n            help = \"Print the rendered recipe instead of running it.\"\n        )]"
        }
      ]
    },
    "--quiet": {
      "key": "--quiet",
      "category": "cli_flags",
      "methods": [
        "clap_long"
      ],
      "description": "Quiet mode. Suppress non-response output, printing only the model response to stdout",
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 563,
          "method": "clap_long",
          "is_test": false,
          "context": "builtins: Vec<String>,\n\n        /// Quiet mode - suppress non-response output\n        #[arg(\n            short = 'q',\n            long = \"quiet\",\n            help = \"Quiet mode. Suppress non-response output, printing only the model response to stdout\""
        }
      ]
    },
    "-q": {
      "key": "-q",
      "category": "cli_flags",
      "methods": [
        "clap_short"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/cli.rs",
          "line": 563,
          "method": "clap_short",
          "is_test": false,
          "context": "builtins: Vec<String>,\n\n        /// Quiet mode - suppress non-response output\n        #[arg(\n            short = 'q',\n            long = \"quiet\",\n            help = \"Quiet mode. Suppress non-response output, printing only the model response to stdout\""
        }
      ]
    },
    "GITHUB_ACTIONS": {
      "key": "GITHUB_ACTIONS",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-cli/src/scenario_tests/scenario_runner.rs",
          "line": 170,
          "method": "env_var",
          "is_test": true,
          "context": "}\n    } else {\n        if std::env::var(\"GITHUB_ACTIONS\").is_ok() {\n            panic!(\n                \"Test recording is not supported on CI. \\"
        },
        {
          "file": "crates/goose-cli/src/scenario_tests/scenario_runner.rs",
          "line": 170,
          "method": "env_var",
          "is_test": true,
          "context": "}\n    } else {\n        if std::env::var(\"GITHUB_ACTIONS\").is_ok() {\n            panic!(\n                \"Test recording is not supported on CI. \\"
        }
      ]
    },
    "GOOSE_SCHEDULER_TYPE": {
      "key": "GOOSE_SCHEDULER_TYPE",
      "category": "environment",
      "methods": [
        "config_get",
        "env_var",
        "config_set"
      ],
      "description": null,
      "usage_count": 13,
      "locations": [
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1469,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if GOOSE_SCHEDULER_TYPE is set as an environment variable\n    if std::env::var(\"GOOSE_SCHEDULER_TYPE\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_SCHEDULER_TYPE environment variable is set and will override the configuration here.\");\n    }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1469,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if GOOSE_SCHEDULER_TYPE is set as an environment variable\n    if std::env::var(\"GOOSE_SCHEDULER_TYPE\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_SCHEDULER_TYPE environment variable is set and will override the configuration here.\");\n    }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1475,
          "method": "config_get",
          "is_test": false,
          "context": "// Get current scheduler type from config for display\n    let current_scheduler: String = config\n        .get_param(\"GOOSE_SCHEDULER_TYPE\")\n        .unwrap_or_else(|_| \"legacy\".to_string());"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1492,
          "method": "config_set",
          "is_test": false,
          "context": "match scheduler_type {\n        \"legacy\" => {\n            config.set_param(\"GOOSE_SCHEDULER_TYPE\", Value::String(\"legacy\".to_string()))?;\n            cliclack::outro(\n                \"Set to Built-in Cron scheduler - simple and reliable for basic scheduling\","
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1492,
          "method": "config_set",
          "is_test": false,
          "context": "match scheduler_type {\n        \"legacy\" => {\n            config.set_param(\"GOOSE_SCHEDULER_TYPE\", Value::String(\"legacy\".to_string()))?;\n            cliclack::outro(\n                \"Set to Built-in Cron scheduler - simple and reliable for basic scheduling\","
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1492,
          "method": "config_set",
          "is_test": false,
          "context": "match scheduler_type {\n        \"legacy\" => {\n            config.set_param(\"GOOSE_SCHEDULER_TYPE\", Value::String(\"legacy\".to_string()))?;\n            cliclack::outro(\n                \"Set to Built-in Cron scheduler - simple and reliable for basic scheduling\","
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1498,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"temporal\" => {\n            config.set_param(\n                \"GOOSE_SCHEDULER_TYPE\",\n                Value::String(\"temporal\".to_string()),"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1498,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"temporal\" => {\n            config.set_param(\n                \"GOOSE_SCHEDULER_TYPE\",\n                Value::String(\"temporal\".to_string()),"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1498,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"temporal\" => {\n            config.set_param(\n                \"GOOSE_SCHEDULER_TYPE\",\n                Value::String(\"temporal\".to_string()),"
        },
        {
          "file": "crates/goose-cli/src/commands/schedule.rs",
          "line": 266,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if we're using temporal scheduler\n    let scheduler_type =\n        std::env::var(\"GOOSE_SCHEDULER_TYPE\").unwrap_or_else(|_| \"temporal\".to_string());\n\n    if scheduler_type != \"temporal\" {"
        },
        {
          "file": "crates/goose-cli/src/commands/schedule.rs",
          "line": 266,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if we're using temporal scheduler\n    let scheduler_type =\n        std::env::var(\"GOOSE_SCHEDULER_TYPE\").unwrap_or_else(|_| \"temporal\".to_string());\n\n    if scheduler_type != \"temporal\" {"
        },
        {
          "file": "crates/goose-cli/src/commands/schedule.rs",
          "line": 304,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if we're using temporal scheduler\n    let scheduler_type =\n        std::env::var(\"GOOSE_SCHEDULER_TYPE\").unwrap_or_else(|_| \"temporal\".to_string());\n\n    if scheduler_type != \"temporal\" {"
        },
        {
          "file": "crates/goose-cli/src/commands/schedule.rs",
          "line": 304,
          "method": "env_var",
          "is_test": false,
          "context": "// Check if we're using temporal scheduler\n    let scheduler_type =\n        std::env::var(\"GOOSE_SCHEDULER_TYPE\").unwrap_or_else(|_| \"temporal\".to_string());\n\n    if scheduler_type != \"temporal\" {"
        }
      ]
    },
    "GOOSE_CLI_MIN_PRIORITY": {
      "key": "GOOSE_CLI_MIN_PRIORITY",
      "category": "environment",
      "methods": [
        "env_var",
        "config_set"
      ],
      "description": null,
      "usage_count": 11,
      "locations": [
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1216,
          "method": "env_var",
          "is_test": false,
          "context": "let config = Config::global();\n    // Check if GOOSE_CLI_MIN_PRIORITY is set as an environment variable\n    if std::env::var(\"GOOSE_CLI_MIN_PRIORITY\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_CLI_MIN_PRIORITY environment variable is set and will override the configuration here.\");\n    }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1216,
          "method": "env_var",
          "is_test": false,
          "context": "let config = Config::global();\n    // Check if GOOSE_CLI_MIN_PRIORITY is set as an environment variable\n    if std::env::var(\"GOOSE_CLI_MIN_PRIORITY\").is_ok() {\n        let _ = cliclack::log::info(\"Notice: GOOSE_CLI_MIN_PRIORITY environment variable is set and will override the configuration here.\");\n    }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1227,
          "method": "config_set",
          "is_test": false,
          "context": "match tool_log_level {\n        \"high\" => {\n            config.set_param(\"GOOSE_CLI_MIN_PRIORITY\", Value::from(0.8))?;\n            cliclack::outro(\"Showing tool output of high importance only.\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1227,
          "method": "config_set",
          "is_test": false,
          "context": "match tool_log_level {\n        \"high\" => {\n            config.set_param(\"GOOSE_CLI_MIN_PRIORITY\", Value::from(0.8))?;\n            cliclack::outro(\"Showing tool output of high importance only.\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1227,
          "method": "config_set",
          "is_test": false,
          "context": "match tool_log_level {\n        \"high\" => {\n            config.set_param(\"GOOSE_CLI_MIN_PRIORITY\", Value::from(0.8))?;\n            cliclack::outro(\"Showing tool output of high importance only.\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1231,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"medium\" => {\n            config.set_param(\"GOOSE_CLI_MIN_PRIORITY\", Value::from(0.2))?;\n            cliclack::outro(\"Showing tool output of medium importance.\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1231,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"medium\" => {\n            config.set_param(\"GOOSE_CLI_MIN_PRIORITY\", Value::from(0.2))?;\n            cliclack::outro(\"Showing tool output of medium importance.\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1231,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"medium\" => {\n            config.set_param(\"GOOSE_CLI_MIN_PRIORITY\", Value::from(0.2))?;\n            cliclack::outro(\"Showing tool output of medium importance.\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1235,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"all\" => {\n            config.set_param(\"GOOSE_CLI_MIN_PRIORITY\", Value::from(0.0))?;\n            cliclack::outro(\"Showing all tool output.\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1235,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"all\" => {\n            config.set_param(\"GOOSE_CLI_MIN_PRIORITY\", Value::from(0.0))?;\n            cliclack::outro(\"Showing all tool output.\")?;\n        }"
        },
        {
          "file": "crates/goose-cli/src/commands/configure.rs",
          "line": 1235,
          "method": "config_set",
          "is_test": false,
          "context": "}\n        \"all\" => {\n            config.set_param(\"GOOSE_CLI_MIN_PRIORITY\", Value::from(0.0))?;\n            cliclack::outro(\"Showing all tool output.\")?;\n        }"
        }
      ]
    },
    "RANDOM_THINKING_MESSAGES": {
      "key": "RANDOM_THINKING_MESSAGES",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 101,
          "method": "config_get",
          "is_test": false,
          "context": "let spinner = cliclack::spinner();\n        if Config::global()\n            .get_param(\"RANDOM_THINKING_MESSAGES\")\n            .unwrap_or(true)\n        {"
        }
      ]
    },
    "GOOSE_CLI_THEME": {
      "key": "GOOSE_CLI_THEME",
      "category": "environment",
      "methods": [
        "env_var",
        "config_set"
      ],
      "description": null,
      "usage_count": 7,
      "locations": [
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 58,
          "method": "env_var",
          "is_test": false,
          "context": "thread_local! {\n    static CURRENT_THEME: RefCell<Theme> = RefCell::new(\n        std::env::var(\"GOOSE_CLI_THEME\").ok()\n            .map(|val| Theme::from_config_str(&val))\n            .unwrap_or_else(||"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 58,
          "method": "env_var",
          "is_test": false,
          "context": "thread_local! {\n    static CURRENT_THEME: RefCell<Theme> = RefCell::new(\n        std::env::var(\"GOOSE_CLI_THEME\").ok()\n            .map(|val| Theme::from_config_str(&val))\n            .unwrap_or_else(||"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 71,
          "method": "config_set",
          "is_test": false,
          "context": "let config = Config::global();\n    config\n        .set_param(\"GOOSE_CLI_THEME\", Value::String(theme.as_config_string()))\n        .expect(\"Failed to set theme\");\n    CURRENT_THEME.with(|t| *t.borrow_mut() = theme);"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 71,
          "method": "config_set",
          "is_test": false,
          "context": "let config = Config::global();\n    config\n        .set_param(\"GOOSE_CLI_THEME\", Value::String(theme.as_config_string()))\n        .expect(\"Failed to set theme\");\n    CURRENT_THEME.with(|t| *t.borrow_mut() = theme);"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 82,
          "method": "config_set",
          "is_test": false,
          "context": "};\n\n    if let Err(e) = config.set_param(\"GOOSE_CLI_THEME\", Value::String(theme_str.to_string())) {\n        eprintln!(\"Failed to save theme setting to config: {}\", e);\n    }"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 82,
          "method": "config_set",
          "is_test": false,
          "context": "};\n\n    if let Err(e) = config.set_param(\"GOOSE_CLI_THEME\", Value::String(theme_str.to_string())) {\n        eprintln!(\"Failed to save theme setting to config: {}\", e);\n    }"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 82,
          "method": "config_set",
          "is_test": false,
          "context": "};\n\n    if let Err(e) = config.set_param(\"GOOSE_CLI_THEME\", Value::String(theme_str.to_string())) {\n        eprintln!(\"Failed to save theme setting to config: {}\", e);\n    }"
        }
      ]
    },
    "GOOSE_CLI_SHOW_THINKING": {
      "key": "GOOSE_CLI_SHOW_THINKING",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 176,
          "method": "env_var",
          "is_test": false,
          "context": "}\n            MessageContent::Thinking(thinking) => {\n                if std::env::var(\"GOOSE_CLI_SHOW_THINKING\").is_ok()\n                    && std::io::stdout().is_terminal()\n                {"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 176,
          "method": "env_var",
          "is_test": false,
          "context": "}\n            MessageContent::Thinking(thinking) => {\n                if std::env::var(\"GOOSE_CLI_SHOW_THINKING\").is_ok()\n                    && std::io::stdout().is_terminal()\n                {"
        }
      ]
    },
    "NO_COLOR": {
      "key": "NO_COLOR",
      "category": "environment",
      "methods": [
        "env_var_os"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 484,
          "method": "env_var_os",
          "is_test": false,
          "context": "pub fn env_no_color() -> bool {\n    // if NO_COLOR is defined at all disable colors\n    std::env::var_os(\"NO_COLOR\").is_none()\n}"
        },
        {
          "file": "crates/goose-cli/src/session/output.rs",
          "line": 484,
          "method": "env_var_os",
          "is_test": false,
          "context": "pub fn env_no_color() -> bool {\n    // if NO_COLOR is defined at all disable colors\n    std::env::var_os(\"NO_COLOR\").is_none()\n}"
        }
      ]
    },
    "GOOSE_SYSTEM_PROMPT_FILE_PATH": {
      "key": "GOOSE_SYSTEM_PROMPT_FILE_PATH",
      "category": "config_file",
      "methods": [
        "config_get"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-cli/src/session/builder.rs",
          "line": 563,
          "method": "config_get",
          "is_test": false,
          "context": "// Only override system prompt if a system override exists\n    let system_prompt_file: Option<String> = config.get_param(\"GOOSE_SYSTEM_PROMPT_FILE_PATH\").ok();\n    if let Some(ref path) = system_prompt_file {\n        let override_prompt ="
        },
        {
          "file": "crates/goose-cli/src/session/builder.rs",
          "line": 563,
          "method": "config_get",
          "is_test": false,
          "context": "// Only override system prompt if a system override exists\n    let system_prompt_file: Option<String> = config.get_param(\"GOOSE_SYSTEM_PROMPT_FILE_PATH\").ok();\n    if let Some(ref path) = system_prompt_file {\n        let override_prompt ="
        }
      ]
    },
    "CARGO_MANIFEST_DIR": {
      "key": "CARGO_MANIFEST_DIR",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 1,
      "locations": [
        {
          "file": "crates/goose-server/src/bin/generate_schema.rs",
          "line": 9,
          "method": "env_var",
          "is_test": false,
          "context": "let schema = openapi::generate_schema();\n\n    let package_dir = env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n    let output_path = PathBuf::from(package_dir)\n        .join(\"..\")"
        }
      ]
    },
    "GOOSE_SERVER__SECRET_KEY": {
      "key": "GOOSE_SERVER__SECRET_KEY",
      "category": "environment",
      "methods": [
        "env_var"
      ],
      "description": null,
      "usage_count": 2,
      "locations": [
        {
          "file": "crates/goose-server/src/commands/agent.rs",
          "line": 31,
          "method": "env_var",
          "is_test": false,
          "context": "let secret_key =\n        std::env::var(\"GOOSE_SERVER__SECRET_KEY\").unwrap_or_else(|_| \"test\".to_string());\n\n    let new_agent = Agent::new();"
        },
        {
          "file": "crates/goose-server/src/commands/agent.rs",
          "line": 31,
          "method": "env_var",
          "is_test": false,
          "context": "let secret_key =\n        std::env::var(\"GOOSE_SERVER__SECRET_KEY\").unwrap_or_else(|_| \"test\".to_string());\n\n    let new_agent = Agent::new();"
        }
      ]
    },
    "ELEVENLABS_API_KEY": {
      "key": "ELEVENLABS_API_KEY",
      "category": "secrets",
      "methods": [
        "config_delete",
        "secret_get"
      ],
      "description": null,
      "usage_count": 4,
      "locations": [
        {
          "file": "crates/goose-server/src/routes/audio.rs",
          "line": 212,
          "method": "secret_get",
          "is_test": false,
          "context": "// First try to get it as a secret\n    let api_key: String = match config.get_secret(\"ELEVENLABS_API_KEY\") {\n        Ok(key) => key,\n        Err(_) => {"
        },
        {
          "file": "crates/goose-server/src/routes/audio.rs",
          "line": 212,
          "method": "secret_get",
          "is_test": false,
          "context": "// First try to get it as a secret\n    let api_key: String = match config.get_secret(\"ELEVENLABS_API_KEY\") {\n        Ok(key) => key,\n        Err(_) => {"
        },
        {
          "file": "crates/goose-server/src/routes/audio.rs",
          "line": 231,
          "method": "config_delete",
          "is_test": false,
          "context": "}\n                            // Delete the non-secret version\n                            let _ = config.delete(\"ELEVENLABS_API_KEY\");\n                            key\n                        }"
        },
        {
          "file": "crates/goose-server/src/routes/audio.rs",
          "line": 231,
          "method": "config_delete",
          "is_test": false,
          "context": "}\n                            // Delete the non-secret version\n                            let _ = config.delete(\"ELEVENLABS_API_KEY\");\n                            key\n                        }"
        }
      ]
    },
    "GOOSE_ALLOWLIST": {
      "key": "GOOSE_ALLOWLIST",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 3,
      "locations": [
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 351,
          "method": "env_var",
          "is_test": false,
          "context": "#[allow(dead_code)]\nfn fetch_allowed_extensions() -> Option<AllowedExtensions> {\n    match env::var(\"GOOSE_ALLOWLIST\") {\n        Err(_) => {\n            // Environment variable not set, no allowlist to enforce"
        },
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 1057,
          "method": "env_set",
          "is_test": false,
          "context": "// Set the environment variable to point to our mock server\n        env::set_var(\"GOOSE_ALLOWLIST\", format!(\"{}{}\", server_url, server_path));\n\n        // Give the server a moment to start"
        },
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 1075,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clean up\n        env::remove_var(\"GOOSE_ALLOWLIST\");\n\n        // Wait for the server thread to complete"
        }
      ]
    },
    "GOOSE_ALLOWLIST_BYPASS": {
      "key": "GOOSE_ALLOWLIST_BYPASS",
      "category": "environment",
      "methods": [
        "env_set",
        "env_var",
        "env_remove"
      ],
      "description": null,
      "usage_count": 8,
      "locations": [
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 392,
          "method": "env_var",
          "is_test": false,
          "context": "fn is_command_allowed(cmd: &str, args: &[String]) -> bool {\n    // Check if bypass is enabled\n    if let Ok(bypass_value) = env::var(\"GOOSE_ALLOWLIST_BYPASS\") {\n        if bypass_value.to_lowercase() == \"true\" {\n            // Bypass the allowlist check"
        },
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 1096,
          "method": "env_set",
          "is_test": false,
          "context": "// Set the bypass environment variable\n        env::set_var(\"GOOSE_ALLOWLIST_BYPASS\", \"true\");\n\n        // With bypass enabled, any command should be allowed regardless of allowlist"
        },
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 1105,
          "method": "env_set",
          "is_test": false,
          "context": "// Test case insensitivity\n        env::set_var(\"GOOSE_ALLOWLIST_BYPASS\", \"TRUE\");\n        assert!(is_command_allowed(\n            \"uvx\","
        },
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 1112,
          "method": "env_remove",
          "is_test": false,
          "context": "// Clean up\n        env::remove_var(\"GOOSE_ALLOWLIST_BYPASS\");\n\n        // Create a mock function to test with allowlist and bypass"
        },
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 1117,
          "method": "env_remove",
          "is_test": false,
          "context": "let test_with_allowlist_and_bypass = |bypass_value: &str, expected: bool| {\n            if bypass_value.is_empty() {\n                env::remove_var(\"GOOSE_ALLOWLIST_BYPASS\");\n            } else {\n                env::set_var(\"GOOSE_ALLOWLIST_BYPASS\", bypass_value);"
        },
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 1119,
          "method": "env_set",
          "is_test": false,
          "context": "env::remove_var(\"GOOSE_ALLOWLIST_BYPASS\");\n            } else {\n                env::set_var(\"GOOSE_ALLOWLIST_BYPASS\", bypass_value);\n            }"
        },
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 1123,
          "method": "env_var",
          "is_test": false,
          "context": "// This is what we're testing - a direct call that simulates what happens in is_command_allowed\n            let result = if let Ok(bypass) = env::var(\"GOOSE_ALLOWLIST_BYPASS\") {\n                if bypass.to_lowercase() == \"true\" {\n                    true"
        },
        {
          "file": "crates/goose-server/src/routes/extension.rs",
          "line": 1155,
          "method": "env_remove",
          "is_test": false,
          "context": "// Final cleanup\n        env::remove_var(\"GOOSE_ALLOWLIST_BYPASS\");\n    }\n}"
        }
      ]
    }
  }
}