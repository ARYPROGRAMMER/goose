import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Card } from '../ui/card';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { 
  Move, 
  WifiOff, 
  Send, 
  Signal,
  Hash,
  Power,
  Zap,
  Activity
} from 'lucide-react';

interface Position {
  x: number;
  y: number;
}

interface BitChatMessage {
  id: string;
  sender: string;
  content: string;
  timestamp: Date;
  type: 'public' | 'private' | 'system' | 'alert';
  hops?: number;
  encrypted?: boolean;
}

interface MeshPeer {
  id: string;
  name: string;
  signalStrength: number;
  lastSeen: Date;
  isConnected: boolean;
  nodeType: 'relay' | 'endpoint' | 'bridge';
}

interface BitChatWidgetProps {
  initialPosition?: Position;
  onPositionChange?: (position: Position) => void;
}

export const BitChatWidget: React.FC<BitChatWidgetProps> = ({
  initialPosition = { x: 420, y: 20 },
  onPositionChange,
}) => {
  const [position, setPosition] = useState(initialPosition);
  const [isDragging, setIsDragging] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [isExpanded, setIsExpanded] = useState(false);
  const [isOnline, setIsOnline] = useState(true);
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState<BitChatMessage[]>([]);
  const [peers, setPeers] = useState<MeshPeer[]>([]);
  const [activeChannel, setActiveChannel] = useState('#underground');
  const [batteryLevel, setBatteryLevel] = useState(87);
  const [meshStrength, setMeshStrength] = useState(3);
  const [currentTime, setCurrentTime] = useState(new Date());
  const widgetRef = useRef<HTMLDivElement>(null);
  const dragStartRef = useRef<{ x: number; y: number } | null>(null);
  const animationFrameRef = useRef<number | null>(null);

  // Update time every second for pager-like display
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date());
    }, 1000);
    return () => clearInterval(timer);
  }, []);

  // Load saved position and expanded state
  useEffect(() => {
    try {
      const savedState = localStorage.getItem('bitchat-widget-state');
      if (savedState) {
        const parsed = JSON.parse(savedState);
        if (parsed.position) {
          setPosition(parsed.position);
        }
        if (typeof parsed.isExpanded === 'boolean') {
          setIsExpanded(parsed.isExpanded);
        }
      }
    } catch (error) {
      console.warn('Failed to load BitChat widget state:', error);
    }
  }, []);

  // Save state when position or expanded state changes
  const saveWidgetState = useCallback((newPosition?: Position, newExpanded?: boolean) => {
    try {
      const currentState = {
        position: newPosition || position,
        isExpanded: newExpanded !== undefined ? newExpanded : isExpanded,
      };
      localStorage.setItem('bitchat-widget-state', JSON.stringify(currentState));
    } catch (error) {
      console.warn('Failed to save BitChat widget state:', error);
    }
  }, [position, isExpanded]);

  // Mock data with hacker/underground theme
  useEffect(() => {
    const mockMessages: BitChatMessage[] = [
      {
        id: '1',
        sender: 'n0d3_runner',
        content: '>>> mesh network expanding... 7 nodes active',
        timestamp: new Date(Date.now() - 8 * 60 * 1000),
        type: 'system',
        hops: 0,
      },
      {
        id: '2',
        sender: 'crypto_ghost',
        content: 'anyone copy? running silent protocol',
        timestamp: new Date(Date.now() - 6 * 60 * 1000),
        type: 'public',
        hops: 2,
        encrypted: true,
      },
      {
        id: '3',
        sender: 'mesh_walker',
        content: '/status',
        timestamp: new Date(Date.now() - 4 * 60 * 1000),
        type: 'public',
        hops: 1,
      },
      {
        id: '4',
        sender: 'system',
        content: '[MESH_STATUS] 12 peers | 4 relays | signal: strong',
        timestamp: new Date(Date.now() - 4 * 60 * 1000),
        type: 'system',
      },
      {
        id: '5',
        sender: 'dark_signal',
        content: 'freq hopping enabled. stay low.',
        timestamp: new Date(Date.now() - 2 * 60 * 1000),
        type: 'alert',
        hops: 3,
        encrypted: true,
      },
      {
        id: '6',
        sender: 'byte_phantom',
        content: 'mesh relay operational. passing traffic.',
        timestamp: new Date(Date.now() - 1 * 60 * 1000),
        type: 'public',
        hops: 1,
      },
    ];

    const mockPeers: MeshPeer[] = [
      {
        id: 'n0d3_runner',
        name: 'n0d3_runner',
        signalStrength: 92,
        lastSeen: new Date(Date.now() - 15 * 1000),
        isConnected: true,
        nodeType: 'relay',
      },
      {
        id: 'crypto_ghost',
        name: 'crypto_ghost',
        signalStrength: 78,
        lastSeen: new Date(Date.now() - 30 * 1000),
        isConnected: true,
        nodeType: 'endpoint',
      },
      {
        id: 'mesh_walker',
        name: 'mesh_walker',
        signalStrength: 65,
        lastSeen: new Date(Date.now() - 45 * 1000),
        isConnected: true,
        nodeType: 'bridge',
      },
      {
        id: 'dark_signal',
        name: 'dark_signal',
        signalStrength: 43,
        lastSeen: new Date(Date.now() - 90 * 1000),
        isConnected: true,
        nodeType: 'endpoint',
      },
      {
        id: 'byte_phantom',
        name: 'byte_phantom',
        signalStrength: 89,
        lastSeen: new Date(Date.now() - 20 * 1000),
        isConnected: true,
        nodeType: 'relay',
      },
    ];

    setMessages(mockMessages);
    setPeers(mockPeers);

    // Simulate mesh activity with hacker-style messages
    const interval = setInterval(() => {
      if (Math.random() < 0.4) {
        const hackerMessages = [
          'packet routing through node_7x9a',
          '>>> encryption key rotated',
          'stealth mode: active',
          '/scan frequencies',
          'mesh topology updated',
          'signal bouncing off 4 relays',
          'underground channel secure',
          'frequency: 2.4ghz clear',
          'data packet fragmented x3',
          'mesh bridge established',
        ];
        
        const senders = ['n0d3_runner', 'crypto_ghost', 'mesh_walker', 'dark_signal', 'byte_phantom'];
        
        const newMessage: BitChatMessage = {
          id: Date.now().toString(),
          sender: Math.random() < 0.3 ? 'system' : senders[Math.floor(Math.random() * senders.length)],
          content: hackerMessages[Math.floor(Math.random() * hackerMessages.length)],
          timestamp: new Date(),
          type: Math.random() < 0.2 ? 'alert' : Math.random() < 0.3 ? 'system' : 'public',
          hops: Math.floor(Math.random() * 5) + 1,
          encrypted: Math.random() < 0.4,
        };
        
        setMessages(prev => [...prev.slice(-12), newMessage]);
      }

      // Simulate battery drain and signal fluctuation
      setBatteryLevel(prev => Math.max(20, prev - (Math.random() < 0.1 ? 1 : 0)));
      setMeshStrength(prev => Math.max(1, Math.min(5, prev + (Math.random() - 0.5) * 2)));
    }, 6000);

    return () => clearInterval(interval);
  }, []);

  // Smooth drag handling with requestAnimationFrame
  const updatePosition = useCallback((clientX: number, clientY: number) => {
    if (!dragStartRef.current) return;

    const newPosition = {
      x: clientX - dragStartRef.current.x,
      y: clientY - dragStartRef.current.y,
    };

    // Keep widget within viewport bounds
    const maxX = window.innerWidth - 380;
    const maxY = window.innerHeight - (isExpanded ? 500 : 140);
    
    newPosition.x = Math.max(0, Math.min(maxX, newPosition.x));
    newPosition.y = Math.max(0, Math.min(maxY, newPosition.y));

    setPosition(newPosition);
    
    // Throttled callback to parent
    if (onPositionChange) {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
      animationFrameRef.current = requestAnimationFrame(() => {
        onPositionChange(newPosition);
      });
    }
  }, [isExpanded, onPositionChange]);

  // Handle mouse down for dragging
  const handleMouseDown = useCallback((e: React.MouseEvent) => {
    if (!widgetRef.current) return;
    
    e.preventDefault();
    const rect = widgetRef.current.getBoundingClientRect();
    dragStartRef.current = {
      x: e.clientX - rect.left,
      y: e.clientY - rect.top,
    };
    setIsDragging(true);
  }, []);

  // Handle mouse move for dragging
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (!isDragging || !dragStartRef.current) return;
      e.preventDefault();
      updatePosition(e.clientX, e.clientY);
    };

    const handleMouseUp = (e: MouseEvent) => {
      if (isDragging) {
        setIsDragging(false);
        dragStartRef.current = null;
        
        // Save final position
        if (position) {
          saveWidgetState(position);
        }
        
        // Clean up animation frame
        if (animationFrameRef.current) {
          cancelAnimationFrame(animationFrameRef.current);
          animationFrameRef.current = null;
        }
      }
    };

    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove, { passive: false });
      document.addEventListener('mouseup', handleMouseUp);
      document.body.style.userSelect = 'none';
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.body.style.userSelect = '';
      
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [isDragging, updatePosition, position, saveWidgetState]);

  const handleSendMessage = useCallback(() => {
    if (!message.trim()) return;

    const newMessage: BitChatMessage = {
      id: Date.now().toString(),
      sender: 'local_node',
      content: message,
      timestamp: new Date(),
      type: message.startsWith('/') ? 'system' : 'public',
      hops: 0,
      encrypted: message.includes('encrypt') || message.includes('secure'),
    };

    setMessages(prev => [...prev.slice(-12), newMessage]);
    setMessage('');
  }, [message]);

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSendMessage();
    }
  };

  const handleToggleExpanded = useCallback((e: React.MouseEvent) => {
    e.stopPropagation();
    const newExpanded = !isExpanded;
    setIsExpanded(newExpanded);
    saveWidgetState(undefined, newExpanded);
  }, [isExpanded, saveWidgetState]);

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { 
      hour12: false,
      hour: '2-digit', 
      minute: '2-digit',
      second: '2-digit'
    });
  };

  const getNodeTypeIcon = (type: MeshPeer['nodeType']) => {
    switch (type) {
      case 'relay': return '◊';
      case 'bridge': return '▲';
      case 'endpoint': return '●';
      default: return '○';
    }
  };

  const getMessageTypePrefix = (type: BitChatMessage['type']) => {
    switch (type) {
      case 'system': return '[SYS]';
      case 'alert': return '[!!!]';
      case 'private': return '[PVT]';
      default: return '';
    }
  };

  const connectedPeers = peers.filter(peer => peer.isConnected);

  return (
    <Card
      ref={widgetRef}
      className={`fixed bg-black/90 backdrop-blur-md border border-green-500/30 shadow-lg shadow-green-500/20 transition-all duration-200 select-none font-mono ${
        isDragging ? 'cursor-grabbing scale-105 shadow-xl shadow-green-500/40' : 'cursor-grab hover:shadow-xl hover:shadow-green-500/30 hover:border-green-500/50'
      }`}
      style={{
        left: position.x,
        top: position.y,
        zIndex: 50,
        minWidth: '360px',
        maxWidth: '380px',
        background: 'linear-gradient(135deg, rgba(0,0,0,0.95) 0%, rgba(0,20,0,0.9) 100%)',
        transform: isDragging ? 'none' : undefined,
        willChange: isDragging ? 'transform' : 'auto',
      }}
      onMouseDown={handleMouseDown}
    >
      <div className="p-3">
        {/* Header - Pager Style */}
        <div 
          className="flex items-center gap-2 mb-2 cursor-pointer border-b border-green-500/20 pb-2"
          onClick={handleToggleExpanded}
        >
          {/* App Icon */}
          <img 
            src="/icons/bitchat-icon.png" 
            alt="BitChat" 
            className="w-6 h-6 rounded-sm opacity-90"
          />
          
          <div className="flex items-center gap-2 flex-1">
            <span className="text-green-400 text-xs font-bold tracking-wider">
              BITCHAT.MESH
            </span>
            <div className="flex items-center gap-1">
              {Array.from({length: meshStrength}).map((_, i) => (
                <div key={i} className="w-1 h-3 bg-green-500 opacity-80" />
              ))}
              {Array.from({length: 5 - meshStrength}).map((_, i) => (
                <div key={i} className="w-1 h-3 bg-green-500/20" />
              ))}
            </div>
          </div>
          
          <div className="flex items-center gap-2 text-xs">
            <span className="text-green-400">{formatTime(currentTime)}</span>
            <div className="flex items-center gap-1">
              <Zap className="w-3 h-3 text-yellow-400" />
              <span className="text-yellow-400">{batteryLevel}%</span>
            </div>
            <Move className="w-3 h-3 text-green-500/50" />
          </div>
        </div>

        {/* Status Line - Hacker Style */}
        <div className="flex items-center justify-between text-xs text-green-400 mb-2 font-mono">
          <div className="flex items-center gap-2">
            <Hash className="w-3 h-3" />
            <span>{activeChannel}</span>
            <span className="text-green-500/60">|</span>
            <span>{connectedPeers.length} nodes</span>
          </div>
          <div className="flex items-center gap-2">
            {isOnline ? (
              <Activity className="w-3 h-3 text-green-500 animate-pulse" />
            ) : (
              <WifiOff className="w-3 h-3 text-red-500" />
            )}
            <span className="text-green-500/80">MESH_ACTIVE</span>
          </div>
        </div>

        {/* Expanded Content */}
        {isExpanded && (
          <div className="space-y-3">
            {/* Terminal-style Messages */}
            <div className="bg-black/60 border border-green-500/20 rounded p-2 max-h-56 overflow-y-auto font-mono text-xs">
              <div className="space-y-1">
                {messages.slice(-10).map((msg) => (
                  <div key={msg.id} className="leading-tight">
                    <div className="flex items-center gap-1 text-green-600/80">
                      <span>{formatTime(msg.timestamp)}</span>
                      <span className="text-green-500/40">|</span>
                      {msg.hops && <span>h{msg.hops}</span>}
                      {msg.encrypted && <span className="text-yellow-400">🔒</span>}
                    </div>
                    <div className="flex items-start gap-1">
                      <span className={`${
                        msg.type === 'system' ? 'text-cyan-400' :
                        msg.type === 'alert' ? 'text-red-400' :
                        msg.sender === 'local_node' ? 'text-green-300' :
                        'text-green-400'
                      }`}>
                        {getMessageTypePrefix(msg.type)}
                        {msg.sender !== 'system' && `${msg.sender}:`}
                      </span>
                      <span className={`${
                        msg.type === 'system' ? 'text-cyan-300' :
                        msg.type === 'alert' ? 'text-red-300' :
                        'text-green-200'
                      }`}>
                        {msg.content}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Node List - Matrix Style */}
            <div className="bg-black/60 border border-green-500/20 rounded p-2 font-mono">
              <div className="text-xs text-green-400 mb-1 border-b border-green-500/20 pb-1">
                MESH_NODES [{connectedPeers.length}]
              </div>
              <div className="space-y-1 text-xs">
                {peers.slice(0, 5).map((peer) => (
                  <div key={peer.id} className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <span className="text-green-500">{getNodeTypeIcon(peer.nodeType)}</span>
                      <span className={peer.isConnected ? 'text-green-300' : 'text-green-600'}>
                        {peer.name}
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="flex items-center">
                        {Array.from({length: Math.floor(peer.signalStrength / 20)}).map((_, i) => (
                          <div key={i} className="w-1 h-2 bg-green-500 mr-px" />
                        ))}
                        {Array.from({length: 5 - Math.floor(peer.signalStrength / 20)}).map((_, i) => (
                          <div key={i} className="w-1 h-2 bg-green-500/20 mr-px" />
                        ))}
                      </div>
                      <span className="text-green-400 text-xs">{peer.signalStrength}%</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Command Input - Terminal Style */}
            <div className="flex gap-1 bg-black/60 border border-green-500/20 rounded p-1">
              <span className="text-green-500 text-xs font-mono py-1 px-1">&gt;</span>
              <Input
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="enter command or message..."
                className="text-xs h-6 bg-transparent border-none text-green-300 placeholder-green-600 font-mono focus:ring-0 focus:outline-none"
                onClick={(e) => e.stopPropagation()}
              />
              <Button
                size="sm"
                onClick={(e) => {
                  e.stopPropagation();
                  handleSendMessage();
                }}
                className="h-6 px-2 bg-green-500/20 hover:bg-green-500/30 border border-green-500/40 text-green-400"
              >
                <Send className="w-3 h-3" />
              </Button>
            </div>
          </div>
        )}

        {/* Collapsed Status - Pager Style */}
        {!isExpanded && (
          <div className="space-y-1">
            <div className="text-xs font-mono">
              {messages.length > 0 && (
                <div className="flex items-center gap-1 text-green-300">
                  <span className="text-green-500">&gt;</span>
                  <span className="text-green-400">{messages[messages.length - 1].sender}:</span>
                  <span className="truncate text-green-200">{messages[messages.length - 1].content}</span>
                </div>
              )}
            </div>
            <div className="flex items-center justify-between text-xs text-green-500/80 font-mono">
              <span>{connectedPeers.length} nodes online</span>
              <span className="text-green-600">tap to expand</span>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};

export default BitChatWidget;
