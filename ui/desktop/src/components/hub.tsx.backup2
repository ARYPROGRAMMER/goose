/**
 * Hub Component - Dashboard/OS Style
 *
 * The Hub is now redesigned as a dashboard/OS-style homepage with draggable widgets
 * on a canvas. This provides a more interactive and customizable experience.
 *
 * Key Features:
 * - Canvas-based layout with draggable widgets
 * - Metric cards (sessions, tokens) as moveable widgets
 * - Recent chats widget
 * - Greeting widget with time-based messages
 * - Grid-based background for visual organization
 * - Floating chat input at the bottom
 *
 * Navigation Flow:
 * Hub (dashboard interaction + input submission) â†’ Pair (new conversation)
 */

import { useState } from 'react';
import FlappyGoose from './FlappyGoose';
import { type View, ViewOptions } from '../App';
import ChatInput from './ChatInput';
import { generateSessionId } from '../sessions';
import { ChatState } from '../types/chatState';
import { ChatContextManagerProvider } from './context_management/ChatContextManager';
import { DashboardCanvas } from './dashboard/DashboardCanvas';
import { useDashboard } from '../hooks/useDashboard';
import { Goose } from './icons/Goose';
import 'react-toastify/dist/ReactToastify.css';

import { ChatType } from '../types/chat';
import { DEFAULT_CHAT_TITLE } from '../contexts/ChatContext';

export default function Hub({
  chat: _chat,
  setChat: _setChat,
  setPairChat,
  setView,
  setIsGoosehintsModalOpen,
}: {
  readyForAutoUserPrompt: boolean;
  chat: ChatType;
  setChat: (chat: ChatType) => void;
  setPairChat: (chat: ChatType) => void;
  setView: (view: View, viewOptions?: ViewOptions) => void;
  setIsGoosehintsModalOpen: (isOpen: boolean) => void;
}) {
  const [showGame, setShowGame] = useState(false);
  const { dashboardState, isLoading, error, moveWidget, resizeWidget } = useDashboard();

  // Handle chat input submission - create new chat and navigate to pair
  const handleSubmit = (e: React.FormEvent) => {
    const customEvent = e as unknown as CustomEvent;
    const combinedTextFromInput = customEvent.detail?.value || '';

    if (combinedTextFromInput.trim()) {
      // Always create a completely new chat session with a unique ID for the PAIR
      const newChatId = generateSessionId();
      const newPairChat = {
        id: newChatId,
        title: DEFAULT_CHAT_TITLE,
        messages: [],
        messageHistoryIndex: 0,
        recipeConfig: null,
        recipeParameters: null,
      };

      // Update the PAIR chat state immediately to prevent flashing
      setPairChat(newPairChat);

      // Navigate to pair page with the message to be submitted immediately
      setView('pair', {
        disableAnimation: true,
        initialMessage: combinedTextFromInput,
        resetChat: true,
      });
    }

    // Prevent default form submission
    e.preventDefault();
  };

  if (isLoading) {
    return (
      <ChatContextManagerProvider>
        <div className="flex flex-col h-full bg-background-muted">
          {/* Loading state with Goose icon */}
          <div className="flex-1 flex items-center justify-center">
            <div className="text-center space-y-4">
              <div className="origin-center goose-icon-animation">
                <Goose className="size-12 mx-auto text-text-muted" />
              </div>
              <div className="text-text-muted">Loading dashboard...</div>
            </div>
          </div>
          
          <ChatInput
            handleSubmit={handleSubmit}
            chatState={ChatState.Idle}
            onStop={() => {}}
            commandHistory={[]}
            initialValue=""
            setView={setView}
            numTokens={0}
            inputTokens={0}
            outputTokens={0}
            droppedFiles={[]}
            onFilesProcessed={() => {}}
            messages={[]}
            setMessages={() => {}}
            disableAnimation={false}
            sessionCosts={undefined}
            setIsGoosehintsModalOpen={setIsGoosehintsModalOpen}
          />
        </div>
      </ChatContextManagerProvider>
    );
  }

  return (
    <ChatContextManagerProvider>
      <div className="flex flex-col h-full bg-background-muted relative">
        {/* Dashboard Canvas - takes up most of the space */}
        <div className="flex-1 relative overflow-hidden">
          <DashboardCanvas
            widgets={dashboardState.widgets}
            onWidgetMove={moveWidget}
            onWidgetResize={resizeWidget}
          />
          
          {/* Error overlay if data failed to load */}
          {error && (
            <div className="absolute top-4 left-4 right-4">
              <div className="px-4 py-2 bg-orange-50 dark:bg-orange-950/20 border border-orange-200 dark:border-orange-800/30 rounded-xl">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-orange-400 rounded-full flex-shrink-0"></div>
                  <span className="text-xs text-orange-700 dark:text-orange-300">
                    Failed to load dashboard data
                  </span>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Floating Chat Input - positioned at bottom */}
        <div className="relative z-10 bg-background-muted/80 backdrop-blur-sm border-t border-border/50">
          <ChatInput
            handleSubmit={handleSubmit}
            chatState={ChatState.Idle}
            onStop={() => {}}
            commandHistory={[]}
            initialValue=""
            setView={setView}
            numTokens={0}
            inputTokens={0}
            outputTokens={0}
            droppedFiles={[]}
            onFilesProcessed={() => {}}
            messages={[]}
            setMessages={() => {}}
            disableAnimation={false}
            sessionCosts={undefined}
            setIsGoosehintsModalOpen={setIsGoosehintsModalOpen}
          />
        </div>

        {showGame && <FlappyGoose onClose={() => setShowGame(false)} />}
      </div>
    </ChatContextManagerProvider>
  );
}
