on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:
    branches:
      - main
  workflow_dispatch:

name: CI

jobs:
  rust-format:
    name: Check Rust Code Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4

      - name: Run cargo fmt
        run: source ./bin/activate-hermit && cargo fmt --check

  rust-test:
    name: Test Rust Project
    runs-on: goose
    steps:
      - name: Check disk space before build
        run: df -h

      #https://github.com/actions/runner-images/issues/2840
      - name: Clean up disk space
        run: |
          echo "Cleaning up disk space..."
          sudo rm -rf \
            /opt/google/chrome \
            /opt/microsoft/msedge \
            /opt/microsoft/powershell \
            /usr/lib/mono \
            /usr/local/lib/android \
            /usr/local/lib/node_modules \
            /usr/local/share/chromium \
            /usr/local/share/powershell \
            /usr/share/dotnet \
            /usr/share/swift \
            /opt/ghc \
            /opt/hostedtoolcache \
            /usr/local/graalvm \
            /usr/local/sqlpackage
          
          # Clean package manager caches
          sudo apt-get clean
          sudo apt-get autoremove -y
          
          # Clean docker if present
          docker system prune -af 2>/dev/null || true
          
          df -h

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4

      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libdbus-1-dev gnome-keyring libxcb1-dev

      # Improved unified caching strategy
      - name: Cache Cargo
        uses: actions/cache@2f8e54208210a422b2efd51efaa6bd6d7ca8920f # pin@v3
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target/debug/deps
            target/debug/build
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Run Tests
        run: |
          gnome-keyring-daemon --components=secrets --daemonize --unlock <<< 'foobar'
          source ../bin/activate-hermit
          export CARGO_INCREMENTAL=0
          cargo test --jobs 2
        working-directory: crates

      - name: Smart cleanup (preserve cache)
        run: |
          echo "Selective cleanup to preserve cache..."
          # Remove only large temporary files, keep cached deps
          rm -rf target/debug/incremental  # These rebuild anyway
          rm -rf target/debug/examples     # Not needed
          rm -rf target/debug/*.d          # Dependency files
          # Keep target/debug/deps and target/debug/build (cached)
          
          # Clean system caches but preserve cargo cache
          sudo apt-get clean
          docker system prune -f 2>/dev/null || true
          
          df -h

  rust-clippy:
    name: Lint Rust Project
    runs-on: goose
    steps:
      - name: Check disk space before build
        run: df -h

      #https://github.com/actions/runner-images/issues/2840
      - name: Clean up disk space
        run: |
          echo "Cleaning up disk space..."
          sudo rm -rf \
            /opt/google/chrome \
            /opt/microsoft/msedge \
            /opt/microsoft/powershell \
            /usr/lib/mono \
            /usr/local/lib/android \
            /usr/local/lib/node_modules \
            /usr/local/share/chromium \
            /usr/local/share/powershell \
            /usr/share/dotnet \
            /usr/share/swift \
            /opt/ghc \
            /opt/hostedtoolcache \
            /usr/local/graalvm \
            /usr/local/sqlpackage
          
          # Clean package manager caches
          sudo apt-get clean
          sudo apt-get autoremove -y
          
          # Clean docker if present
          docker system prune -af 2>/dev/null || true
          
          df -h

      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4

      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libdbus-1-dev gnome-keyring libxcb1-dev

      # Same cache as test job for sharing
      - name: Cache Cargo
        uses: actions/cache@2f8e54208210a422b2efd51efaa6bd6d7ca8920f # pin@v3
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target/debug/deps
            target/debug/build
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Run Clippy
        run: |
          source ./bin/activate-hermit
          export CARGO_INCREMENTAL=0
          cargo clippy --jobs 2 -- -D warnings

      - name: Smart cleanup (preserve cache)
        run: |
          echo "Selective cleanup to preserve cache..."
          # Remove only large temporary files, keep cached deps
          rm -rf target/debug/incremental  # These rebuild anyway
          rm -rf target/debug/examples     # Not needed
          rm -rf target/debug/*.d          # Dependency files
          # Keep target/debug/deps and target/debug/build (cached)
          
          # Clean system caches but preserve cargo cache
          sudo apt-get clean
          docker system prune -f 2>/dev/null || true
          
          df -h

  rust-build-and-test:
    name: Build and Test Rust Project
    runs-on: ubuntu-latest
    needs: [rust-test, rust-clippy]
    if: always()
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.rust-test.result }}" == "success" && "${{ needs.rust-clippy.result }}" == "success" ]]; then
            echo "✅ All Rust jobs completed successfully"
            exit 0
          else
            echo "❌ One or more Rust jobs failed:"
            echo "  Test job: ${{ needs.rust-test.result }}"
            echo "  Clippy job: ${{ needs.rust-clippy.result }}"
            exit 1
          fi
          
  desktop-lint:
    name: Lint Electron Desktop App
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4

      - name: Install Dependencies
        run: source ../../bin/activate-hermit && npm ci
        working-directory: ui/desktop

      - name: Run Lint
        run: source ../../bin/activate-hermit && npm run lint:check
        working-directory: ui/desktop

  # Faster Desktop App build for PRs only
  bundle-desktop-unsigned:
    uses: ./.github/workflows/bundle-desktop.yml
    if: github.event_name == 'pull_request' || github.event_name == 'merge_group'
    with:
      signing: false
