# This is a **reuseable** workflow that bundles the Desktop App for macOS.
# It doesn't get triggered on its own. It gets used in multiple workflows:
#  - release.yml
#  - canary.yml
#  - pr-comment-bundle-desktop.yml
on:
  workflow_call:
    inputs:
      version:
        description: 'Version to set for the build'
        required: false
        default: ""
        type: string
      signing:
        description: 'Whether to perform signing and notarization'
        required: false
        default: false
        type: boolean
      quick_test:
        description: 'Whether to perform the quick launch test'
        required: false
        default: true
        type: boolean
      ref:
        description: 'Git ref to checkout (branch, tag, or SHA)'
        required: false
        type: string
      pr_number:
        description: 'PR number to fetch'
        required: false
        type: string
    secrets:
      CERTIFICATE_OSX_APPLICATION:
        description: 'Certificate for macOS application signing'
        required: false
      CERTIFICATE_PASSWORD:
        description: 'Password for the macOS certificate'
        required: false
      APPLE_ID:
        description: 'Apple ID for notarization'
        required: false
      APPLE_ID_PASSWORD:
        description: 'Password for the Apple ID'
        required: false
      APPLE_TEAM_ID:
        description: 'Apple Team ID'
        required: false

name: Reusable workflow to bundle desktop app

jobs:
  bundle-desktop:
    runs-on: macos-latest
    name: Bundle Desktop App on macOS
    steps:
      # Debug information about the workflow and inputs
      - name: Debug workflow info
        env:
          WORKFLOW_FILE: ${{ github.workflow }}
          WORKFLOW_REF: ${{ github.ref }}
          EVENT_NAME: ${{ github.event_name }}
          REPOSITORY: ${{ github.repository }}
          INPUT_REF: ${{ inputs.ref }}
          INPUT_PR: ${{ inputs.pr_number }}
          INPUT_VERSION: ${{ inputs.version }}
          INPUT_SIGNING: ${{ inputs.signing }}
          INPUT_QUICK_TEST: ${{ inputs.quick_test }}
        run: |
          echo "Workflow source info:"
          echo "  Workflow file: ${WORKFLOW_FILE}"
          echo "  Workflow ref: ${WORKFLOW_REF}"
          echo "  Event name: ${EVENT_NAME}"
          echo "  Repository: ${REPOSITORY}"
          echo ""
          echo "Input parameters:"
          echo "  Requested ref: ${INPUT_REF}"
          echo "  PR number: ${INPUT_PR}"
          echo "  Version: ${INPUT_VERSION}"
          echo "  Signing enabled: ${INPUT_SIGNING}"
          echo "  Quick test enabled: ${INPUT_QUICK_TEST}"

      # Check initial disk space
      - name: Check initial disk space
        run: df -h

      # Validate Signing Secrets if signing is enabled
      - name: Validate Signing Secrets
        if: ${{ inputs.signing }}
        shell: bash
        run: |
          missing_secrets=()
          
          [ -z "$CERT" ] && missing_secrets+=("CERTIFICATE_OSX_APPLICATION")
          [ -z "$CERT_PASS" ] && missing_secrets+=("CERTIFICATE_PASSWORD")
          [ -z "$APPLE_ID" ] && missing_secrets+=("APPLE_ID")
          [ -z "$APPLE_PASS" ] && missing_secrets+=("APPLE_ID_PASSWORD")
          [ -z "$TEAM_ID" ] && missing_secrets+=("APPLE_TEAM_ID")
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: The following required secrets are missing:"
            printf '%s\n' "${missing_secrets[@]}"
            exit 1
          fi
          
          echo "All required signing secrets are present."
        env:
          CERT: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CERT_PASS: ${{ secrets.CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASS: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0  # Fetch all history
          submodules: recursive

      - name: Debug git status
        run: |
          echo "Git status after checkout:"
          git status
          echo ""
          echo "Current commit:"
          git rev-parse HEAD
          echo ""
          echo "Recent commits:"
          git log --oneline -n 5
          echo ""
          echo "Remote branches:"
          git branch -r

      # Update versions before build
      - name: Update versions
        if: ${{ inputs.version != '' }}
        env:
          VERSION: ${{ inputs.version }}
        run: |
          # Update version in Cargo.toml
          sed -i.bak "s/^version = \".*\"/version = \"${VERSION}\"/" Cargo.toml
          rm -f Cargo.toml.bak
          
          # Update version in package.json 
          cd ui/desktop
          npm version "${VERSION}" --no-git-tag-version --allow-same-version

      # Pre-build cleanup to ensure enough disk space
      - name: Pre-build cleanup
        run: |
          echo "Performing pre-build cleanup..."
          # Clean npm cache
          npm cache clean --force || true
          # Clean any previous build artifacts
          rm -rf target || true
          # Clean Homebrew cache
          brew cleanup || true
          # Remove unnecessary large directories
          rm -rf ~/Library/Caches/* || true
          # Check disk space after cleanup
          df -h

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@38b70195107dddab2c7bbd522bcf763bac00963b # pin@stable
        with:
          toolchain: stable

      - name: Cache Cargo registry
        uses: actions/cache@2f8e54208210a422b2efd51efaa6bd6d7ca8920f # pin@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@2f8e54208210a422b2efd51efaa6bd6d7ca8920f # pin@v3
        with:
          path: ~/.cargo/index
          key: ${{ runner.os }}-cargo-index
          restore-keys: |
            ${{ runner.os }}-cargo-index

      - name: Cache Cargo build
        uses: actions/cache@2f8e54208210a422b2efd51efaa6bd6d7ca8920f # pin@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      # Build the project
      - name: Build goosed
        run: cargo build --release -p goose-server

      # Post-build cleanup to free space
      - name: Post-build cleanup
        run: |
          echo "Performing post-build cleanup..."
          # Remove debug artifacts
          rm -rf target/debug || true
          # Keep only what's needed for the next steps
          rm -rf target/release/deps || true
          rm -rf target/release/build || true
          rm -rf target/release/incremental || true
          # Check disk space after cleanup
          df -h

      - name: Copy binary into Electron folder
        run: cp target/release/goosed ui/desktop/src/bin/goosed

      - name: Add MacOS certs for signing and notarization
        if: ${{ inputs.signing }}
        run: ./scripts/add-macos-cert.sh
        working-directory: ui/desktop
        env:
          CERTIFICATE_OSX_APPLICATION: ${{ secrets.CERTIFICATE_OSX_APPLICATION }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Set up Node.js
        uses: actions/setup-node@7c12f8017d5436eb855f1ed4399f037a36fbd9e8 # pin@v2
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm ci
        working-directory: ui/desktop

      # Check disk space before bundling
      - name: Check disk space before bundling
        run: df -h

      - name: Make Unsigned App
        if: ${{ !inputs.signing }}
        run: |
          attempt=0
          max_attempts=2
          until [ $attempt -ge $max_attempts ]; do
            npm run bundle:default && break
            attempt=$((attempt + 1))
            echo "Attempt $attempt failed. Retrying..."
            sleep 5
          done
          if [ $attempt -ge $max_attempts ]; then
            echo "Action failed after $max_attempts attempts."
            exit 1
          fi
        working-directory: ui/desktop

      - name: Make Signed App
        if: ${{ inputs.signing }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          attempt=0
          max_attempts=2
          until [ $attempt -ge $max_attempts ]; do
            npm run bundle:default && break
            attempt=$((attempt + 1))
            echo "Attempt $attempt failed. Retrying..."
            sleep 5
          done
          if [ $attempt -ge $max_attempts ]; then
            echo "Action failed after $max_attempts attempts."
            exit 1
          fi
        working-directory: ui/desktop

      - name: Final cleanup before artifact upload
        run: |
          echo "Performing final cleanup..."
          # Remove build artifacts that are no longer needed
          rm -rf target || true
          # Check disk space after cleanup
          df -h

      - name: Upload Desktop artifact
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # pin@v4
        with:
          name: Goose-darwin-arm64
          path: ui/desktop/out/Goose-darwin-arm64/Goose.zip

      - name: Quick launch test (macOS)
        if: ${{ inputs.quick_test }}
        run: |
          # Ensure no quarantine attributes (if needed)
          xattr -cr "ui/desktop/out/Goose-darwin-arm64/Goose.app"
          echo "Opening Goose.app..."
          open -g "ui/desktop/out/Goose-darwin-arm64/Goose.app"

          # Give the app a few seconds to start and write logs
          sleep 5

          # Check if it's running
          if pgrep -f "Goose.app/Contents/MacOS/Goose" > /dev/null; then
            echo "App appears to be running."
          else
            echo "App did not stay open. Possible crash or startup error."
            exit 1
          fi
          # Kill the app to clean up
          pkill -f "Goose.app/Contents/MacOS/Goose"