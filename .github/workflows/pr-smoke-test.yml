on:
  pull_request:
    branches:
      - main

name: PR Smoke Tests

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4
      
      - name: Check for code changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # pin@v3
        id: filter
        with:
          filters: |
            code:
              - '!documentation/**'

  build-binary:
    name: Build Release Binary
    runs-on: goose
    needs: changes
    if: needs.changes.outputs.code == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4

      - name: Activate hermit and set CARGO_HOME
        run: |
          source bin/activate-hermit
          echo "CARGO_HOME=$CARGO_HOME" >> $GITHUB_ENV
          echo "RUSTUP_HOME=$RUSTUP_HOME" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y libdbus-1-dev gnome-keyring libxcb1-dev

      - name: Cache Cargo artifacts
        uses: actions/cache@2f8e54208210a422b2efd51efaa6bd6d7ca8920f # pin@v3
        with:
          path: |
            ${{ env.CARGO_HOME }}/bin/
            ${{ env.CARGO_HOME }}/registry/index/
            ${{ env.CARGO_HOME }}/registry/cache/
            ${{ env.CARGO_HOME }}/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Release Binary for Smoke Tests
        run: |
          source ./bin/activate-hermit
          cargo build --release

      - name: Upload Binary for Smoke Tests
        uses: actions/upload-artifact@v4
        with:
          name: goose-binary
          path: target/release/goose
          retention-days: 1

  smoke-tests:
    name: Smoke Tests (${{ matrix.provider }})
    runs-on: ubuntu-latest
    needs: build-binary
    strategy:
      matrix:
        provider: [anthropic, openai]
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4

      - name: Download Binary
        uses: actions/download-artifact@v4
        with:
          name: goose-binary
          path: target/release

      - name: Make Binary Executable
        run: chmod +x target/release/goose

      - name: Run Smoke Test
        env:
          GOOSE_PROVIDER: ${{ matrix.provider }}
          GOOSE_MODEL: ${{ matrix.provider == 'anthropic' && 'claude-sonnet-4-5-20250929' || 'gpt-5' }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          HOME: /tmp/goose-home
          GOOSE_DISABLE_KEYRING: 1
        run: |
          # Ensure the HOME directory structure exists
          mkdir -p $HOME/.local/share/goose/sessions
          mkdir -p $HOME/.config/goose

          # Create test file in current directory
          echo "hello" > hello.txt

          echo "=== Goose Smoke Test ==="
          echo "Provider: ${GOOSE_PROVIDER}"
          echo "Model: ${GOOSE_MODEL}"
          echo ""

          # Run goose and capture output
          OUTPUT=$(./target/release/goose run --text "please list files in the current directory" --with-builtin developer 2>&1)
          
          echo "Output:"
          echo "$OUTPUT"
          echo ""

          # Check if hello.txt appears in output
          if echo "$OUTPUT" | grep -q "hello.txt"; then
            echo "✓ SUCCESS: Test passed - found hello.txt in output"
            exit 0
          else
            echo "✗ FAILED: Test failed - hello.txt not found in output"
            exit 1
          fi
